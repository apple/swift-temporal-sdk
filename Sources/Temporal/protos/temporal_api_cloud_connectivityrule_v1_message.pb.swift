// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/cloud/connectivityrule/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package struct Temporal_Api_Cloud_Connectivityrule_V1_ConnectivityRule: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The id of the private connectivity rule.
  package var id: String = String()

  /// The connectivity rule specification.
  package var spec: Temporal_Api_Cloud_Connectivityrule_V1_ConnectivityRuleSpec {
    get {return _spec ?? Temporal_Api_Cloud_Connectivityrule_V1_ConnectivityRuleSpec()}
    set {_spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  package var hasSpec: Bool {return self._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  package mutating func clearSpec() {self._spec = nil}

  /// The current version of the connectivity rule specification.
  /// The next update operation will have to include this version.
  package var resourceVersion: String = String()

  package var state: Temporal_Api_Cloud_Resource_V1_ResourceState = .unspecified

  /// The id of the async operation that is creating/updating/deleting the connectivity rule, if any.
  package var asyncOperationID: String = String()

  /// The date and time when the connectivity rule was created.
  package var createdTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdTime = newValue}
  }
  /// Returns true if `createdTime` has been explicitly set.
  package var hasCreatedTime: Bool {return self._createdTime != nil}
  /// Clears the value of `createdTime`. Subsequent reads from it will return its default value.
  package mutating func clearCreatedTime() {self._createdTime = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _spec: Temporal_Api_Cloud_Connectivityrule_V1_ConnectivityRuleSpec? = nil
  fileprivate var _createdTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// The connectivity rule specification passed in on create/update operations.
package struct Temporal_Api_Cloud_Connectivityrule_V1_ConnectivityRuleSpec: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var connectionType: Temporal_Api_Cloud_Connectivityrule_V1_ConnectivityRuleSpec.OneOf_ConnectionType? = nil

  /// This allows access via public internet.
  package var publicRule: Temporal_Api_Cloud_Connectivityrule_V1_PublicConnectivityRule {
    get {
      if case .publicRule(let v)? = connectionType {return v}
      return Temporal_Api_Cloud_Connectivityrule_V1_PublicConnectivityRule()
    }
    set {connectionType = .publicRule(newValue)}
  }

  /// This allows access via specific private vpc.
  package var privateRule: Temporal_Api_Cloud_Connectivityrule_V1_PrivateConnectivityRule {
    get {
      if case .privateRule(let v)? = connectionType {return v}
      return Temporal_Api_Cloud_Connectivityrule_V1_PrivateConnectivityRule()
    }
    set {connectionType = .privateRule(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum OneOf_ConnectionType: Equatable, Sendable {
    /// This allows access via public internet.
    case publicRule(Temporal_Api_Cloud_Connectivityrule_V1_PublicConnectivityRule)
    /// This allows access via specific private vpc.
    case privateRule(Temporal_Api_Cloud_Connectivityrule_V1_PrivateConnectivityRule)

  }

  package init() {}
}

/// A public connectivity rule allows access to the namespace via the public internet.
package struct Temporal_Api_Cloud_Connectivityrule_V1_PublicConnectivityRule: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// A private connectivity rule allows connections from a specific private vpc only.
package struct Temporal_Api_Cloud_Connectivityrule_V1_PrivateConnectivityRule: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Connection id provided to enforce the private connectivity. This is required both by AWS and GCP.
  package var connectionID: String = String()

  /// For GCP private connectivity service, GCP needs both GCP project id and the Private Service Connect Connection IDs
  /// AWS only needs the connection_id
  package var gcpProjectID: String = String()

  /// The region of the connectivity rule. This should align with the namespace.
  /// Example: "aws-us-west-2"
  package var region: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.cloud.connectivityrule.v1"

extension Temporal_Api_Cloud_Connectivityrule_V1_ConnectivityRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".ConnectivityRule"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}spec\0\u{4}\u{2}resource_version\0\u{1}state\0\u{3}async_operation_id\0\u{3}created_time\0\u{c}\u{3}\u{1}")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.resourceVersion) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.asyncOperationID) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._createdTime) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.resourceVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceVersion, fieldNumber: 4)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 5)
    }
    if !self.asyncOperationID.isEmpty {
      try visitor.visitSingularStringField(value: self.asyncOperationID, fieldNumber: 6)
    }
    try { if let v = self._createdTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Connectivityrule_V1_ConnectivityRule, rhs: Temporal_Api_Cloud_Connectivityrule_V1_ConnectivityRule) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._spec != rhs._spec {return false}
    if lhs.resourceVersion != rhs.resourceVersion {return false}
    if lhs.state != rhs.state {return false}
    if lhs.asyncOperationID != rhs.asyncOperationID {return false}
    if lhs._createdTime != rhs._createdTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Cloud_Connectivityrule_V1_ConnectivityRuleSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".ConnectivityRuleSpec"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}public_rule\0\u{3}private_rule\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Temporal_Api_Cloud_Connectivityrule_V1_PublicConnectivityRule?
        var hadOneofValue = false
        if let current = self.connectionType {
          hadOneofValue = true
          if case .publicRule(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.connectionType = .publicRule(v)
        }
      }()
      case 2: try {
        var v: Temporal_Api_Cloud_Connectivityrule_V1_PrivateConnectivityRule?
        var hadOneofValue = false
        if let current = self.connectionType {
          hadOneofValue = true
          if case .privateRule(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.connectionType = .privateRule(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.connectionType {
    case .publicRule?: try {
      guard case .publicRule(let v)? = self.connectionType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .privateRule?: try {
      guard case .privateRule(let v)? = self.connectionType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Connectivityrule_V1_ConnectivityRuleSpec, rhs: Temporal_Api_Cloud_Connectivityrule_V1_ConnectivityRuleSpec) -> Bool {
    if lhs.connectionType != rhs.connectionType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Cloud_Connectivityrule_V1_PublicConnectivityRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".PublicConnectivityRule"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Connectivityrule_V1_PublicConnectivityRule, rhs: Temporal_Api_Cloud_Connectivityrule_V1_PublicConnectivityRule) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Cloud_Connectivityrule_V1_PrivateConnectivityRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".PrivateConnectivityRule"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}connection_id\0\u{3}gcp_project_id\0\u{1}region\0\u{c}\u{4}\u{1}")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.gcpProjectID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.region) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 1)
    }
    if !self.gcpProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.gcpProjectID, fieldNumber: 2)
    }
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Connectivityrule_V1_PrivateConnectivityRule, rhs: Temporal_Api_Cloud_Connectivityrule_V1_PrivateConnectivityRule) -> Bool {
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.gcpProjectID != rhs.gcpProjectID {return false}
    if lhs.region != rhs.region {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
