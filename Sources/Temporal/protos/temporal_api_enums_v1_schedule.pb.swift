// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/enums/v1/schedule.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ScheduleOverlapPolicy controls what happens when a workflow would be started
/// by a schedule, and is already running.
package enum Temporal_Api_Enums_V1_ScheduleOverlapPolicy: SwiftProtobuf.Enum, Swift.CaseIterable {
  package typealias RawValue = Int
  case unspecified // = 0

  /// SCHEDULE_OVERLAP_POLICY_SKIP (default) means don't start anything. When the
  /// workflow completes, the next scheduled event after that time will be considered.
  case skip // = 1

  /// SCHEDULE_OVERLAP_POLICY_BUFFER_ONE means start the workflow again soon as the
  /// current one completes, but only buffer one start in this way. If another start is
  /// supposed to happen when the workflow is running, and one is already buffered, then
  /// only the first one will be started after the running workflow finishes.
  case bufferOne // = 2

  /// SCHEDULE_OVERLAP_POLICY_BUFFER_ALL means buffer up any number of starts to all
  /// happen sequentially, immediately after the running workflow completes.
  case bufferAll // = 3

  /// SCHEDULE_OVERLAP_POLICY_CANCEL_OTHER means that if there is another workflow
  /// running, cancel it, and start the new one after the old one completes cancellation.
  case cancelOther // = 4

  /// SCHEDULE_OVERLAP_POLICY_TERMINATE_OTHER means that if there is another workflow
  /// running, terminate it and start the new one immediately.
  case terminateOther // = 5

  /// SCHEDULE_OVERLAP_POLICY_ALLOW_ALL means start any number of concurrent workflows.
  /// Note that with this policy, last completion result and last failure will not be
  /// available since workflows are not sequential.
  case allowAll // = 6
  case UNRECOGNIZED(Int)

  package init() {
    self = .unspecified
  }

  package init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .skip
    case 2: self = .bufferOne
    case 3: self = .bufferAll
    case 4: self = .cancelOther
    case 5: self = .terminateOther
    case 6: self = .allowAll
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  package var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .skip: return 1
    case .bufferOne: return 2
    case .bufferAll: return 3
    case .cancelOther: return 4
    case .terminateOther: return 5
    case .allowAll: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  package static let allCases: [Temporal_Api_Enums_V1_ScheduleOverlapPolicy] = [
    .unspecified,
    .skip,
    .bufferOne,
    .bufferAll,
    .cancelOther,
    .terminateOther,
    .allowAll,
  ]

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Temporal_Api_Enums_V1_ScheduleOverlapPolicy: SwiftProtobuf._ProtoNameProviding {
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0SCHEDULE_OVERLAP_POLICY_UNSPECIFIED\0\u{1}SCHEDULE_OVERLAP_POLICY_SKIP\0\u{1}SCHEDULE_OVERLAP_POLICY_BUFFER_ONE\0\u{1}SCHEDULE_OVERLAP_POLICY_BUFFER_ALL\0\u{1}SCHEDULE_OVERLAP_POLICY_CANCEL_OTHER\0\u{1}SCHEDULE_OVERLAP_POLICY_TERMINATE_OTHER\0\u{1}SCHEDULE_OVERLAP_POLICY_ALLOW_ALL\0")
}
