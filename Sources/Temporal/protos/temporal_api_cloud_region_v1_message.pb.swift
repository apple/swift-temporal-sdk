// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/cloud/region/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package struct Temporal_Api_Cloud_Region_V1_Region: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The id of the temporal cloud region.
  package var id: String = String()

  /// The name of the cloud provider that's hosting the region.
  /// Currently only "aws" is supported.
  /// Deprecated: Not supported after v0.3.0 api version. Use cloud_provider instead. 
  /// temporal:versioning:max_version=v0.3.0
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  package var cloudProviderDeprecated: String = String()

  /// The cloud provider that's hosting the region.
  /// temporal:versioning:min_version=v0.3.0
  /// temporal:enums:replaces=cloud_provider_deprecated
  package var cloudProvider: Temporal_Api_Cloud_Region_V1_Region.CloudProvider = .unspecified

  /// The region identifier as defined by the cloud provider.
  package var cloudProviderRegion: String = String()

  /// The human readable location of the region.
  package var location: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The cloud provider that's hosting the region.
  package enum CloudProvider: SwiftProtobuf.Enum, Swift.CaseIterable {
    package typealias RawValue = Int
    case unspecified // = 0
    case aws // = 1
    case gcp // = 2
    case UNRECOGNIZED(Int)

    package init() {
      self = .unspecified
    }

    package init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .aws
      case 2: self = .gcp
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    package var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .aws: return 1
      case .gcp: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    package static let allCases: [Temporal_Api_Cloud_Region_V1_Region.CloudProvider] = [
      .unspecified,
      .aws,
      .gcp,
    ]

  }

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.cloud.region.v1"

extension Temporal_Api_Cloud_Region_V1_Region: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Region"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{3}cloud_provider_deprecated\0\u{3}cloud_provider_region\0\u{1}location\0\u{3}cloud_provider\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cloudProviderDeprecated) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cloudProviderRegion) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.location) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.cloudProvider) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.cloudProviderDeprecated.isEmpty {
      try visitor.visitSingularStringField(value: self.cloudProviderDeprecated, fieldNumber: 2)
    }
    if !self.cloudProviderRegion.isEmpty {
      try visitor.visitSingularStringField(value: self.cloudProviderRegion, fieldNumber: 3)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 4)
    }
    if self.cloudProvider != .unspecified {
      try visitor.visitSingularEnumField(value: self.cloudProvider, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Region_V1_Region, rhs: Temporal_Api_Cloud_Region_V1_Region) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.cloudProviderDeprecated != rhs.cloudProviderDeprecated {return false}
    if lhs.cloudProvider != rhs.cloudProvider {return false}
    if lhs.cloudProviderRegion != rhs.cloudProviderRegion {return false}
    if lhs.location != rhs.location {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Cloud_Region_V1_Region.CloudProvider: SwiftProtobuf._ProtoNameProviding {
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0CLOUD_PROVIDER_UNSPECIFIED\0\u{1}CLOUD_PROVIDER_AWS\0\u{1}CLOUD_PROVIDER_GCP\0")
}
