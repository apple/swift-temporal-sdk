// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/testservice/v1/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

package import GRPCCore
internal import GRPCProtobuf
package import SwiftProtobuf

// MARK: - temporal.api.testservice.v1.TestService

/// Namespace containing generated types for the "temporal.api.testservice.v1.TestService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
package enum Temporal_Api_Testservice_V1_TestService {
    /// Service descriptor for the "temporal.api.testservice.v1.TestService" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.testservice.v1.TestService")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "LockTimeSkipping" metadata.
        package enum LockTimeSkipping {
            /// Request type for "LockTimeSkipping".
            package typealias Input = Temporal_Api_Testservice_V1_LockTimeSkippingRequest
            /// Response type for "LockTimeSkipping".
            package typealias Output = Temporal_Api_Testservice_V1_LockTimeSkippingResponse
            /// Descriptor for "LockTimeSkipping".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.testservice.v1.TestService"),
                method: "LockTimeSkipping"
            )
        }
        /// Namespace for "UnlockTimeSkipping" metadata.
        package enum UnlockTimeSkipping {
            /// Request type for "UnlockTimeSkipping".
            package typealias Input = Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest
            /// Response type for "UnlockTimeSkipping".
            package typealias Output = Temporal_Api_Testservice_V1_UnlockTimeSkippingResponse
            /// Descriptor for "UnlockTimeSkipping".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.testservice.v1.TestService"),
                method: "UnlockTimeSkipping"
            )
        }
        /// Namespace for "Sleep" metadata.
        package enum Sleep {
            /// Request type for "Sleep".
            package typealias Input = Temporal_Api_Testservice_V1_SleepRequest
            /// Response type for "Sleep".
            package typealias Output = Temporal_Api_Testservice_V1_SleepResponse
            /// Descriptor for "Sleep".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.testservice.v1.TestService"),
                method: "Sleep"
            )
        }
        /// Namespace for "SleepUntil" metadata.
        package enum SleepUntil {
            /// Request type for "SleepUntil".
            package typealias Input = Temporal_Api_Testservice_V1_SleepUntilRequest
            /// Response type for "SleepUntil".
            package typealias Output = Temporal_Api_Testservice_V1_SleepResponse
            /// Descriptor for "SleepUntil".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.testservice.v1.TestService"),
                method: "SleepUntil"
            )
        }
        /// Namespace for "UnlockTimeSkippingWithSleep" metadata.
        package enum UnlockTimeSkippingWithSleep {
            /// Request type for "UnlockTimeSkippingWithSleep".
            package typealias Input = Temporal_Api_Testservice_V1_SleepRequest
            /// Response type for "UnlockTimeSkippingWithSleep".
            package typealias Output = Temporal_Api_Testservice_V1_SleepResponse
            /// Descriptor for "UnlockTimeSkippingWithSleep".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.testservice.v1.TestService"),
                method: "UnlockTimeSkippingWithSleep"
            )
        }
        /// Namespace for "GetCurrentTime" metadata.
        package enum GetCurrentTime {
            /// Request type for "GetCurrentTime".
            package typealias Input = SwiftProtobuf.Google_Protobuf_Empty
            /// Response type for "GetCurrentTime".
            package typealias Output = Temporal_Api_Testservice_V1_GetCurrentTimeResponse
            /// Descriptor for "GetCurrentTime".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.testservice.v1.TestService"),
                method: "GetCurrentTime"
            )
        }
        /// Descriptors for all methods in the "temporal.api.testservice.v1.TestService" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            LockTimeSkipping.descriptor,
            UnlockTimeSkipping.descriptor,
            Sleep.descriptor,
            SleepUntil.descriptor,
            UnlockTimeSkippingWithSleep.descriptor,
            GetCurrentTime.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "temporal.api.testservice.v1.TestService" service.
    package static let temporal_api_testservice_v1_TestService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.testservice.v1.TestService")
}

// MARK: temporal.api.testservice.v1.TestService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Temporal_Api_Testservice_V1_TestService {
    /// Generated client protocol for the "temporal.api.testservice.v1.TestService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TestService API defines an interface supported only by the Temporal Test Server.
    /// > It provides functionality needed or supported for testing purposes only.
    /// > 
    /// > This is an EXPERIMENTAL API.
    package protocol ClientProtocol: Sendable {
        /// Call the "LockTimeSkipping" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > LockTimeSkipping increments Time Locking Counter by one.
        /// > 
        /// > If Time Locking Counter is positive, time skipping is locked (disabled).
        /// > When time skipping is disabled, the time in test server is moving normally, with a real time pace.
        /// > Test Server is typically started with locked time skipping and Time Locking Counter = 1.
        /// > 
        /// > LockTimeSkipping and UnlockTimeSkipping calls are counted.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Testservice_V1_LockTimeSkippingRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Testservice_V1_LockTimeSkippingRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Testservice_V1_LockTimeSkippingResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func lockTimeSkipping<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_LockTimeSkippingRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Testservice_V1_LockTimeSkippingRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Testservice_V1_LockTimeSkippingResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_LockTimeSkippingResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UnlockTimeSkipping" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UnlockTimeSkipping decrements Time Locking Counter by one.
        /// > 
        /// > If the counter reaches 0, it unlocks time skipping and fast forwards time.
        /// > LockTimeSkipping and UnlockTimeSkipping calls are counted. Calling UnlockTimeSkipping does not
        /// > guarantee that time is going to be fast forwarded as another lock can be holding it.
        /// > 
        /// > Time Locking Counter can't be negative, unbalanced calls to UnlockTimeSkipping will lead to rpc call failure
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Testservice_V1_UnlockTimeSkippingResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func unlockTimeSkipping<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Testservice_V1_UnlockTimeSkippingResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_UnlockTimeSkippingResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Sleep" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > This call returns only when the Test Server Time advances by the specified duration.
        /// > This is an EXPERIMENTAL API.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Testservice_V1_SleepRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Testservice_V1_SleepRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Testservice_V1_SleepResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sleep<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_SleepRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Testservice_V1_SleepRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Testservice_V1_SleepResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_SleepResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SleepUntil" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > This call returns only when the Test Server Time advances to the specified timestamp.
        /// > If the current Test Server Time is beyond the specified timestamp, returns immediately.
        /// > This is an EXPERIMENTAL API.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Testservice_V1_SleepUntilRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Testservice_V1_SleepUntilRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Testservice_V1_SleepResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sleepUntil<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_SleepUntilRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Testservice_V1_SleepUntilRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Testservice_V1_SleepResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_SleepResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UnlockTimeSkippingWithSleep" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UnlockTimeSkippingWhileSleep decreases time locking counter by one and increases it back
        /// > once the Test Server Time advances by the duration specified in the request.
        /// > 
        /// > This call returns only when the Test Server Time advances by the specified duration.
        /// > 
        /// > If it is called when Time Locking Counter is
        /// >   - more than 1 and no other unlocks are coming in, rpc call will block for the specified duration, time will not be fast forwarded.
        /// >   - 1, it will lead to fast forwarding of the time by the duration specified in the request and quick return of this rpc call.
        /// >   - 0 will lead to rpc call failure same way as an unbalanced UnlockTimeSkipping.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Testservice_V1_SleepRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Testservice_V1_SleepRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Testservice_V1_SleepResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func unlockTimeSkippingWithSleep<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_SleepRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Testservice_V1_SleepRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Testservice_V1_SleepResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_SleepResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCurrentTime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetCurrentTime returns the current Temporal Test Server time
        /// > 
        /// > This time might not be equal to {@link System#currentTimeMillis()} due to time skipping.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        ///   - serializer: A serializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Testservice_V1_GetCurrentTimeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCurrentTime<Result>(
            request: GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>,
            serializer: some GRPCCore.MessageSerializer<SwiftProtobuf.Google_Protobuf_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Testservice_V1_GetCurrentTimeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_GetCurrentTimeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "temporal.api.testservice.v1.TestService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TestService API defines an interface supported only by the Temporal Test Server.
    /// > It provides functionality needed or supported for testing purposes only.
    /// > 
    /// > This is an EXPERIMENTAL API.
    package struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "LockTimeSkipping" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > LockTimeSkipping increments Time Locking Counter by one.
        /// > 
        /// > If Time Locking Counter is positive, time skipping is locked (disabled).
        /// > When time skipping is disabled, the time in test server is moving normally, with a real time pace.
        /// > Test Server is typically started with locked time skipping and Time Locking Counter = 1.
        /// > 
        /// > LockTimeSkipping and UnlockTimeSkipping calls are counted.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Testservice_V1_LockTimeSkippingRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Testservice_V1_LockTimeSkippingRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Testservice_V1_LockTimeSkippingResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func lockTimeSkipping<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_LockTimeSkippingRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Testservice_V1_LockTimeSkippingRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Testservice_V1_LockTimeSkippingResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_LockTimeSkippingResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Testservice_V1_TestService.Method.LockTimeSkipping.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UnlockTimeSkipping" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UnlockTimeSkipping decrements Time Locking Counter by one.
        /// > 
        /// > If the counter reaches 0, it unlocks time skipping and fast forwards time.
        /// > LockTimeSkipping and UnlockTimeSkipping calls are counted. Calling UnlockTimeSkipping does not
        /// > guarantee that time is going to be fast forwarded as another lock can be holding it.
        /// > 
        /// > Time Locking Counter can't be negative, unbalanced calls to UnlockTimeSkipping will lead to rpc call failure
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Testservice_V1_UnlockTimeSkippingResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func unlockTimeSkipping<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Testservice_V1_UnlockTimeSkippingResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_UnlockTimeSkippingResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Testservice_V1_TestService.Method.UnlockTimeSkipping.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Sleep" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > This call returns only when the Test Server Time advances by the specified duration.
        /// > This is an EXPERIMENTAL API.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Testservice_V1_SleepRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Testservice_V1_SleepRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Testservice_V1_SleepResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func sleep<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_SleepRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Testservice_V1_SleepRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Testservice_V1_SleepResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_SleepResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Testservice_V1_TestService.Method.Sleep.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SleepUntil" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > This call returns only when the Test Server Time advances to the specified timestamp.
        /// > If the current Test Server Time is beyond the specified timestamp, returns immediately.
        /// > This is an EXPERIMENTAL API.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Testservice_V1_SleepUntilRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Testservice_V1_SleepUntilRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Testservice_V1_SleepResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func sleepUntil<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_SleepUntilRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Testservice_V1_SleepUntilRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Testservice_V1_SleepResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_SleepResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Testservice_V1_TestService.Method.SleepUntil.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UnlockTimeSkippingWithSleep" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UnlockTimeSkippingWhileSleep decreases time locking counter by one and increases it back
        /// > once the Test Server Time advances by the duration specified in the request.
        /// > 
        /// > This call returns only when the Test Server Time advances by the specified duration.
        /// > 
        /// > If it is called when Time Locking Counter is
        /// >   - more than 1 and no other unlocks are coming in, rpc call will block for the specified duration, time will not be fast forwarded.
        /// >   - 1, it will lead to fast forwarding of the time by the duration specified in the request and quick return of this rpc call.
        /// >   - 0 will lead to rpc call failure same way as an unbalanced UnlockTimeSkipping.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Testservice_V1_SleepRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Testservice_V1_SleepRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Testservice_V1_SleepResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func unlockTimeSkippingWithSleep<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_SleepRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Testservice_V1_SleepRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Testservice_V1_SleepResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_SleepResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Testservice_V1_TestService.Method.UnlockTimeSkippingWithSleep.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCurrentTime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetCurrentTime returns the current Temporal Test Server time
        /// > 
        /// > This time might not be equal to {@link System#currentTimeMillis()} due to time skipping.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        ///   - serializer: A serializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Testservice_V1_GetCurrentTimeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getCurrentTime<Result>(
            request: GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>,
            serializer: some GRPCCore.MessageSerializer<SwiftProtobuf.Google_Protobuf_Empty>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Testservice_V1_GetCurrentTimeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_GetCurrentTimeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Testservice_V1_TestService.Method.GetCurrentTime.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Temporal_Api_Testservice_V1_TestService.ClientProtocol {
    /// Call the "LockTimeSkipping" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > LockTimeSkipping increments Time Locking Counter by one.
    /// > 
    /// > If Time Locking Counter is positive, time skipping is locked (disabled).
    /// > When time skipping is disabled, the time in test server is moving normally, with a real time pace.
    /// > Test Server is typically started with locked time skipping and Time Locking Counter = 1.
    /// > 
    /// > LockTimeSkipping and UnlockTimeSkipping calls are counted.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Testservice_V1_LockTimeSkippingRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func lockTimeSkipping<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_LockTimeSkippingRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_LockTimeSkippingResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.lockTimeSkipping(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Testservice_V1_LockTimeSkippingRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Testservice_V1_LockTimeSkippingResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UnlockTimeSkipping" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UnlockTimeSkipping decrements Time Locking Counter by one.
    /// > 
    /// > If the counter reaches 0, it unlocks time skipping and fast forwards time.
    /// > LockTimeSkipping and UnlockTimeSkipping calls are counted. Calling UnlockTimeSkipping does not
    /// > guarantee that time is going to be fast forwarded as another lock can be holding it.
    /// > 
    /// > Time Locking Counter can't be negative, unbalanced calls to UnlockTimeSkipping will lead to rpc call failure
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func unlockTimeSkipping<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_UnlockTimeSkippingResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.unlockTimeSkipping(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Testservice_V1_UnlockTimeSkippingResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Sleep" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > This call returns only when the Test Server Time advances by the specified duration.
    /// > This is an EXPERIMENTAL API.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Testservice_V1_SleepRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func sleep<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_SleepRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_SleepResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.sleep(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Testservice_V1_SleepRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Testservice_V1_SleepResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SleepUntil" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > This call returns only when the Test Server Time advances to the specified timestamp.
    /// > If the current Test Server Time is beyond the specified timestamp, returns immediately.
    /// > This is an EXPERIMENTAL API.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Testservice_V1_SleepUntilRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func sleepUntil<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_SleepUntilRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_SleepResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.sleepUntil(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Testservice_V1_SleepUntilRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Testservice_V1_SleepResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UnlockTimeSkippingWithSleep" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UnlockTimeSkippingWhileSleep decreases time locking counter by one and increases it back
    /// > once the Test Server Time advances by the duration specified in the request.
    /// > 
    /// > This call returns only when the Test Server Time advances by the specified duration.
    /// > 
    /// > If it is called when Time Locking Counter is
    /// >   - more than 1 and no other unlocks are coming in, rpc call will block for the specified duration, time will not be fast forwarded.
    /// >   - 1, it will lead to fast forwarding of the time by the duration specified in the request and quick return of this rpc call.
    /// >   - 0 will lead to rpc call failure same way as an unbalanced UnlockTimeSkipping.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Testservice_V1_SleepRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func unlockTimeSkippingWithSleep<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_SleepRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_SleepResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.unlockTimeSkippingWithSleep(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Testservice_V1_SleepRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Testservice_V1_SleepResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCurrentTime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetCurrentTime returns the current Temporal Test Server time
    /// > 
    /// > This time might not be equal to {@link System#currentTimeMillis()} due to time skipping.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getCurrentTime<Result>(
        request: GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_GetCurrentTimeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCurrentTime(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Testservice_V1_GetCurrentTimeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Temporal_Api_Testservice_V1_TestService.ClientProtocol {
    /// Call the "LockTimeSkipping" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > LockTimeSkipping increments Time Locking Counter by one.
    /// > 
    /// > If Time Locking Counter is positive, time skipping is locked (disabled).
    /// > When time skipping is disabled, the time in test server is moving normally, with a real time pace.
    /// > Test Server is typically started with locked time skipping and Time Locking Counter = 1.
    /// > 
    /// > LockTimeSkipping and UnlockTimeSkipping calls are counted.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func lockTimeSkipping<Result>(
        _ message: Temporal_Api_Testservice_V1_LockTimeSkippingRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_LockTimeSkippingResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_LockTimeSkippingRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.lockTimeSkipping(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UnlockTimeSkipping" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UnlockTimeSkipping decrements Time Locking Counter by one.
    /// > 
    /// > If the counter reaches 0, it unlocks time skipping and fast forwards time.
    /// > LockTimeSkipping and UnlockTimeSkipping calls are counted. Calling UnlockTimeSkipping does not
    /// > guarantee that time is going to be fast forwarded as another lock can be holding it.
    /// > 
    /// > Time Locking Counter can't be negative, unbalanced calls to UnlockTimeSkipping will lead to rpc call failure
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func unlockTimeSkipping<Result>(
        _ message: Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_UnlockTimeSkippingResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_UnlockTimeSkippingRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.unlockTimeSkipping(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Sleep" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > This call returns only when the Test Server Time advances by the specified duration.
    /// > This is an EXPERIMENTAL API.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func sleep<Result>(
        _ message: Temporal_Api_Testservice_V1_SleepRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_SleepResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_SleepRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.sleep(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SleepUntil" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > This call returns only when the Test Server Time advances to the specified timestamp.
    /// > If the current Test Server Time is beyond the specified timestamp, returns immediately.
    /// > This is an EXPERIMENTAL API.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func sleepUntil<Result>(
        _ message: Temporal_Api_Testservice_V1_SleepUntilRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_SleepResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_SleepUntilRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.sleepUntil(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UnlockTimeSkippingWithSleep" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UnlockTimeSkippingWhileSleep decreases time locking counter by one and increases it back
    /// > once the Test Server Time advances by the duration specified in the request.
    /// > 
    /// > This call returns only when the Test Server Time advances by the specified duration.
    /// > 
    /// > If it is called when Time Locking Counter is
    /// >   - more than 1 and no other unlocks are coming in, rpc call will block for the specified duration, time will not be fast forwarded.
    /// >   - 1, it will lead to fast forwarding of the time by the duration specified in the request and quick return of this rpc call.
    /// >   - 0 will lead to rpc call failure same way as an unbalanced UnlockTimeSkipping.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func unlockTimeSkippingWithSleep<Result>(
        _ message: Temporal_Api_Testservice_V1_SleepRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_SleepResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Testservice_V1_SleepRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.unlockTimeSkippingWithSleep(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCurrentTime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetCurrentTime returns the current Temporal Test Server time
    /// > 
    /// > This time might not be equal to {@link System#currentTimeMillis()} due to time skipping.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getCurrentTime<Result>(
        _ message: SwiftProtobuf.Google_Protobuf_Empty,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Testservice_V1_GetCurrentTimeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SwiftProtobuf.Google_Protobuf_Empty>(
            message: message,
            metadata: metadata
        )
        return try await self.getCurrentTime(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}