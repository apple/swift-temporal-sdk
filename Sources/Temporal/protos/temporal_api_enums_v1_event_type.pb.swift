// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/enums/v1/event_type.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Whenever this list of events is changed do change the function shouldBufferEvent in mutableStateBuilder.go to make sure to do the correct event ordering
package enum Temporal_Api_Enums_V1_EventType: SwiftProtobuf.Enum, Swift.CaseIterable {
  package typealias RawValue = Int

  /// Place holder and should never appear in a Workflow execution history
  case unspecified // = 0

  /// Workflow execution has been triggered/started
  /// It contains Workflow execution inputs, as well as Workflow timeout configurations
  case workflowExecutionStarted // = 1

  /// Workflow execution has successfully completed and contains Workflow execution results
  case workflowExecutionCompleted // = 2

  /// Workflow execution has unsuccessfully completed and contains the Workflow execution error
  case workflowExecutionFailed // = 3

  /// Workflow execution has timed out by the Temporal Server
  /// Usually due to the Workflow having not been completed within timeout settings
  case workflowExecutionTimedOut // = 4

  /// Workflow Task has been scheduled and the SDK client should now be able to process any new history events
  case workflowTaskScheduled // = 5

  /// Workflow Task has started and the SDK client has picked up the Workflow Task and is processing new history events
  case workflowTaskStarted // = 6

  /// Workflow Task has completed
  /// The SDK client picked up the Workflow Task and processed new history events
  /// SDK client may or may not ask the Temporal Server to do additional work, such as:
  /// EVENT_TYPE_ACTIVITY_TASK_SCHEDULED
  /// EVENT_TYPE_TIMER_STARTED
  /// EVENT_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES
  /// EVENT_TYPE_MARKER_RECORDED
  /// EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_INITIATED
  /// EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED
  /// EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED
  /// EVENT_TYPE_WORKFLOW_EXECUTION_COMPLETED
  /// EVENT_TYPE_WORKFLOW_EXECUTION_FAILED
  /// EVENT_TYPE_WORKFLOW_EXECUTION_CANCELED
  /// EVENT_TYPE_WORKFLOW_EXECUTION_CONTINUED_AS_NEW
  case workflowTaskCompleted // = 7

  /// Workflow Task encountered a timeout
  /// Either an SDK client with a local cache was not available at the time, or it took too long for the SDK client to process the task
  case workflowTaskTimedOut // = 8

  /// Workflow Task encountered a failure
  /// Usually this means that the Workflow was non-deterministic
  /// However, the Workflow reset functionality also uses this event
  case workflowTaskFailed // = 9

  /// Activity Task was scheduled
  /// The SDK client should pick up this activity task and execute
  /// This event type contains activity inputs, as well as activity timeout configurations
  case activityTaskScheduled // = 10

  /// Activity Task has started executing
  /// The SDK client has picked up the Activity Task and is processing the Activity invocation
  case activityTaskStarted // = 11

  /// Activity Task has finished successfully
  /// The SDK client has picked up and successfully completed the Activity Task
  /// This event type contains Activity execution results
  case activityTaskCompleted // = 12

  /// Activity Task has finished unsuccessfully
  /// The SDK picked up the Activity Task but unsuccessfully completed it
  /// This event type contains Activity execution errors
  case activityTaskFailed // = 13

  /// Activity has timed out according to the Temporal Server
  /// Activity did not complete within the timeout settings
  case activityTaskTimedOut // = 14

  /// A request to cancel the Activity has occurred
  /// The SDK client will be able to confirm cancellation of an Activity during an Activity heartbeat
  case activityTaskCancelRequested // = 15

  /// Activity has been cancelled
  case activityTaskCanceled // = 16

  /// A timer has started
  case timerStarted // = 17

  /// A timer has fired
  case timerFired // = 18

  /// A time has been cancelled
  case timerCanceled // = 19

  /// A request has been made to cancel the Workflow execution
  case workflowExecutionCancelRequested // = 20

  /// SDK client has confirmed the cancellation request and the Workflow execution has been cancelled
  case workflowExecutionCanceled // = 21

  /// Workflow has requested that the Temporal Server try to cancel another Workflow
  case requestCancelExternalWorkflowExecutionInitiated // = 22

  /// Temporal Server could not cancel the targeted Workflow
  /// This is usually because the target Workflow could not be found
  case requestCancelExternalWorkflowExecutionFailed // = 23

  /// Temporal Server has successfully requested the cancellation of the target Workflow
  case externalWorkflowExecutionCancelRequested // = 24

  /// A marker has been recorded.
  /// This event type is transparent to the Temporal Server
  /// The Server will only store it and will not try to understand it.
  case markerRecorded // = 25

  /// Workflow has received a Signal event
  /// The event type contains the Signal name, as well as a Signal payload
  case workflowExecutionSignaled // = 26

  /// Workflow execution has been forcefully terminated
  /// This is usually because the terminate Workflow API was called
  case workflowExecutionTerminated // = 27

  /// Workflow has successfully completed and a new Workflow has been started within the same transaction
  /// Contains last Workflow execution results as well as new Workflow execution inputs
  case workflowExecutionContinuedAsNew // = 28

  /// Temporal Server will try to start a child Workflow
  case startChildWorkflowExecutionInitiated // = 29

  /// Child Workflow execution cannot be started/triggered
  /// Usually due to a child Workflow ID collision
  case startChildWorkflowExecutionFailed // = 30

  /// Child Workflow execution has successfully started/triggered
  case childWorkflowExecutionStarted // = 31

  /// Child Workflow execution has successfully completed
  case childWorkflowExecutionCompleted // = 32

  /// Child Workflow execution has unsuccessfully completed
  case childWorkflowExecutionFailed // = 33

  /// Child Workflow execution has been cancelled
  case childWorkflowExecutionCanceled // = 34

  /// Child Workflow execution has timed out by the Temporal Server
  case childWorkflowExecutionTimedOut // = 35

  /// Child Workflow execution has been terminated
  case childWorkflowExecutionTerminated // = 36

  /// Temporal Server will try to Signal the targeted Workflow
  /// Contains the Signal name, as well as a Signal payload
  case signalExternalWorkflowExecutionInitiated // = 37

  /// Temporal Server cannot Signal the targeted Workflow
  /// Usually because the Workflow could not be found
  case signalExternalWorkflowExecutionFailed // = 38

  /// Temporal Server has successfully Signaled the targeted Workflow
  case externalWorkflowExecutionSignaled // = 39

  /// Workflow search attributes should be updated and synchronized with the visibility store
  case upsertWorkflowSearchAttributes // = 40

  /// An update was admitted. Note that not all admitted updates result in this
  /// event. See UpdateAdmittedEventOrigin for situations in which this event
  /// is created.
  case workflowExecutionUpdateAdmitted // = 47

  /// An update was accepted (i.e. passed validation, perhaps because no validator was defined)
  case workflowExecutionUpdateAccepted // = 41

  /// This event is never written to history.
  case workflowExecutionUpdateRejected // = 42

  /// An update completed
  case workflowExecutionUpdateCompleted // = 43

  /// Some property or properties of the workflow as a whole have changed by non-workflow code.
  /// The distinction of external vs. command-based modification is important so the SDK can
  /// maintain determinism when using the command-based approach.
  case workflowPropertiesModifiedExternally // = 44

  /// Some property or properties of an already-scheduled activity have changed by non-workflow code.
  /// The distinction of external vs. command-based modification is important so the SDK can
  /// maintain determinism when using the command-based approach.
  case activityPropertiesModifiedExternally // = 45

  /// Workflow properties modified by user workflow code
  case workflowPropertiesModified // = 46

  /// A Nexus operation was scheduled using a ScheduleNexusOperation command.
  case nexusOperationScheduled // = 48

  /// An asynchronous Nexus operation was started by a Nexus handler.
  case nexusOperationStarted // = 49

  /// A Nexus operation completed successfully.
  case nexusOperationCompleted // = 50

  /// A Nexus operation failed.
  case nexusOperationFailed // = 51

  /// A Nexus operation completed as canceled.
  case nexusOperationCanceled // = 52

  /// A Nexus operation timed out.
  case nexusOperationTimedOut // = 53

  /// A Nexus operation was requested to be canceled using a RequestCancelNexusOperation command.
  case nexusOperationCancelRequested // = 54

  /// Workflow execution options updated by user.
  case workflowExecutionOptionsUpdated // = 55

  /// A cancellation request for a Nexus operation was successfully delivered to the Nexus handler.
  case nexusOperationCancelRequestCompleted // = 56

  /// A cancellation request for a Nexus operation resulted in an error.
  case nexusOperationCancelRequestFailed // = 57
  case UNRECOGNIZED(Int)

  package init() {
    self = .unspecified
  }

  package init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .workflowExecutionStarted
    case 2: self = .workflowExecutionCompleted
    case 3: self = .workflowExecutionFailed
    case 4: self = .workflowExecutionTimedOut
    case 5: self = .workflowTaskScheduled
    case 6: self = .workflowTaskStarted
    case 7: self = .workflowTaskCompleted
    case 8: self = .workflowTaskTimedOut
    case 9: self = .workflowTaskFailed
    case 10: self = .activityTaskScheduled
    case 11: self = .activityTaskStarted
    case 12: self = .activityTaskCompleted
    case 13: self = .activityTaskFailed
    case 14: self = .activityTaskTimedOut
    case 15: self = .activityTaskCancelRequested
    case 16: self = .activityTaskCanceled
    case 17: self = .timerStarted
    case 18: self = .timerFired
    case 19: self = .timerCanceled
    case 20: self = .workflowExecutionCancelRequested
    case 21: self = .workflowExecutionCanceled
    case 22: self = .requestCancelExternalWorkflowExecutionInitiated
    case 23: self = .requestCancelExternalWorkflowExecutionFailed
    case 24: self = .externalWorkflowExecutionCancelRequested
    case 25: self = .markerRecorded
    case 26: self = .workflowExecutionSignaled
    case 27: self = .workflowExecutionTerminated
    case 28: self = .workflowExecutionContinuedAsNew
    case 29: self = .startChildWorkflowExecutionInitiated
    case 30: self = .startChildWorkflowExecutionFailed
    case 31: self = .childWorkflowExecutionStarted
    case 32: self = .childWorkflowExecutionCompleted
    case 33: self = .childWorkflowExecutionFailed
    case 34: self = .childWorkflowExecutionCanceled
    case 35: self = .childWorkflowExecutionTimedOut
    case 36: self = .childWorkflowExecutionTerminated
    case 37: self = .signalExternalWorkflowExecutionInitiated
    case 38: self = .signalExternalWorkflowExecutionFailed
    case 39: self = .externalWorkflowExecutionSignaled
    case 40: self = .upsertWorkflowSearchAttributes
    case 41: self = .workflowExecutionUpdateAccepted
    case 42: self = .workflowExecutionUpdateRejected
    case 43: self = .workflowExecutionUpdateCompleted
    case 44: self = .workflowPropertiesModifiedExternally
    case 45: self = .activityPropertiesModifiedExternally
    case 46: self = .workflowPropertiesModified
    case 47: self = .workflowExecutionUpdateAdmitted
    case 48: self = .nexusOperationScheduled
    case 49: self = .nexusOperationStarted
    case 50: self = .nexusOperationCompleted
    case 51: self = .nexusOperationFailed
    case 52: self = .nexusOperationCanceled
    case 53: self = .nexusOperationTimedOut
    case 54: self = .nexusOperationCancelRequested
    case 55: self = .workflowExecutionOptionsUpdated
    case 56: self = .nexusOperationCancelRequestCompleted
    case 57: self = .nexusOperationCancelRequestFailed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  package var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .workflowExecutionStarted: return 1
    case .workflowExecutionCompleted: return 2
    case .workflowExecutionFailed: return 3
    case .workflowExecutionTimedOut: return 4
    case .workflowTaskScheduled: return 5
    case .workflowTaskStarted: return 6
    case .workflowTaskCompleted: return 7
    case .workflowTaskTimedOut: return 8
    case .workflowTaskFailed: return 9
    case .activityTaskScheduled: return 10
    case .activityTaskStarted: return 11
    case .activityTaskCompleted: return 12
    case .activityTaskFailed: return 13
    case .activityTaskTimedOut: return 14
    case .activityTaskCancelRequested: return 15
    case .activityTaskCanceled: return 16
    case .timerStarted: return 17
    case .timerFired: return 18
    case .timerCanceled: return 19
    case .workflowExecutionCancelRequested: return 20
    case .workflowExecutionCanceled: return 21
    case .requestCancelExternalWorkflowExecutionInitiated: return 22
    case .requestCancelExternalWorkflowExecutionFailed: return 23
    case .externalWorkflowExecutionCancelRequested: return 24
    case .markerRecorded: return 25
    case .workflowExecutionSignaled: return 26
    case .workflowExecutionTerminated: return 27
    case .workflowExecutionContinuedAsNew: return 28
    case .startChildWorkflowExecutionInitiated: return 29
    case .startChildWorkflowExecutionFailed: return 30
    case .childWorkflowExecutionStarted: return 31
    case .childWorkflowExecutionCompleted: return 32
    case .childWorkflowExecutionFailed: return 33
    case .childWorkflowExecutionCanceled: return 34
    case .childWorkflowExecutionTimedOut: return 35
    case .childWorkflowExecutionTerminated: return 36
    case .signalExternalWorkflowExecutionInitiated: return 37
    case .signalExternalWorkflowExecutionFailed: return 38
    case .externalWorkflowExecutionSignaled: return 39
    case .upsertWorkflowSearchAttributes: return 40
    case .workflowExecutionUpdateAccepted: return 41
    case .workflowExecutionUpdateRejected: return 42
    case .workflowExecutionUpdateCompleted: return 43
    case .workflowPropertiesModifiedExternally: return 44
    case .activityPropertiesModifiedExternally: return 45
    case .workflowPropertiesModified: return 46
    case .workflowExecutionUpdateAdmitted: return 47
    case .nexusOperationScheduled: return 48
    case .nexusOperationStarted: return 49
    case .nexusOperationCompleted: return 50
    case .nexusOperationFailed: return 51
    case .nexusOperationCanceled: return 52
    case .nexusOperationTimedOut: return 53
    case .nexusOperationCancelRequested: return 54
    case .workflowExecutionOptionsUpdated: return 55
    case .nexusOperationCancelRequestCompleted: return 56
    case .nexusOperationCancelRequestFailed: return 57
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  package static let allCases: [Temporal_Api_Enums_V1_EventType] = [
    .unspecified,
    .workflowExecutionStarted,
    .workflowExecutionCompleted,
    .workflowExecutionFailed,
    .workflowExecutionTimedOut,
    .workflowTaskScheduled,
    .workflowTaskStarted,
    .workflowTaskCompleted,
    .workflowTaskTimedOut,
    .workflowTaskFailed,
    .activityTaskScheduled,
    .activityTaskStarted,
    .activityTaskCompleted,
    .activityTaskFailed,
    .activityTaskTimedOut,
    .activityTaskCancelRequested,
    .activityTaskCanceled,
    .timerStarted,
    .timerFired,
    .timerCanceled,
    .workflowExecutionCancelRequested,
    .workflowExecutionCanceled,
    .requestCancelExternalWorkflowExecutionInitiated,
    .requestCancelExternalWorkflowExecutionFailed,
    .externalWorkflowExecutionCancelRequested,
    .markerRecorded,
    .workflowExecutionSignaled,
    .workflowExecutionTerminated,
    .workflowExecutionContinuedAsNew,
    .startChildWorkflowExecutionInitiated,
    .startChildWorkflowExecutionFailed,
    .childWorkflowExecutionStarted,
    .childWorkflowExecutionCompleted,
    .childWorkflowExecutionFailed,
    .childWorkflowExecutionCanceled,
    .childWorkflowExecutionTimedOut,
    .childWorkflowExecutionTerminated,
    .signalExternalWorkflowExecutionInitiated,
    .signalExternalWorkflowExecutionFailed,
    .externalWorkflowExecutionSignaled,
    .upsertWorkflowSearchAttributes,
    .workflowExecutionUpdateAdmitted,
    .workflowExecutionUpdateAccepted,
    .workflowExecutionUpdateRejected,
    .workflowExecutionUpdateCompleted,
    .workflowPropertiesModifiedExternally,
    .activityPropertiesModifiedExternally,
    .workflowPropertiesModified,
    .nexusOperationScheduled,
    .nexusOperationStarted,
    .nexusOperationCompleted,
    .nexusOperationFailed,
    .nexusOperationCanceled,
    .nexusOperationTimedOut,
    .nexusOperationCancelRequested,
    .workflowExecutionOptionsUpdated,
    .nexusOperationCancelRequestCompleted,
    .nexusOperationCancelRequestFailed,
  ]

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Temporal_Api_Enums_V1_EventType: SwiftProtobuf._ProtoNameProviding {
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0EVENT_TYPE_UNSPECIFIED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_STARTED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_COMPLETED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_FAILED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_TIMED_OUT\0\u{1}EVENT_TYPE_WORKFLOW_TASK_SCHEDULED\0\u{1}EVENT_TYPE_WORKFLOW_TASK_STARTED\0\u{1}EVENT_TYPE_WORKFLOW_TASK_COMPLETED\0\u{1}EVENT_TYPE_WORKFLOW_TASK_TIMED_OUT\0\u{1}EVENT_TYPE_WORKFLOW_TASK_FAILED\0\u{1}EVENT_TYPE_ACTIVITY_TASK_SCHEDULED\0\u{1}EVENT_TYPE_ACTIVITY_TASK_STARTED\0\u{1}EVENT_TYPE_ACTIVITY_TASK_COMPLETED\0\u{1}EVENT_TYPE_ACTIVITY_TASK_FAILED\0\u{1}EVENT_TYPE_ACTIVITY_TASK_TIMED_OUT\0\u{1}EVENT_TYPE_ACTIVITY_TASK_CANCEL_REQUESTED\0\u{1}EVENT_TYPE_ACTIVITY_TASK_CANCELED\0\u{1}EVENT_TYPE_TIMER_STARTED\0\u{1}EVENT_TYPE_TIMER_FIRED\0\u{1}EVENT_TYPE_TIMER_CANCELED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_CANCEL_REQUESTED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_CANCELED\0\u{1}EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED\0\u{1}EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED\0\u{1}EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_CANCEL_REQUESTED\0\u{1}EVENT_TYPE_MARKER_RECORDED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_SIGNALED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_TERMINATED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_CONTINUED_AS_NEW\0\u{1}EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_INITIATED\0\u{1}EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_FAILED\0\u{1}EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_STARTED\0\u{1}EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_COMPLETED\0\u{1}EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_FAILED\0\u{1}EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_CANCELED\0\u{1}EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TIMED_OUT\0\u{1}EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TERMINATED\0\u{1}EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED\0\u{1}EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED\0\u{1}EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_SIGNALED\0\u{1}EVENT_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_ACCEPTED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_REJECTED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_COMPLETED\0\u{1}EVENT_TYPE_WORKFLOW_PROPERTIES_MODIFIED_EXTERNALLY\0\u{1}EVENT_TYPE_ACTIVITY_PROPERTIES_MODIFIED_EXTERNALLY\0\u{1}EVENT_TYPE_WORKFLOW_PROPERTIES_MODIFIED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_ADMITTED\0\u{1}EVENT_TYPE_NEXUS_OPERATION_SCHEDULED\0\u{1}EVENT_TYPE_NEXUS_OPERATION_STARTED\0\u{1}EVENT_TYPE_NEXUS_OPERATION_COMPLETED\0\u{1}EVENT_TYPE_NEXUS_OPERATION_FAILED\0\u{1}EVENT_TYPE_NEXUS_OPERATION_CANCELED\0\u{1}EVENT_TYPE_NEXUS_OPERATION_TIMED_OUT\0\u{1}EVENT_TYPE_NEXUS_OPERATION_CANCEL_REQUESTED\0\u{1}EVENT_TYPE_WORKFLOW_EXECUTION_OPTIONS_UPDATED\0\u{1}EVENT_TYPE_NEXUS_OPERATION_CANCEL_REQUEST_COMPLETED\0\u{1}EVENT_TYPE_NEXUS_OPERATION_CANCEL_REQUEST_FAILED\0")
}
