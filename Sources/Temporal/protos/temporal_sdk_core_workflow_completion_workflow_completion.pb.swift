// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/sdk/core/workflow_completion/workflow_completion.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Result of a single workflow activation, reported from lang to core
package struct Coresdk_WorkflowCompletion_WorkflowActivationCompletion: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The run id from the workflow activation you are completing
  package var runID: String = String()

  package var status: Coresdk_WorkflowCompletion_WorkflowActivationCompletion.OneOf_Status? = nil

  package var successful: Coresdk_WorkflowCompletion_Success {
    get {
      if case .successful(let v)? = status {return v}
      return Coresdk_WorkflowCompletion_Success()
    }
    set {status = .successful(newValue)}
  }

  package var failed: Coresdk_WorkflowCompletion_Failure {
    get {
      if case .failed(let v)? = status {return v}
      return Coresdk_WorkflowCompletion_Failure()
    }
    set {status = .failed(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum OneOf_Status: Equatable, Sendable {
    case successful(Coresdk_WorkflowCompletion_Success)
    case failed(Coresdk_WorkflowCompletion_Failure)

  }

  package init() {}
}

/// Successful workflow activation with a list of commands generated by the workflow execution
package struct Coresdk_WorkflowCompletion_Success: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of commands to send back to the temporal server
  package var commands: [Coresdk_WorkflowCommands_WorkflowCommand] = []

  /// Any internal flags which the lang SDK used in the processing of this activation
  package var usedInternalFlags: [UInt32] = []

  /// The versioning behavior this workflow is currently using
  package var versioningBehavior: Temporal_Api_Enums_V1_VersioningBehavior = .unspecified

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// Failure to activate or execute a workflow
package struct Coresdk_WorkflowCompletion_Failure: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var failure: Temporal_Api_Failure_V1_Failure {
    get {return _failure ?? Temporal_Api_Failure_V1_Failure()}
    set {_failure = newValue}
  }
  /// Returns true if `failure` has been explicitly set.
  package var hasFailure: Bool {return self._failure != nil}
  /// Clears the value of `failure`. Subsequent reads from it will return its default value.
  package mutating func clearFailure() {self._failure = nil}

  /// Forces overriding the WFT failure cause
  package var forceCause: Temporal_Api_Enums_V1_WorkflowTaskFailedCause = .unspecified

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _failure: Temporal_Api_Failure_V1_Failure? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "coresdk.workflow_completion"

extension Coresdk_WorkflowCompletion_WorkflowActivationCompletion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WorkflowActivationCompletion"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}run_id\0\u{1}successful\0\u{1}failed\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.runID) }()
      case 2: try {
        var v: Coresdk_WorkflowCompletion_Success?
        var hadOneofValue = false
        if let current = self.status {
          hadOneofValue = true
          if case .successful(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.status = .successful(v)
        }
      }()
      case 3: try {
        var v: Coresdk_WorkflowCompletion_Failure?
        var hadOneofValue = false
        if let current = self.status {
          hadOneofValue = true
          if case .failed(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.status = .failed(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.runID.isEmpty {
      try visitor.visitSingularStringField(value: self.runID, fieldNumber: 1)
    }
    switch self.status {
    case .successful?: try {
      guard case .successful(let v)? = self.status else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .failed?: try {
      guard case .failed(let v)? = self.status else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Coresdk_WorkflowCompletion_WorkflowActivationCompletion, rhs: Coresdk_WorkflowCompletion_WorkflowActivationCompletion) -> Bool {
    if lhs.runID != rhs.runID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Coresdk_WorkflowCompletion_Success: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Success"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}commands\0\u{4}\u{5}used_internal_flags\0\u{3}versioning_behavior\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.commands) }()
      case 6: try { try decoder.decodeRepeatedUInt32Field(value: &self.usedInternalFlags) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.versioningBehavior) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.commands.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commands, fieldNumber: 1)
    }
    if !self.usedInternalFlags.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.usedInternalFlags, fieldNumber: 6)
    }
    if self.versioningBehavior != .unspecified {
      try visitor.visitSingularEnumField(value: self.versioningBehavior, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Coresdk_WorkflowCompletion_Success, rhs: Coresdk_WorkflowCompletion_Success) -> Bool {
    if lhs.commands != rhs.commands {return false}
    if lhs.usedInternalFlags != rhs.usedInternalFlags {return false}
    if lhs.versioningBehavior != rhs.versioningBehavior {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Coresdk_WorkflowCompletion_Failure: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Failure"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}failure\0\u{3}force_cause\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._failure) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.forceCause) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._failure {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.forceCause != .unspecified {
      try visitor.visitSingularEnumField(value: self.forceCause, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Coresdk_WorkflowCompletion_Failure, rhs: Coresdk_WorkflowCompletion_Failure) -> Bool {
    if lhs._failure != rhs._failure {return false}
    if lhs.forceCause != rhs.forceCause {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
