// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/namespace/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package struct Temporal_Api_Namespace_V1_NamespaceInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var name: String = String()

  package var state: Temporal_Api_Enums_V1_NamespaceState = .unspecified

  package var description_p: String = String()

  package var ownerEmail: String = String()

  /// A key-value map for any customized purpose.
  package var data: Dictionary<String,String> = [:]

  package var id: String = String()

  /// All capabilities the namespace supports.
  package var capabilities: Temporal_Api_Namespace_V1_NamespaceInfo.Capabilities {
    get {return _capabilities ?? Temporal_Api_Namespace_V1_NamespaceInfo.Capabilities()}
    set {_capabilities = newValue}
  }
  /// Returns true if `capabilities` has been explicitly set.
  package var hasCapabilities: Bool {return self._capabilities != nil}
  /// Clears the value of `capabilities`. Subsequent reads from it will return its default value.
  package mutating func clearCapabilities() {self._capabilities = nil}

  /// Whether scheduled workflows are supported on this namespace. This is only needed
  /// temporarily while the feature is experimental, so we can give it a high tag.
  package var supportsSchedules: Bool = false

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Namespace capability details. Should contain what features are enabled in a namespace.
  package struct Capabilities: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// True if the namespace supports eager workflow start.
    package var eagerWorkflowStart: Bool = false

    /// True if the namespace supports sync update
    package var syncUpdate: Bool = false

    /// True if the namespace supports async update
    package var asyncUpdate: Bool = false

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}
  }

  package init() {}

  fileprivate var _capabilities: Temporal_Api_Namespace_V1_NamespaceInfo.Capabilities? = nil
}

package struct Temporal_Api_Namespace_V1_NamespaceConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var workflowExecutionRetentionTtl: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _workflowExecutionRetentionTtl ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_workflowExecutionRetentionTtl = newValue}
  }
  /// Returns true if `workflowExecutionRetentionTtl` has been explicitly set.
  package var hasWorkflowExecutionRetentionTtl: Bool {return self._workflowExecutionRetentionTtl != nil}
  /// Clears the value of `workflowExecutionRetentionTtl`. Subsequent reads from it will return its default value.
  package mutating func clearWorkflowExecutionRetentionTtl() {self._workflowExecutionRetentionTtl = nil}

  package var badBinaries: Temporal_Api_Namespace_V1_BadBinaries {
    get {return _badBinaries ?? Temporal_Api_Namespace_V1_BadBinaries()}
    set {_badBinaries = newValue}
  }
  /// Returns true if `badBinaries` has been explicitly set.
  package var hasBadBinaries: Bool {return self._badBinaries != nil}
  /// Clears the value of `badBinaries`. Subsequent reads from it will return its default value.
  package mutating func clearBadBinaries() {self._badBinaries = nil}

  /// If unspecified (ARCHIVAL_STATE_UNSPECIFIED) then default server configuration is used.
  package var historyArchivalState: Temporal_Api_Enums_V1_ArchivalState = .unspecified

  package var historyArchivalUri: String = String()

  /// If unspecified (ARCHIVAL_STATE_UNSPECIFIED) then default server configuration is used.
  package var visibilityArchivalState: Temporal_Api_Enums_V1_ArchivalState = .unspecified

  package var visibilityArchivalUri: String = String()

  /// Map from field name to alias.
  package var customSearchAttributeAliases: Dictionary<String,String> = [:]

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _workflowExecutionRetentionTtl: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _badBinaries: Temporal_Api_Namespace_V1_BadBinaries? = nil
}

package struct Temporal_Api_Namespace_V1_BadBinaries: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var binaries: Dictionary<String,Temporal_Api_Namespace_V1_BadBinaryInfo> = [:]

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct Temporal_Api_Namespace_V1_BadBinaryInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var reason: String = String()

  package var `operator`: String = String()

  package var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  package var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  package mutating func clearCreateTime() {self._createTime = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

package struct Temporal_Api_Namespace_V1_UpdateNamespaceInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var description_p: String = String()

  package var ownerEmail: String = String()

  /// A key-value map for any customized purpose.
  /// If data already exists on the namespace, 
  /// this will merge with the existing key values. 
  package var data: Dictionary<String,String> = [:]

  /// New namespace state, server will reject if transition is not allowed.
  /// Allowed transitions are:
  ///  Registered -> [ Deleted | Deprecated | Handover ]
  ///  Handover -> [ Registered ]
  /// Default is NAMESPACE_STATE_UNSPECIFIED which is do not change state.
  package var state: Temporal_Api_Enums_V1_NamespaceState = .unspecified

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct Temporal_Api_Namespace_V1_NamespaceFilter: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// By default namespaces in NAMESPACE_STATE_DELETED state are not included.
  /// Setting include_deleted to true will include deleted namespaces.
  /// Note: Namespace is in NAMESPACE_STATE_DELETED state when it was deleted from the system but associated data is not deleted yet.
  package var includeDeleted: Bool = false

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.namespace.v1"

extension Temporal_Api_Namespace_V1_NamespaceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".NamespaceInfo"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}state\0\u{1}description\0\u{3}owner_email\0\u{1}data\0\u{1}id\0\u{1}capabilities\0\u{4}]\u{1}supports_schedules\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.ownerEmail) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.data) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._capabilities) }()
      case 100: try { try decoder.decodeSingularBoolField(value: &self.supportsSchedules) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.ownerEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerEmail, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.data, fieldNumber: 5)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 6)
    }
    try { if let v = self._capabilities {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.supportsSchedules != false {
      try visitor.visitSingularBoolField(value: self.supportsSchedules, fieldNumber: 100)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Namespace_V1_NamespaceInfo, rhs: Temporal_Api_Namespace_V1_NamespaceInfo) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.state != rhs.state {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.ownerEmail != rhs.ownerEmail {return false}
    if lhs.data != rhs.data {return false}
    if lhs.id != rhs.id {return false}
    if lhs._capabilities != rhs._capabilities {return false}
    if lhs.supportsSchedules != rhs.supportsSchedules {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Namespace_V1_NamespaceInfo.Capabilities: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Temporal_Api_Namespace_V1_NamespaceInfo.protoMessageName + ".Capabilities"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}eager_workflow_start\0\u{3}sync_update\0\u{3}async_update\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.eagerWorkflowStart) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.syncUpdate) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.asyncUpdate) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.eagerWorkflowStart != false {
      try visitor.visitSingularBoolField(value: self.eagerWorkflowStart, fieldNumber: 1)
    }
    if self.syncUpdate != false {
      try visitor.visitSingularBoolField(value: self.syncUpdate, fieldNumber: 2)
    }
    if self.asyncUpdate != false {
      try visitor.visitSingularBoolField(value: self.asyncUpdate, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Namespace_V1_NamespaceInfo.Capabilities, rhs: Temporal_Api_Namespace_V1_NamespaceInfo.Capabilities) -> Bool {
    if lhs.eagerWorkflowStart != rhs.eagerWorkflowStart {return false}
    if lhs.syncUpdate != rhs.syncUpdate {return false}
    if lhs.asyncUpdate != rhs.asyncUpdate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Namespace_V1_NamespaceConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".NamespaceConfig"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}workflow_execution_retention_ttl\0\u{3}bad_binaries\0\u{3}history_archival_state\0\u{3}history_archival_uri\0\u{3}visibility_archival_state\0\u{3}visibility_archival_uri\0\u{3}custom_search_attribute_aliases\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._workflowExecutionRetentionTtl) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._badBinaries) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.historyArchivalState) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.historyArchivalUri) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.visibilityArchivalState) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.visibilityArchivalUri) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.customSearchAttributeAliases) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._workflowExecutionRetentionTtl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._badBinaries {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.historyArchivalState != .unspecified {
      try visitor.visitSingularEnumField(value: self.historyArchivalState, fieldNumber: 3)
    }
    if !self.historyArchivalUri.isEmpty {
      try visitor.visitSingularStringField(value: self.historyArchivalUri, fieldNumber: 4)
    }
    if self.visibilityArchivalState != .unspecified {
      try visitor.visitSingularEnumField(value: self.visibilityArchivalState, fieldNumber: 5)
    }
    if !self.visibilityArchivalUri.isEmpty {
      try visitor.visitSingularStringField(value: self.visibilityArchivalUri, fieldNumber: 6)
    }
    if !self.customSearchAttributeAliases.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.customSearchAttributeAliases, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Namespace_V1_NamespaceConfig, rhs: Temporal_Api_Namespace_V1_NamespaceConfig) -> Bool {
    if lhs._workflowExecutionRetentionTtl != rhs._workflowExecutionRetentionTtl {return false}
    if lhs._badBinaries != rhs._badBinaries {return false}
    if lhs.historyArchivalState != rhs.historyArchivalState {return false}
    if lhs.historyArchivalUri != rhs.historyArchivalUri {return false}
    if lhs.visibilityArchivalState != rhs.visibilityArchivalState {return false}
    if lhs.visibilityArchivalUri != rhs.visibilityArchivalUri {return false}
    if lhs.customSearchAttributeAliases != rhs.customSearchAttributeAliases {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Namespace_V1_BadBinaries: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".BadBinaries"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}binaries\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Temporal_Api_Namespace_V1_BadBinaryInfo>.self, value: &self.binaries) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.binaries.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Temporal_Api_Namespace_V1_BadBinaryInfo>.self, value: self.binaries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Namespace_V1_BadBinaries, rhs: Temporal_Api_Namespace_V1_BadBinaries) -> Bool {
    if lhs.binaries != rhs.binaries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Namespace_V1_BadBinaryInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".BadBinaryInfo"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}reason\0\u{1}operator\0\u{3}create_time\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.reason) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.`operator`) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 1)
    }
    if !self.`operator`.isEmpty {
      try visitor.visitSingularStringField(value: self.`operator`, fieldNumber: 2)
    }
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Namespace_V1_BadBinaryInfo, rhs: Temporal_Api_Namespace_V1_BadBinaryInfo) -> Bool {
    if lhs.reason != rhs.reason {return false}
    if lhs.`operator` != rhs.`operator` {return false}
    if lhs._createTime != rhs._createTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Namespace_V1_UpdateNamespaceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".UpdateNamespaceInfo"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}description\0\u{3}owner_email\0\u{1}data\0\u{1}state\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ownerEmail) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.data) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if !self.ownerEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerEmail, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.data, fieldNumber: 3)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Namespace_V1_UpdateNamespaceInfo, rhs: Temporal_Api_Namespace_V1_UpdateNamespaceInfo) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.ownerEmail != rhs.ownerEmail {return false}
    if lhs.data != rhs.data {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Namespace_V1_NamespaceFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".NamespaceFilter"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}include_deleted\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.includeDeleted) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.includeDeleted != false {
      try visitor.visitSingularBoolField(value: self.includeDeleted, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Namespace_V1_NamespaceFilter, rhs: Temporal_Api_Namespace_V1_NamespaceFilter) -> Bool {
    if lhs.includeDeleted != rhs.includeDeleted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
