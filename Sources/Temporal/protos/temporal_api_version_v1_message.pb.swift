// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/version/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ReleaseInfo contains information about specific version of temporal.
package struct Temporal_Api_Version_V1_ReleaseInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var version: String = String()

  package var releaseTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _releaseTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_releaseTime = newValue}
  }
  /// Returns true if `releaseTime` has been explicitly set.
  package var hasReleaseTime: Bool {return self._releaseTime != nil}
  /// Clears the value of `releaseTime`. Subsequent reads from it will return its default value.
  package mutating func clearReleaseTime() {self._releaseTime = nil}

  package var notes: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _releaseTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Alert contains notification and severity.
package struct Temporal_Api_Version_V1_Alert: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var message: String = String()

  package var severity: Temporal_Api_Enums_V1_Severity = .unspecified

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// VersionInfo contains details about current and recommended release versions as well as alerts and upgrade instructions.
package struct Temporal_Api_Version_V1_VersionInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var current: Temporal_Api_Version_V1_ReleaseInfo {
    get {return _current ?? Temporal_Api_Version_V1_ReleaseInfo()}
    set {_current = newValue}
  }
  /// Returns true if `current` has been explicitly set.
  package var hasCurrent: Bool {return self._current != nil}
  /// Clears the value of `current`. Subsequent reads from it will return its default value.
  package mutating func clearCurrent() {self._current = nil}

  package var recommended: Temporal_Api_Version_V1_ReleaseInfo {
    get {return _recommended ?? Temporal_Api_Version_V1_ReleaseInfo()}
    set {_recommended = newValue}
  }
  /// Returns true if `recommended` has been explicitly set.
  package var hasRecommended: Bool {return self._recommended != nil}
  /// Clears the value of `recommended`. Subsequent reads from it will return its default value.
  package mutating func clearRecommended() {self._recommended = nil}

  package var instructions: String = String()

  package var alerts: [Temporal_Api_Version_V1_Alert] = []

  package var lastUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUpdateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUpdateTime = newValue}
  }
  /// Returns true if `lastUpdateTime` has been explicitly set.
  package var hasLastUpdateTime: Bool {return self._lastUpdateTime != nil}
  /// Clears the value of `lastUpdateTime`. Subsequent reads from it will return its default value.
  package mutating func clearLastUpdateTime() {self._lastUpdateTime = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _current: Temporal_Api_Version_V1_ReleaseInfo? = nil
  fileprivate var _recommended: Temporal_Api_Version_V1_ReleaseInfo? = nil
  fileprivate var _lastUpdateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.version.v1"

extension Temporal_Api_Version_V1_ReleaseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".ReleaseInfo"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}version\0\u{3}release_time\0\u{1}notes\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._releaseTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.notes) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    try { if let v = self._releaseTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.notes.isEmpty {
      try visitor.visitSingularStringField(value: self.notes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Version_V1_ReleaseInfo, rhs: Temporal_Api_Version_V1_ReleaseInfo) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._releaseTime != rhs._releaseTime {return false}
    if lhs.notes != rhs.notes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Version_V1_Alert: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Alert"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}message\0\u{1}severity\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.severity) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if self.severity != .unspecified {
      try visitor.visitSingularEnumField(value: self.severity, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Version_V1_Alert, rhs: Temporal_Api_Version_V1_Alert) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.severity != rhs.severity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Version_V1_VersionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".VersionInfo"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}current\0\u{1}recommended\0\u{1}instructions\0\u{1}alerts\0\u{3}last_update_time\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._current) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._recommended) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.instructions) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.alerts) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._lastUpdateTime) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._current {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._recommended {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.instructions.isEmpty {
      try visitor.visitSingularStringField(value: self.instructions, fieldNumber: 3)
    }
    if !self.alerts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.alerts, fieldNumber: 4)
    }
    try { if let v = self._lastUpdateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Version_V1_VersionInfo, rhs: Temporal_Api_Version_V1_VersionInfo) -> Bool {
    if lhs._current != rhs._current {return false}
    if lhs._recommended != rhs._recommended {return false}
    if lhs.instructions != rhs.instructions {return false}
    if lhs.alerts != rhs.alerts {return false}
    if lhs._lastUpdateTime != rhs._lastUpdateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
