// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/cloud/operation/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package struct Temporal_Api_Cloud_Operation_V1_AsyncOperation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The operation id.
  package var id: String = String()

  /// The current state of this operation.
  /// Possible values are: pending, in_progress, failed, cancelled, fulfilled.
  /// Deprecated: Not supported after v0.3.0 api version. Use state instead.
  /// temporal:versioning:max_version=v0.3.0
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  package var stateDeprecated: String = String()

  /// The current state of this operation.
  /// temporal:versioning:min_version=v0.3.0
  /// temporal:enums:replaces=state_deprecated
  package var state: Temporal_Api_Cloud_Operation_V1_AsyncOperation.State = .unspecified

  /// The recommended duration to check back for an update in the operation's state.
  package var checkDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _checkDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_checkDuration = newValue}
  }
  /// Returns true if `checkDuration` has been explicitly set.
  package var hasCheckDuration: Bool {return self._checkDuration != nil}
  /// Clears the value of `checkDuration`. Subsequent reads from it will return its default value.
  package mutating func clearCheckDuration() {self._checkDuration = nil}

  /// The type of operation being performed.
  package var operationType: String = String()

  /// The input to the operation being performed.
  ///
  /// (-- api-linter: core::0146::any=disabled --)
  package var operationInput: SwiftProtobuf.Google_Protobuf_Any {
    get {return _operationInput ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_operationInput = newValue}
  }
  /// Returns true if `operationInput` has been explicitly set.
  package var hasOperationInput: Bool {return self._operationInput != nil}
  /// Clears the value of `operationInput`. Subsequent reads from it will return its default value.
  package mutating func clearOperationInput() {self._operationInput = nil}

  /// If the operation failed, the reason for the failure.
  package var failureReason: String = String()

  /// The date and time when the operation initiated.
  package var startedTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startedTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startedTime = newValue}
  }
  /// Returns true if `startedTime` has been explicitly set.
  package var hasStartedTime: Bool {return self._startedTime != nil}
  /// Clears the value of `startedTime`. Subsequent reads from it will return its default value.
  package mutating func clearStartedTime() {self._startedTime = nil}

  /// The date and time when the operation completed.
  package var finishedTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _finishedTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_finishedTime = newValue}
  }
  /// Returns true if `finishedTime` has been explicitly set.
  package var hasFinishedTime: Bool {return self._finishedTime != nil}
  /// Clears the value of `finishedTime`. Subsequent reads from it will return its default value.
  package mutating func clearFinishedTime() {self._finishedTime = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum State: SwiftProtobuf.Enum, Swift.CaseIterable {
    package typealias RawValue = Int
    case unspecified // = 0

    /// The operation is pending.
    case pending // = 1

    /// The operation is in progress.
    case inProgress // = 2

    /// The operation failed, check failure_reason for more details.
    case failed // = 3

    /// The operation was cancelled.
    case cancelled // = 4

    /// The operation was fulfilled.
    case fulfilled // = 5

    /// The operation was rejected.
    case rejected // = 6
    case UNRECOGNIZED(Int)

    package init() {
      self = .unspecified
    }

    package init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .pending
      case 2: self = .inProgress
      case 3: self = .failed
      case 4: self = .cancelled
      case 5: self = .fulfilled
      case 6: self = .rejected
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    package var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .pending: return 1
      case .inProgress: return 2
      case .failed: return 3
      case .cancelled: return 4
      case .fulfilled: return 5
      case .rejected: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    package static let allCases: [Temporal_Api_Cloud_Operation_V1_AsyncOperation.State] = [
      .unspecified,
      .pending,
      .inProgress,
      .failed,
      .cancelled,
      .fulfilled,
      .rejected,
    ]

  }

  package init() {}

  fileprivate var _checkDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _operationInput: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _startedTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _finishedTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.cloud.operation.v1"

extension Temporal_Api_Cloud_Operation_V1_AsyncOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".AsyncOperation"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{3}state_deprecated\0\u{3}check_duration\0\u{3}operation_type\0\u{3}operation_input\0\u{3}failure_reason\0\u{3}started_time\0\u{3}finished_time\0\u{1}state\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.stateDeprecated) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._checkDuration) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.operationType) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._operationInput) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.failureReason) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._startedTime) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._finishedTime) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.stateDeprecated.isEmpty {
      try visitor.visitSingularStringField(value: self.stateDeprecated, fieldNumber: 2)
    }
    try { if let v = self._checkDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.operationType.isEmpty {
      try visitor.visitSingularStringField(value: self.operationType, fieldNumber: 4)
    }
    try { if let v = self._operationInput {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.failureReason.isEmpty {
      try visitor.visitSingularStringField(value: self.failureReason, fieldNumber: 6)
    }
    try { if let v = self._startedTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._finishedTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Operation_V1_AsyncOperation, rhs: Temporal_Api_Cloud_Operation_V1_AsyncOperation) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.stateDeprecated != rhs.stateDeprecated {return false}
    if lhs.state != rhs.state {return false}
    if lhs._checkDuration != rhs._checkDuration {return false}
    if lhs.operationType != rhs.operationType {return false}
    if lhs._operationInput != rhs._operationInput {return false}
    if lhs.failureReason != rhs.failureReason {return false}
    if lhs._startedTime != rhs._startedTime {return false}
    if lhs._finishedTime != rhs._finishedTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Cloud_Operation_V1_AsyncOperation.State: SwiftProtobuf._ProtoNameProviding {
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0STATE_UNSPECIFIED\0\u{1}STATE_PENDING\0\u{1}STATE_IN_PROGRESS\0\u{1}STATE_FAILED\0\u{1}STATE_CANCELLED\0\u{1}STATE_FULFILLED\0\u{1}STATE_REJECTED\0")
}
