// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/sdk/v1/task_complete_metadata.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package struct Temporal_Api_Sdk_V1_WorkflowTaskCompletedMetadata: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Internal flags used by the core SDK. SDKs using flags must comply with the following behavior:
  ///
  /// During replay:
  /// * If a flag is not recognized (value is too high or not defined), it must fail the workflow
  ///   task.
  /// * If a flag is recognized, it is stored in a set of used flags for the run. Code checks for
  ///   that flag during and after this WFT are allowed to assume that the flag is present.
  /// * If a code check for a flag does not find the flag in the set of used flags, it must take
  ///   the branch corresponding to the absence of that flag.
  ///
  /// During non-replay execution of new WFTs:
  /// * The SDK is free to use all flags it knows about. It must record any newly-used (IE: not
  ///   previously recorded) flags when completing the WFT.
  ///
  /// SDKs which are too old to even know about this field at all are considered to produce
  /// undefined behavior if they replay workflows which used this mechanism.
  ///
  /// (-- api-linter: core::0141::forbidden-types=disabled
  ///     aip.dev/not-precedent: These really shouldn't have negative values. --)
  package var coreUsedFlags: [UInt32] = []

  /// Flags used by the SDK lang. No attempt is made to distinguish between different SDK languages
  /// here as processing a workflow with a different language than the one which authored it is
  /// already undefined behavior. See `core_used_patches` for more.
  ///
  /// (-- api-linter: core::0141::forbidden-types=disabled
  ///     aip.dev/not-precedent: These really shouldn't have negative values. --)
  package var langUsedFlags: [UInt32] = []

  /// Name of the SDK that processed the task. This is usually something like "temporal-go" and is
  /// usually the same as client-name gRPC header. This should only be set if its value changed
  /// since the last time recorded on the workflow (or be set on the first task).
  ///
  /// (-- api-linter: core::0122::name-suffix=disabled
  ///     aip.dev/not-precedent: We're ok with a name suffix here. --)
  package var sdkName: String = String()

  /// Version of the SDK that processed the task. This is usually something like "1.20.0" and is
  /// usually the same as client-version gRPC header. This should only be set if its value changed
  /// since the last time recorded on the workflow (or be set on the first task).
  package var sdkVersion: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.sdk.v1"

extension Temporal_Api_Sdk_V1_WorkflowTaskCompletedMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WorkflowTaskCompletedMetadata"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}core_used_flags\0\u{3}lang_used_flags\0\u{3}sdk_name\0\u{3}sdk_version\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt32Field(value: &self.coreUsedFlags) }()
      case 2: try { try decoder.decodeRepeatedUInt32Field(value: &self.langUsedFlags) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sdkName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sdkVersion) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.coreUsedFlags.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.coreUsedFlags, fieldNumber: 1)
    }
    if !self.langUsedFlags.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.langUsedFlags, fieldNumber: 2)
    }
    if !self.sdkName.isEmpty {
      try visitor.visitSingularStringField(value: self.sdkName, fieldNumber: 3)
    }
    if !self.sdkVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.sdkVersion, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Sdk_V1_WorkflowTaskCompletedMetadata, rhs: Temporal_Api_Sdk_V1_WorkflowTaskCompletedMetadata) -> Bool {
    if lhs.coreUsedFlags != rhs.coreUsedFlags {return false}
    if lhs.langUsedFlags != rhs.langUsedFlags {return false}
    if lhs.sdkName != rhs.sdkName {return false}
    if lhs.sdkVersion != rhs.sdkVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
