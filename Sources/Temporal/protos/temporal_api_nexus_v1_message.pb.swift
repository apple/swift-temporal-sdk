// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/nexus/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import Foundation
package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A general purpose failure message.
/// See: https://github.com/nexus-rpc/api/blob/main/SPEC.md#failure
package struct Temporal_Api_Nexus_V1_Failure: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var message: String = String()

  package var metadata: Dictionary<String,String> = [:]

  /// UTF-8 encoded JSON serializable details.
  package var details: Data = Data()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct Temporal_Api_Nexus_V1_HandlerError: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// See https://github.com/nexus-rpc/api/blob/main/SPEC.md#predefined-handler-errors.
  package var errorType: String = String()

  package var failure: Temporal_Api_Nexus_V1_Failure {
    get {return _failure ?? Temporal_Api_Nexus_V1_Failure()}
    set {_failure = newValue}
  }
  /// Returns true if `failure` has been explicitly set.
  package var hasFailure: Bool {return self._failure != nil}
  /// Clears the value of `failure`. Subsequent reads from it will return its default value.
  package mutating func clearFailure() {self._failure = nil}

  /// Retry behavior, defaults to the retry behavior of the error type as defined in the spec.
  package var retryBehavior: Temporal_Api_Enums_V1_NexusHandlerErrorRetryBehavior = .unspecified

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _failure: Temporal_Api_Nexus_V1_Failure? = nil
}

package struct Temporal_Api_Nexus_V1_UnsuccessfulOperationError: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// See https://github.com/nexus-rpc/api/blob/main/SPEC.md#operationinfo.
  package var operationState: String = String()

  package var failure: Temporal_Api_Nexus_V1_Failure {
    get {return _failure ?? Temporal_Api_Nexus_V1_Failure()}
    set {_failure = newValue}
  }
  /// Returns true if `failure` has been explicitly set.
  package var hasFailure: Bool {return self._failure != nil}
  /// Clears the value of `failure`. Subsequent reads from it will return its default value.
  package mutating func clearFailure() {self._failure = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _failure: Temporal_Api_Nexus_V1_Failure? = nil
}

package struct Temporal_Api_Nexus_V1_Link: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// See https://github.com/nexus-rpc/api/blob/main/SPEC.md#links.
  package var url: String = String()

  package var type: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// A request to start an operation.
package struct Temporal_Api_Nexus_V1_StartOperationRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of service to start the operation in.
  package var service: String = String()

  /// Type of operation to start.
  package var operation: String = String()

  /// A request ID that can be used as an idempotentency key.
  package var requestID: String = String()

  /// Callback URL to call upon completion if the started operation is async.
  package var callback: String = String()

  /// Full request body from the incoming HTTP request.
  package var payload: Temporal_Api_Common_V1_Payload {
    get {return _payload ?? Temporal_Api_Common_V1_Payload()}
    set {_payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  package var hasPayload: Bool {return self._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  package mutating func clearPayload() {self._payload = nil}

  /// Header that is expected to be attached to the callback request when the operation completes.
  package var callbackHeader: Dictionary<String,String> = [:]

  /// Links contain caller information and can be attached to the operations started by the handler.
  package var links: [Temporal_Api_Nexus_V1_Link] = []

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _payload: Temporal_Api_Common_V1_Payload? = nil
}

/// A request to cancel an operation.
package struct Temporal_Api_Nexus_V1_CancelOperationRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Service name.
  package var service: String = String()

  /// Type of operation to cancel.
  package var operation: String = String()

  /// Operation ID as originally generated by a Handler.
  ///
  /// Deprecated. Renamed to operation_token.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  package var operationID: String = String()

  /// Operation token as originally generated by a Handler.
  package var operationToken: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// A Nexus request.
package struct Temporal_Api_Nexus_V1_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Headers extracted from the original request in the Temporal frontend.
  /// When using Nexus over HTTP, this includes the request's HTTP headers ignoring multiple values.
  package var header: Dictionary<String,String> = [:]

  /// The timestamp when the request was scheduled in the frontend.
  /// (-- api-linter: core::0142::time-field-names=disabled
  ///     aip.dev/not-precedent: Not following linter rules. --)
  package var scheduledTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _scheduledTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_scheduledTime = newValue}
  }
  /// Returns true if `scheduledTime` has been explicitly set.
  package var hasScheduledTime: Bool {return self._scheduledTime != nil}
  /// Clears the value of `scheduledTime`. Subsequent reads from it will return its default value.
  package mutating func clearScheduledTime() {self._scheduledTime = nil}

  package var variant: Temporal_Api_Nexus_V1_Request.OneOf_Variant? = nil

  package var startOperation: Temporal_Api_Nexus_V1_StartOperationRequest {
    get {
      if case .startOperation(let v)? = variant {return v}
      return Temporal_Api_Nexus_V1_StartOperationRequest()
    }
    set {variant = .startOperation(newValue)}
  }

  package var cancelOperation: Temporal_Api_Nexus_V1_CancelOperationRequest {
    get {
      if case .cancelOperation(let v)? = variant {return v}
      return Temporal_Api_Nexus_V1_CancelOperationRequest()
    }
    set {variant = .cancelOperation(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum OneOf_Variant: Equatable, Sendable {
    case startOperation(Temporal_Api_Nexus_V1_StartOperationRequest)
    case cancelOperation(Temporal_Api_Nexus_V1_CancelOperationRequest)

  }

  package init() {}

  fileprivate var _scheduledTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Response variant for StartOperationRequest.
package struct Temporal_Api_Nexus_V1_StartOperationResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var variant: Temporal_Api_Nexus_V1_StartOperationResponse.OneOf_Variant? = nil

  package var syncSuccess: Temporal_Api_Nexus_V1_StartOperationResponse.Sync {
    get {
      if case .syncSuccess(let v)? = variant {return v}
      return Temporal_Api_Nexus_V1_StartOperationResponse.Sync()
    }
    set {variant = .syncSuccess(newValue)}
  }

  package var asyncSuccess: Temporal_Api_Nexus_V1_StartOperationResponse.Async {
    get {
      if case .asyncSuccess(let v)? = variant {return v}
      return Temporal_Api_Nexus_V1_StartOperationResponse.Async()
    }
    set {variant = .asyncSuccess(newValue)}
  }

  /// The operation completed unsuccessfully (failed or canceled).
  package var operationError: Temporal_Api_Nexus_V1_UnsuccessfulOperationError {
    get {
      if case .operationError(let v)? = variant {return v}
      return Temporal_Api_Nexus_V1_UnsuccessfulOperationError()
    }
    set {variant = .operationError(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum OneOf_Variant: Equatable, Sendable {
    case syncSuccess(Temporal_Api_Nexus_V1_StartOperationResponse.Sync)
    case asyncSuccess(Temporal_Api_Nexus_V1_StartOperationResponse.Async)
    /// The operation completed unsuccessfully (failed or canceled).
    case operationError(Temporal_Api_Nexus_V1_UnsuccessfulOperationError)

  }

  /// An operation completed successfully.
  package struct Sync: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    package var payload: Temporal_Api_Common_V1_Payload {
      get {return _payload ?? Temporal_Api_Common_V1_Payload()}
      set {_payload = newValue}
    }
    /// Returns true if `payload` has been explicitly set.
    package var hasPayload: Bool {return self._payload != nil}
    /// Clears the value of `payload`. Subsequent reads from it will return its default value.
    package mutating func clearPayload() {self._payload = nil}

    package var links: [Temporal_Api_Nexus_V1_Link] = []

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}

    fileprivate var _payload: Temporal_Api_Common_V1_Payload? = nil
  }

  /// The operation will complete asynchronously.
  /// The returned ID can be used to reference this operation.
  package struct Async: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Deprecated. Renamed to operation_token.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    package var operationID: String = String()

    package var links: [Temporal_Api_Nexus_V1_Link] = []

    package var operationToken: String = String()

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}
  }

  package init() {}
}

/// Response variant for CancelOperationRequest.
package struct Temporal_Api_Nexus_V1_CancelOperationResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// A response indicating that the handler has successfully processed a request.
package struct Temporal_Api_Nexus_V1_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Variant must correlate to the corresponding Request's variant.
  package var variant: Temporal_Api_Nexus_V1_Response.OneOf_Variant? = nil

  package var startOperation: Temporal_Api_Nexus_V1_StartOperationResponse {
    get {
      if case .startOperation(let v)? = variant {return v}
      return Temporal_Api_Nexus_V1_StartOperationResponse()
    }
    set {variant = .startOperation(newValue)}
  }

  package var cancelOperation: Temporal_Api_Nexus_V1_CancelOperationResponse {
    get {
      if case .cancelOperation(let v)? = variant {return v}
      return Temporal_Api_Nexus_V1_CancelOperationResponse()
    }
    set {variant = .cancelOperation(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Variant must correlate to the corresponding Request's variant.
  package enum OneOf_Variant: Equatable, Sendable {
    case startOperation(Temporal_Api_Nexus_V1_StartOperationResponse)
    case cancelOperation(Temporal_Api_Nexus_V1_CancelOperationResponse)

  }

  package init() {}
}

/// A cluster-global binding from an endpoint ID to a target for dispatching incoming Nexus requests.
package struct Temporal_Api_Nexus_V1_Endpoint: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Data version for this endpoint, incremented for every update issued via the UpdateNexusEndpoint API.
  package var version: Int64 = 0

  /// Unique server-generated endpoint ID.
  package var id: String = String()

  /// Spec for the endpoint.
  package var spec: Temporal_Api_Nexus_V1_EndpointSpec {
    get {return _spec ?? Temporal_Api_Nexus_V1_EndpointSpec()}
    set {_spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  package var hasSpec: Bool {return self._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  package mutating func clearSpec() {self._spec = nil}

  /// The date and time when the endpoint was created.
  /// (-- api-linter: core::0142::time-field-names=disabled
  ///     aip.dev/not-precedent: Not following linter rules. --)
  package var createdTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdTime = newValue}
  }
  /// Returns true if `createdTime` has been explicitly set.
  package var hasCreatedTime: Bool {return self._createdTime != nil}
  /// Clears the value of `createdTime`. Subsequent reads from it will return its default value.
  package mutating func clearCreatedTime() {self._createdTime = nil}

  /// The date and time when the endpoint was last modified.
  /// Will not be set if the endpoint has never been modified.
  /// (-- api-linter: core::0142::time-field-names=disabled
  ///     aip.dev/not-precedent: Not following linter rules. --)
  package var lastModifiedTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastModifiedTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastModifiedTime = newValue}
  }
  /// Returns true if `lastModifiedTime` has been explicitly set.
  package var hasLastModifiedTime: Bool {return self._lastModifiedTime != nil}
  /// Clears the value of `lastModifiedTime`. Subsequent reads from it will return its default value.
  package mutating func clearLastModifiedTime() {self._lastModifiedTime = nil}

  /// Server exposed URL prefix for invocation of operations on this endpoint.
  /// This doesn't include the protocol, hostname or port as the server does not know how it should be accessed
  /// publicly. The URL is stable in the face of endpoint renames.
  package var urlPrefix: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _spec: Temporal_Api_Nexus_V1_EndpointSpec? = nil
  fileprivate var _createdTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastModifiedTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Contains mutable fields for an Endpoint.
package struct Temporal_Api_Nexus_V1_EndpointSpec: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Endpoint name, unique for this cluster. Must match `[a-zA-Z_][a-zA-Z0-9_]*`.
  /// Renaming an endpoint breaks all workflow callers that reference this endpoint, causing operations to fail.
  package var name: String = String()

  /// Markdown description serialized as a single JSON string.
  /// If the Payload is encrypted, the UI and CLI may decrypt with the configured codec server endpoint.
  /// By default, the server enforces a limit of 20,000 bytes for this entire payload.
  package var description_p: Temporal_Api_Common_V1_Payload {
    get {return _description_p ?? Temporal_Api_Common_V1_Payload()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  package var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  package mutating func clearDescription_p() {self._description_p = nil}

  /// Target to route requests to.
  package var target: Temporal_Api_Nexus_V1_EndpointTarget {
    get {return _target ?? Temporal_Api_Nexus_V1_EndpointTarget()}
    set {_target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  package var hasTarget: Bool {return self._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  package mutating func clearTarget() {self._target = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _description_p: Temporal_Api_Common_V1_Payload? = nil
  fileprivate var _target: Temporal_Api_Nexus_V1_EndpointTarget? = nil
}

/// Target to route requests to.
package struct Temporal_Api_Nexus_V1_EndpointTarget: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var variant: Temporal_Api_Nexus_V1_EndpointTarget.OneOf_Variant? = nil

  package var worker: Temporal_Api_Nexus_V1_EndpointTarget.Worker {
    get {
      if case .worker(let v)? = variant {return v}
      return Temporal_Api_Nexus_V1_EndpointTarget.Worker()
    }
    set {variant = .worker(newValue)}
  }

  package var external: Temporal_Api_Nexus_V1_EndpointTarget.External {
    get {
      if case .external(let v)? = variant {return v}
      return Temporal_Api_Nexus_V1_EndpointTarget.External()
    }
    set {variant = .external(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum OneOf_Variant: Equatable, Sendable {
    case worker(Temporal_Api_Nexus_V1_EndpointTarget.Worker)
    case external(Temporal_Api_Nexus_V1_EndpointTarget.External)

  }

  /// Target a worker polling on a Nexus task queue in a specific namespace.
  package struct Worker: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Namespace to route requests to.
    package var namespace: String = String()

    /// Nexus task queue to route requests to.
    package var taskQueue: String = String()

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}
  }

  /// Target an external server by URL.
  /// At a later point, this will support providing credentials, in the meantime, an http.RoundTripper can be injected
  /// into the server to modify the request.
  package struct External: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// URL to call.
    package var url: String = String()

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}
  }

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.nexus.v1"

extension Temporal_Api_Nexus_V1_Failure: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Failure"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}message\0\u{1}metadata\0\u{1}details\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.metadata) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.details) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if !self.metadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.metadata, fieldNumber: 2)
    }
    if !self.details.isEmpty {
      try visitor.visitSingularBytesField(value: self.details, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_Failure, rhs: Temporal_Api_Nexus_V1_Failure) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_HandlerError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".HandlerError"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}error_type\0\u{1}failure\0\u{3}retry_behavior\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.errorType) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._failure) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.retryBehavior) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.errorType.isEmpty {
      try visitor.visitSingularStringField(value: self.errorType, fieldNumber: 1)
    }
    try { if let v = self._failure {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.retryBehavior != .unspecified {
      try visitor.visitSingularEnumField(value: self.retryBehavior, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_HandlerError, rhs: Temporal_Api_Nexus_V1_HandlerError) -> Bool {
    if lhs.errorType != rhs.errorType {return false}
    if lhs._failure != rhs._failure {return false}
    if lhs.retryBehavior != rhs.retryBehavior {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_UnsuccessfulOperationError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".UnsuccessfulOperationError"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}operation_state\0\u{1}failure\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.operationState) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._failure) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.operationState.isEmpty {
      try visitor.visitSingularStringField(value: self.operationState, fieldNumber: 1)
    }
    try { if let v = self._failure {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_UnsuccessfulOperationError, rhs: Temporal_Api_Nexus_V1_UnsuccessfulOperationError) -> Bool {
    if lhs.operationState != rhs.operationState {return false}
    if lhs._failure != rhs._failure {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Link"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}url\0\u{1}type\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_Link, rhs: Temporal_Api_Nexus_V1_Link) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_StartOperationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".StartOperationRequest"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}service\0\u{1}operation\0\u{3}request_id\0\u{1}callback\0\u{1}payload\0\u{3}callback_header\0\u{1}links\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.service) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.operation) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.callback) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._payload) }()
      case 6: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.callbackHeader) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.links) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.service.isEmpty {
      try visitor.visitSingularStringField(value: self.service, fieldNumber: 1)
    }
    if !self.operation.isEmpty {
      try visitor.visitSingularStringField(value: self.operation, fieldNumber: 2)
    }
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 3)
    }
    if !self.callback.isEmpty {
      try visitor.visitSingularStringField(value: self.callback, fieldNumber: 4)
    }
    try { if let v = self._payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.callbackHeader.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.callbackHeader, fieldNumber: 6)
    }
    if !self.links.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.links, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_StartOperationRequest, rhs: Temporal_Api_Nexus_V1_StartOperationRequest) -> Bool {
    if lhs.service != rhs.service {return false}
    if lhs.operation != rhs.operation {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs.callback != rhs.callback {return false}
    if lhs._payload != rhs._payload {return false}
    if lhs.callbackHeader != rhs.callbackHeader {return false}
    if lhs.links != rhs.links {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_CancelOperationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".CancelOperationRequest"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}service\0\u{1}operation\0\u{3}operation_id\0\u{3}operation_token\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.service) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.operation) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.operationID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.operationToken) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.service.isEmpty {
      try visitor.visitSingularStringField(value: self.service, fieldNumber: 1)
    }
    if !self.operation.isEmpty {
      try visitor.visitSingularStringField(value: self.operation, fieldNumber: 2)
    }
    if !self.operationID.isEmpty {
      try visitor.visitSingularStringField(value: self.operationID, fieldNumber: 3)
    }
    if !self.operationToken.isEmpty {
      try visitor.visitSingularStringField(value: self.operationToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_CancelOperationRequest, rhs: Temporal_Api_Nexus_V1_CancelOperationRequest) -> Bool {
    if lhs.service != rhs.service {return false}
    if lhs.operation != rhs.operation {return false}
    if lhs.operationID != rhs.operationID {return false}
    if lhs.operationToken != rhs.operationToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Request"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}header\0\u{3}scheduled_time\0\u{3}start_operation\0\u{3}cancel_operation\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.header) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._scheduledTime) }()
      case 3: try {
        var v: Temporal_Api_Nexus_V1_StartOperationRequest?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .startOperation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .startOperation(v)
        }
      }()
      case 4: try {
        var v: Temporal_Api_Nexus_V1_CancelOperationRequest?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .cancelOperation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .cancelOperation(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.header.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.header, fieldNumber: 1)
    }
    try { if let v = self._scheduledTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    switch self.variant {
    case .startOperation?: try {
      guard case .startOperation(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .cancelOperation?: try {
      guard case .cancelOperation(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_Request, rhs: Temporal_Api_Nexus_V1_Request) -> Bool {
    if lhs.header != rhs.header {return false}
    if lhs._scheduledTime != rhs._scheduledTime {return false}
    if lhs.variant != rhs.variant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_StartOperationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".StartOperationResponse"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sync_success\0\u{3}async_success\0\u{3}operation_error\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Temporal_Api_Nexus_V1_StartOperationResponse.Sync?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .syncSuccess(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .syncSuccess(v)
        }
      }()
      case 2: try {
        var v: Temporal_Api_Nexus_V1_StartOperationResponse.Async?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .asyncSuccess(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .asyncSuccess(v)
        }
      }()
      case 3: try {
        var v: Temporal_Api_Nexus_V1_UnsuccessfulOperationError?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .operationError(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .operationError(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.variant {
    case .syncSuccess?: try {
      guard case .syncSuccess(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .asyncSuccess?: try {
      guard case .asyncSuccess(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .operationError?: try {
      guard case .operationError(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_StartOperationResponse, rhs: Temporal_Api_Nexus_V1_StartOperationResponse) -> Bool {
    if lhs.variant != rhs.variant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_StartOperationResponse.Sync: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Temporal_Api_Nexus_V1_StartOperationResponse.protoMessageName + ".Sync"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}payload\0\u{1}links\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._payload) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.links) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.links.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.links, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_StartOperationResponse.Sync, rhs: Temporal_Api_Nexus_V1_StartOperationResponse.Sync) -> Bool {
    if lhs._payload != rhs._payload {return false}
    if lhs.links != rhs.links {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_StartOperationResponse.Async: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Temporal_Api_Nexus_V1_StartOperationResponse.protoMessageName + ".Async"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}operation_id\0\u{1}links\0\u{3}operation_token\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.operationID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.links) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.operationToken) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.operationID.isEmpty {
      try visitor.visitSingularStringField(value: self.operationID, fieldNumber: 1)
    }
    if !self.links.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.links, fieldNumber: 2)
    }
    if !self.operationToken.isEmpty {
      try visitor.visitSingularStringField(value: self.operationToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_StartOperationResponse.Async, rhs: Temporal_Api_Nexus_V1_StartOperationResponse.Async) -> Bool {
    if lhs.operationID != rhs.operationID {return false}
    if lhs.links != rhs.links {return false}
    if lhs.operationToken != rhs.operationToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_CancelOperationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".CancelOperationResponse"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_CancelOperationResponse, rhs: Temporal_Api_Nexus_V1_CancelOperationResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Response"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}start_operation\0\u{3}cancel_operation\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Temporal_Api_Nexus_V1_StartOperationResponse?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .startOperation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .startOperation(v)
        }
      }()
      case 2: try {
        var v: Temporal_Api_Nexus_V1_CancelOperationResponse?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .cancelOperation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .cancelOperation(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.variant {
    case .startOperation?: try {
      guard case .startOperation(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .cancelOperation?: try {
      guard case .cancelOperation(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_Response, rhs: Temporal_Api_Nexus_V1_Response) -> Bool {
    if lhs.variant != rhs.variant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_Endpoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Endpoint"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}version\0\u{1}id\0\u{1}spec\0\u{3}created_time\0\u{3}last_modified_time\0\u{3}url_prefix\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._createdTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._lastModifiedTime) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.urlPrefix) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.version != 0 {
      try visitor.visitSingularInt64Field(value: self.version, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    try { if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._createdTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._lastModifiedTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.urlPrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.urlPrefix, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_Endpoint, rhs: Temporal_Api_Nexus_V1_Endpoint) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.id != rhs.id {return false}
    if lhs._spec != rhs._spec {return false}
    if lhs._createdTime != rhs._createdTime {return false}
    if lhs._lastModifiedTime != rhs._lastModifiedTime {return false}
    if lhs.urlPrefix != rhs.urlPrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_EndpointSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".EndpointSpec"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}description\0\u{1}target\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._target) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._target {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_EndpointSpec, rhs: Temporal_Api_Nexus_V1_EndpointSpec) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._target != rhs._target {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_EndpointTarget: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".EndpointTarget"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}worker\0\u{1}external\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Temporal_Api_Nexus_V1_EndpointTarget.Worker?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .worker(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .worker(v)
        }
      }()
      case 2: try {
        var v: Temporal_Api_Nexus_V1_EndpointTarget.External?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .external(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .external(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.variant {
    case .worker?: try {
      guard case .worker(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .external?: try {
      guard case .external(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_EndpointTarget, rhs: Temporal_Api_Nexus_V1_EndpointTarget) -> Bool {
    if lhs.variant != rhs.variant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_EndpointTarget.Worker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Temporal_Api_Nexus_V1_EndpointTarget.protoMessageName + ".Worker"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}namespace\0\u{3}task_queue\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.namespace) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taskQueue) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 1)
    }
    if !self.taskQueue.isEmpty {
      try visitor.visitSingularStringField(value: self.taskQueue, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_EndpointTarget.Worker, rhs: Temporal_Api_Nexus_V1_EndpointTarget.Worker) -> Bool {
    if lhs.namespace != rhs.namespace {return false}
    if lhs.taskQueue != rhs.taskQueue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Nexus_V1_EndpointTarget.External: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Temporal_Api_Nexus_V1_EndpointTarget.protoMessageName + ".External"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}url\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Nexus_V1_EndpointTarget.External, rhs: Temporal_Api_Nexus_V1_EndpointTarget.External) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
