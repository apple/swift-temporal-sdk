// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/operatorservice/v1/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

package import GRPCCore
internal import GRPCProtobuf

// MARK: - temporal.api.operatorservice.v1.OperatorService

/// Namespace containing generated types for the "temporal.api.operatorservice.v1.OperatorService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
package enum Temporal_Api_Operatorservice_V1_OperatorService {
    /// Service descriptor for the "temporal.api.operatorservice.v1.OperatorService" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "AddSearchAttributes" metadata.
        package enum AddSearchAttributes {
            /// Request type for "AddSearchAttributes".
            package typealias Input = Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest
            /// Response type for "AddSearchAttributes".
            package typealias Output = Temporal_Api_Operatorservice_V1_AddSearchAttributesResponse
            /// Descriptor for "AddSearchAttributes".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService"),
                method: "AddSearchAttributes"
            )
        }
        /// Namespace for "RemoveSearchAttributes" metadata.
        package enum RemoveSearchAttributes {
            /// Request type for "RemoveSearchAttributes".
            package typealias Input = Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest
            /// Response type for "RemoveSearchAttributes".
            package typealias Output = Temporal_Api_Operatorservice_V1_RemoveSearchAttributesResponse
            /// Descriptor for "RemoveSearchAttributes".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService"),
                method: "RemoveSearchAttributes"
            )
        }
        /// Namespace for "ListSearchAttributes" metadata.
        package enum ListSearchAttributes {
            /// Request type for "ListSearchAttributes".
            package typealias Input = Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest
            /// Response type for "ListSearchAttributes".
            package typealias Output = Temporal_Api_Operatorservice_V1_ListSearchAttributesResponse
            /// Descriptor for "ListSearchAttributes".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService"),
                method: "ListSearchAttributes"
            )
        }
        /// Namespace for "DeleteNamespace" metadata.
        package enum DeleteNamespace {
            /// Request type for "DeleteNamespace".
            package typealias Input = Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest
            /// Response type for "DeleteNamespace".
            package typealias Output = Temporal_Api_Operatorservice_V1_DeleteNamespaceResponse
            /// Descriptor for "DeleteNamespace".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService"),
                method: "DeleteNamespace"
            )
        }
        /// Namespace for "AddOrUpdateRemoteCluster" metadata.
        package enum AddOrUpdateRemoteCluster {
            /// Request type for "AddOrUpdateRemoteCluster".
            package typealias Input = Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest
            /// Response type for "AddOrUpdateRemoteCluster".
            package typealias Output = Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterResponse
            /// Descriptor for "AddOrUpdateRemoteCluster".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService"),
                method: "AddOrUpdateRemoteCluster"
            )
        }
        /// Namespace for "RemoveRemoteCluster" metadata.
        package enum RemoveRemoteCluster {
            /// Request type for "RemoveRemoteCluster".
            package typealias Input = Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest
            /// Response type for "RemoveRemoteCluster".
            package typealias Output = Temporal_Api_Operatorservice_V1_RemoveRemoteClusterResponse
            /// Descriptor for "RemoveRemoteCluster".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService"),
                method: "RemoveRemoteCluster"
            )
        }
        /// Namespace for "ListClusters" metadata.
        package enum ListClusters {
            /// Request type for "ListClusters".
            package typealias Input = Temporal_Api_Operatorservice_V1_ListClustersRequest
            /// Response type for "ListClusters".
            package typealias Output = Temporal_Api_Operatorservice_V1_ListClustersResponse
            /// Descriptor for "ListClusters".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService"),
                method: "ListClusters"
            )
        }
        /// Namespace for "GetNexusEndpoint" metadata.
        package enum GetNexusEndpoint {
            /// Request type for "GetNexusEndpoint".
            package typealias Input = Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest
            /// Response type for "GetNexusEndpoint".
            package typealias Output = Temporal_Api_Operatorservice_V1_GetNexusEndpointResponse
            /// Descriptor for "GetNexusEndpoint".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService"),
                method: "GetNexusEndpoint"
            )
        }
        /// Namespace for "CreateNexusEndpoint" metadata.
        package enum CreateNexusEndpoint {
            /// Request type for "CreateNexusEndpoint".
            package typealias Input = Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest
            /// Response type for "CreateNexusEndpoint".
            package typealias Output = Temporal_Api_Operatorservice_V1_CreateNexusEndpointResponse
            /// Descriptor for "CreateNexusEndpoint".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService"),
                method: "CreateNexusEndpoint"
            )
        }
        /// Namespace for "UpdateNexusEndpoint" metadata.
        package enum UpdateNexusEndpoint {
            /// Request type for "UpdateNexusEndpoint".
            package typealias Input = Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest
            /// Response type for "UpdateNexusEndpoint".
            package typealias Output = Temporal_Api_Operatorservice_V1_UpdateNexusEndpointResponse
            /// Descriptor for "UpdateNexusEndpoint".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService"),
                method: "UpdateNexusEndpoint"
            )
        }
        /// Namespace for "DeleteNexusEndpoint" metadata.
        package enum DeleteNexusEndpoint {
            /// Request type for "DeleteNexusEndpoint".
            package typealias Input = Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest
            /// Response type for "DeleteNexusEndpoint".
            package typealias Output = Temporal_Api_Operatorservice_V1_DeleteNexusEndpointResponse
            /// Descriptor for "DeleteNexusEndpoint".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService"),
                method: "DeleteNexusEndpoint"
            )
        }
        /// Namespace for "ListNexusEndpoints" metadata.
        package enum ListNexusEndpoints {
            /// Request type for "ListNexusEndpoints".
            package typealias Input = Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest
            /// Response type for "ListNexusEndpoints".
            package typealias Output = Temporal_Api_Operatorservice_V1_ListNexusEndpointsResponse
            /// Descriptor for "ListNexusEndpoints".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService"),
                method: "ListNexusEndpoints"
            )
        }
        /// Descriptors for all methods in the "temporal.api.operatorservice.v1.OperatorService" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            AddSearchAttributes.descriptor,
            RemoveSearchAttributes.descriptor,
            ListSearchAttributes.descriptor,
            DeleteNamespace.descriptor,
            AddOrUpdateRemoteCluster.descriptor,
            RemoveRemoteCluster.descriptor,
            ListClusters.descriptor,
            GetNexusEndpoint.descriptor,
            CreateNexusEndpoint.descriptor,
            UpdateNexusEndpoint.descriptor,
            DeleteNexusEndpoint.descriptor,
            ListNexusEndpoints.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "temporal.api.operatorservice.v1.OperatorService" service.
    package static let temporal_api_operatorservice_v1_OperatorService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.operatorservice.v1.OperatorService")
}

// MARK: temporal.api.operatorservice.v1.OperatorService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Temporal_Api_Operatorservice_V1_OperatorService {
    /// Generated client protocol for the "temporal.api.operatorservice.v1.OperatorService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > OperatorService API defines how Temporal SDKs and other clients interact with the Temporal server
    /// > to perform administrative functions like registering a search attribute or a namespace.
    /// > APIs in this file could be not compatible with Temporal Cloud, hence it's usage in SDKs should be limited by
    /// > designated APIs that clearly state that they shouldn't be used by the main Application (Workflows & Activities) framework.
    package protocol ClientProtocol: Sendable {
        /// Call the "AddSearchAttributes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AddSearchAttributes add custom search attributes.
        /// > 
        /// > Returns ALREADY_EXISTS status code if a Search Attribute with any of the specified names already exists
        /// > Returns INTERNAL status code with temporal.api.errordetails.v1.SystemWorkflowFailure in Error Details if registration process fails,
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_AddSearchAttributesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addSearchAttributes<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_AddSearchAttributesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_AddSearchAttributesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RemoveSearchAttributes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RemoveSearchAttributes removes custom search attributes.
        /// > 
        /// > Returns NOT_FOUND status code if a Search Attribute with any of the specified names is not registered
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_RemoveSearchAttributesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func removeSearchAttributes<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListSearchAttributes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListSearchAttributes returns comprehensive information about search attributes.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_ListSearchAttributesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listSearchAttributes<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_ListSearchAttributesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_ListSearchAttributesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteNamespace synchronously deletes a namespace and asynchronously reclaims all namespace resources.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_DeleteNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_DeleteNamespaceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_DeleteNamespaceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AddOrUpdateRemoteCluster" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AddOrUpdateRemoteCluster adds or updates remote cluster.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addOrUpdateRemoteCluster<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RemoveRemoteCluster" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RemoveRemoteCluster removes remote cluster.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_RemoveRemoteClusterResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func removeRemoteCluster<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListClusters" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListClusters returns information about Temporal clusters.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_ListClustersRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_ListClustersRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_ListClustersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listClusters<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_ListClustersRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_ListClustersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_ListClustersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_ListClustersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a registered Nexus endpoint by ID. The returned version can be used for optimistic updates.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_GetNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_GetNexusEndpointResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_GetNexusEndpointResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a Nexus endpoint. This will fail if an endpoint with the same name is already registered with a status of
        /// > ALREADY_EXISTS.
        /// > Returns the created endpoint with its initial version. You may use this version for subsequent updates.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_CreateNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_CreateNexusEndpointResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_CreateNexusEndpointResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Optimistically update a Nexus endpoint based on provided version as obtained via the `GetNexusEndpoint` or
        /// > `ListNexusEndpointResponse` APIs. This will fail with a status of FAILED_PRECONDITION if the version does not
        /// > match.
        /// > Returns the updated endpoint with its updated version. You may use this version for subsequent updates. You don't
        /// > need to increment the version yourself. The server will increment the version for you after each update.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_UpdateNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete an incoming Nexus service by ID.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_DeleteNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListNexusEndpoints" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List all Nexus endpoints for the cluster, sorted by ID in ascending order. Set page_token in the request to the
        /// > next_page_token field of the previous response to get the next page of results. An empty next_page_token
        /// > indicates that there are no more results. During pagination, a newly added service with an ID lexicographically
        /// > earlier than the previous page's last endpoint's ID may be missed.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_ListNexusEndpointsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listNexusEndpoints<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_ListNexusEndpointsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_ListNexusEndpointsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "temporal.api.operatorservice.v1.OperatorService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > OperatorService API defines how Temporal SDKs and other clients interact with the Temporal server
    /// > to perform administrative functions like registering a search attribute or a namespace.
    /// > APIs in this file could be not compatible with Temporal Cloud, hence it's usage in SDKs should be limited by
    /// > designated APIs that clearly state that they shouldn't be used by the main Application (Workflows & Activities) framework.
    package struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "AddSearchAttributes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AddSearchAttributes add custom search attributes.
        /// > 
        /// > Returns ALREADY_EXISTS status code if a Search Attribute with any of the specified names already exists
        /// > Returns INTERNAL status code with temporal.api.errordetails.v1.SystemWorkflowFailure in Error Details if registration process fails,
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_AddSearchAttributesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func addSearchAttributes<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_AddSearchAttributesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_AddSearchAttributesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Operatorservice_V1_OperatorService.Method.AddSearchAttributes.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RemoveSearchAttributes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RemoveSearchAttributes removes custom search attributes.
        /// > 
        /// > Returns NOT_FOUND status code if a Search Attribute with any of the specified names is not registered
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_RemoveSearchAttributesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func removeSearchAttributes<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Operatorservice_V1_OperatorService.Method.RemoveSearchAttributes.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListSearchAttributes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListSearchAttributes returns comprehensive information about search attributes.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_ListSearchAttributesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listSearchAttributes<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_ListSearchAttributesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_ListSearchAttributesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Operatorservice_V1_OperatorService.Method.ListSearchAttributes.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteNamespace synchronously deletes a namespace and asynchronously reclaims all namespace resources.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_DeleteNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_DeleteNamespaceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_DeleteNamespaceResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Operatorservice_V1_OperatorService.Method.DeleteNamespace.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AddOrUpdateRemoteCluster" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AddOrUpdateRemoteCluster adds or updates remote cluster.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func addOrUpdateRemoteCluster<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Operatorservice_V1_OperatorService.Method.AddOrUpdateRemoteCluster.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RemoveRemoteCluster" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RemoveRemoteCluster removes remote cluster.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_RemoveRemoteClusterResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func removeRemoteCluster<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Operatorservice_V1_OperatorService.Method.RemoveRemoteCluster.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListClusters" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListClusters returns information about Temporal clusters.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_ListClustersRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_ListClustersRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_ListClustersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listClusters<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_ListClustersRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_ListClustersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_ListClustersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_ListClustersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Operatorservice_V1_OperatorService.Method.ListClusters.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a registered Nexus endpoint by ID. The returned version can be used for optimistic updates.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_GetNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_GetNexusEndpointResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_GetNexusEndpointResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Operatorservice_V1_OperatorService.Method.GetNexusEndpoint.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a Nexus endpoint. This will fail if an endpoint with the same name is already registered with a status of
        /// > ALREADY_EXISTS.
        /// > Returns the created endpoint with its initial version. You may use this version for subsequent updates.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_CreateNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_CreateNexusEndpointResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_CreateNexusEndpointResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Operatorservice_V1_OperatorService.Method.CreateNexusEndpoint.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Optimistically update a Nexus endpoint based on provided version as obtained via the `GetNexusEndpoint` or
        /// > `ListNexusEndpointResponse` APIs. This will fail with a status of FAILED_PRECONDITION if the version does not
        /// > match.
        /// > Returns the updated endpoint with its updated version. You may use this version for subsequent updates. You don't
        /// > need to increment the version yourself. The server will increment the version for you after each update.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_UpdateNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Operatorservice_V1_OperatorService.Method.UpdateNexusEndpoint.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete an incoming Nexus service by ID.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_DeleteNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Operatorservice_V1_OperatorService.Method.DeleteNexusEndpoint.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListNexusEndpoints" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List all Nexus endpoints for the cluster, sorted by ID in ascending order. Set page_token in the request to the
        /// > next_page_token field of the previous response to get the next page of results. An empty next_page_token
        /// > indicates that there are no more results. During pagination, a newly added service with an ID lexicographically
        /// > earlier than the previous page's last endpoint's ID may be missed.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Operatorservice_V1_ListNexusEndpointsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listNexusEndpoints<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Operatorservice_V1_ListNexusEndpointsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_ListNexusEndpointsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Operatorservice_V1_OperatorService.Method.ListNexusEndpoints.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Temporal_Api_Operatorservice_V1_OperatorService.ClientProtocol {
    /// Call the "AddSearchAttributes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AddSearchAttributes add custom search attributes.
    /// > 
    /// > Returns ALREADY_EXISTS status code if a Search Attribute with any of the specified names already exists
    /// > Returns INTERNAL status code with temporal.api.errordetails.v1.SystemWorkflowFailure in Error Details if registration process fails,
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func addSearchAttributes<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_AddSearchAttributesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addSearchAttributes(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Operatorservice_V1_AddSearchAttributesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveSearchAttributes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RemoveSearchAttributes removes custom search attributes.
    /// > 
    /// > Returns NOT_FOUND status code if a Search Attribute with any of the specified names is not registered
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func removeSearchAttributes<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.removeSearchAttributes(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListSearchAttributes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListSearchAttributes returns comprehensive information about search attributes.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listSearchAttributes<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_ListSearchAttributesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listSearchAttributes(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Operatorservice_V1_ListSearchAttributesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteNamespace synchronously deletes a namespace and asynchronously reclaims all namespace resources.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteNamespace<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_DeleteNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteNamespace(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Operatorservice_V1_DeleteNamespaceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddOrUpdateRemoteCluster" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AddOrUpdateRemoteCluster adds or updates remote cluster.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func addOrUpdateRemoteCluster<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addOrUpdateRemoteCluster(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveRemoteCluster" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RemoveRemoteCluster removes remote cluster.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func removeRemoteCluster<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.removeRemoteCluster(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListClusters" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListClusters returns information about Temporal clusters.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_ListClustersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listClusters<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_ListClustersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_ListClustersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listClusters(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Operatorservice_V1_ListClustersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Operatorservice_V1_ListClustersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a registered Nexus endpoint by ID. The returned version can be used for optimistic updates.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNexusEndpoint<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_GetNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getNexusEndpoint(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Operatorservice_V1_GetNexusEndpointResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a Nexus endpoint. This will fail if an endpoint with the same name is already registered with a status of
    /// > ALREADY_EXISTS.
    /// > Returns the created endpoint with its initial version. You may use this version for subsequent updates.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createNexusEndpoint<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_CreateNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createNexusEndpoint(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Operatorservice_V1_CreateNexusEndpointResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Optimistically update a Nexus endpoint based on provided version as obtained via the `GetNexusEndpoint` or
    /// > `ListNexusEndpointResponse` APIs. This will fail with a status of FAILED_PRECONDITION if the version does not
    /// > match.
    /// > Returns the updated endpoint with its updated version. You may use this version for subsequent updates. You don't
    /// > need to increment the version yourself. The server will increment the version for you after each update.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateNexusEndpoint<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateNexusEndpoint(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete an incoming Nexus service by ID.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteNexusEndpoint<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteNexusEndpoint(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListNexusEndpoints" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List all Nexus endpoints for the cluster, sorted by ID in ascending order. Set page_token in the request to the
    /// > next_page_token field of the previous response to get the next page of results. An empty next_page_token
    /// > indicates that there are no more results. During pagination, a newly added service with an ID lexicographically
    /// > earlier than the previous page's last endpoint's ID may be missed.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listNexusEndpoints<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_ListNexusEndpointsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listNexusEndpoints(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Operatorservice_V1_ListNexusEndpointsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Temporal_Api_Operatorservice_V1_OperatorService.ClientProtocol {
    /// Call the "AddSearchAttributes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AddSearchAttributes add custom search attributes.
    /// > 
    /// > Returns ALREADY_EXISTS status code if a Search Attribute with any of the specified names already exists
    /// > Returns INTERNAL status code with temporal.api.errordetails.v1.SystemWorkflowFailure in Error Details if registration process fails,
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func addSearchAttributes<Result>(
        _ message: Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_AddSearchAttributesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_AddSearchAttributesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addSearchAttributes(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveSearchAttributes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RemoveSearchAttributes removes custom search attributes.
    /// > 
    /// > Returns NOT_FOUND status code if a Search Attribute with any of the specified names is not registered
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func removeSearchAttributes<Result>(
        _ message: Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_RemoveSearchAttributesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.removeSearchAttributes(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListSearchAttributes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListSearchAttributes returns comprehensive information about search attributes.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listSearchAttributes<Result>(
        _ message: Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_ListSearchAttributesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_ListSearchAttributesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listSearchAttributes(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteNamespace synchronously deletes a namespace and asynchronously reclaims all namespace resources.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteNamespace<Result>(
        _ message: Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_DeleteNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_DeleteNamespaceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteNamespace(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddOrUpdateRemoteCluster" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AddOrUpdateRemoteCluster adds or updates remote cluster.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func addOrUpdateRemoteCluster<Result>(
        _ message: Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_AddOrUpdateRemoteClusterRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addOrUpdateRemoteCluster(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveRemoteCluster" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RemoveRemoteCluster removes remote cluster.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func removeRemoteCluster<Result>(
        _ message: Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_RemoveRemoteClusterRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.removeRemoteCluster(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListClusters" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListClusters returns information about Temporal clusters.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listClusters<Result>(
        _ message: Temporal_Api_Operatorservice_V1_ListClustersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_ListClustersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_ListClustersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listClusters(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a registered Nexus endpoint by ID. The returned version can be used for optimistic updates.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNexusEndpoint<Result>(
        _ message: Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_GetNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_GetNexusEndpointRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getNexusEndpoint(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a Nexus endpoint. This will fail if an endpoint with the same name is already registered with a status of
    /// > ALREADY_EXISTS.
    /// > Returns the created endpoint with its initial version. You may use this version for subsequent updates.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createNexusEndpoint<Result>(
        _ message: Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_CreateNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_CreateNexusEndpointRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createNexusEndpoint(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Optimistically update a Nexus endpoint based on provided version as obtained via the `GetNexusEndpoint` or
    /// > `ListNexusEndpointResponse` APIs. This will fail with a status of FAILED_PRECONDITION if the version does not
    /// > match.
    /// > Returns the updated endpoint with its updated version. You may use this version for subsequent updates. You don't
    /// > need to increment the version yourself. The server will increment the version for you after each update.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateNexusEndpoint<Result>(
        _ message: Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_UpdateNexusEndpointRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateNexusEndpoint(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete an incoming Nexus service by ID.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteNexusEndpoint<Result>(
        _ message: Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_DeleteNexusEndpointRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteNexusEndpoint(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListNexusEndpoints" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List all Nexus endpoints for the cluster, sorted by ID in ascending order. Set page_token in the request to the
    /// > next_page_token field of the previous response to get the next page of results. An empty next_page_token
    /// > indicates that there are no more results. During pagination, a newly added service with an ID lexicographically
    /// > earlier than the previous page's last endpoint's ID may be missed.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listNexusEndpoints<Result>(
        _ message: Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Operatorservice_V1_ListNexusEndpointsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Operatorservice_V1_ListNexusEndpointsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listNexusEndpoints(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}