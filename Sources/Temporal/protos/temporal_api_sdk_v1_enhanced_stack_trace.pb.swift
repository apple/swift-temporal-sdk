// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/sdk/v1/enhanced_stack_trace.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Internal structure used to create worker stack traces with references to code.
package struct Temporal_Api_Sdk_V1_EnhancedStackTrace: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Information pertaining to the SDK that the trace has been captured from.
  package var sdk: Temporal_Api_Sdk_V1_StackTraceSDKInfo {
    get {return _sdk ?? Temporal_Api_Sdk_V1_StackTraceSDKInfo()}
    set {_sdk = newValue}
  }
  /// Returns true if `sdk` has been explicitly set.
  package var hasSdk: Bool {return self._sdk != nil}
  /// Clears the value of `sdk`. Subsequent reads from it will return its default value.
  package mutating func clearSdk() {self._sdk = nil}

  /// Mapping of file path to file contents.
  package var sources: Dictionary<String,Temporal_Api_Sdk_V1_StackTraceFileSlice> = [:]

  /// Collection of stacks captured.
  package var stacks: [Temporal_Api_Sdk_V1_StackTrace] = []

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _sdk: Temporal_Api_Sdk_V1_StackTraceSDKInfo? = nil
}

/// Information pertaining to the SDK that the trace has been captured from.
/// (-- api-linter: core::0123::resource-annotation=disabled
///     aip.dev/not-precedent: Naming SDK version is optional. --)
package struct Temporal_Api_Sdk_V1_StackTraceSDKInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the SDK
  package var name: String = String()

  /// Version string of the SDK
  package var version: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// "Slice" of a file starting at line_offset -- a line offset and code fragment corresponding to the worker's stack.
package struct Temporal_Api_Sdk_V1_StackTraceFileSlice: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Only used (possibly) to trim the file without breaking syntax highlighting. This is not optional, unlike
  /// the `line` property of a `StackTraceFileLocation`.
  /// (-- api-linter: core::0141::forbidden-types=disabled
  ///     aip.dev/not-precedent: These really shouldn't have negative values. --)
  package var lineOffset: UInt32 = 0

  /// Slice of a file with the respective OS-specific line terminator.
  package var content: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// More specific location details of a file: its path, precise line and column numbers if applicable, and function name if available.
/// In essence, a pointer to a location in a file
package struct Temporal_Api_Sdk_V1_StackTraceFileLocation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Path to source file (absolute or relative).
  /// If the paths are relative, ensure that they are all relative to the same root.
  package var filePath: String = String()

  /// Optional; If possible, SDK should send this -- this is required for displaying the code location.
  /// If not provided, set to -1.
  package var line: Int32 = 0

  /// Optional; if possible, SDK should send this.
  /// If not provided, set to -1.
  package var column: Int32 = 0

  /// Function name this line belongs to, if applicable.
  /// Used for falling back to stack trace view.
  package var functionName: String = String()

  /// Flag to communicate whether a location should be hidden by default in the stack view.
  package var internalCode: Bool = false

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// Collection of FileLocation messages from a single stack.
package struct Temporal_Api_Sdk_V1_StackTrace: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Collection of `FileLocation`s, each for a stack frame that comprise a stack trace.
  package var locations: [Temporal_Api_Sdk_V1_StackTraceFileLocation] = []

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.sdk.v1"

extension Temporal_Api_Sdk_V1_EnhancedStackTrace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".EnhancedStackTrace"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sdk\0\u{1}sources\0\u{1}stacks\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sdk) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Temporal_Api_Sdk_V1_StackTraceFileSlice>.self, value: &self.sources) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.stacks) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sdk {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.sources.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Temporal_Api_Sdk_V1_StackTraceFileSlice>.self, value: self.sources, fieldNumber: 2)
    }
    if !self.stacks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stacks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Sdk_V1_EnhancedStackTrace, rhs: Temporal_Api_Sdk_V1_EnhancedStackTrace) -> Bool {
    if lhs._sdk != rhs._sdk {return false}
    if lhs.sources != rhs.sources {return false}
    if lhs.stacks != rhs.stacks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Sdk_V1_StackTraceSDKInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".StackTraceSDKInfo"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}version\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Sdk_V1_StackTraceSDKInfo, rhs: Temporal_Api_Sdk_V1_StackTraceSDKInfo) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Sdk_V1_StackTraceFileSlice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".StackTraceFileSlice"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}line_offset\0\u{1}content\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.lineOffset) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lineOffset != 0 {
      try visitor.visitSingularUInt32Field(value: self.lineOffset, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Sdk_V1_StackTraceFileSlice, rhs: Temporal_Api_Sdk_V1_StackTraceFileSlice) -> Bool {
    if lhs.lineOffset != rhs.lineOffset {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Sdk_V1_StackTraceFileLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".StackTraceFileLocation"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}file_path\0\u{1}line\0\u{1}column\0\u{3}function_name\0\u{3}internal_code\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.filePath) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.line) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.column) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.functionName) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.internalCode) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filePath.isEmpty {
      try visitor.visitSingularStringField(value: self.filePath, fieldNumber: 1)
    }
    if self.line != 0 {
      try visitor.visitSingularInt32Field(value: self.line, fieldNumber: 2)
    }
    if self.column != 0 {
      try visitor.visitSingularInt32Field(value: self.column, fieldNumber: 3)
    }
    if !self.functionName.isEmpty {
      try visitor.visitSingularStringField(value: self.functionName, fieldNumber: 4)
    }
    if self.internalCode != false {
      try visitor.visitSingularBoolField(value: self.internalCode, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Sdk_V1_StackTraceFileLocation, rhs: Temporal_Api_Sdk_V1_StackTraceFileLocation) -> Bool {
    if lhs.filePath != rhs.filePath {return false}
    if lhs.line != rhs.line {return false}
    if lhs.column != rhs.column {return false}
    if lhs.functionName != rhs.functionName {return false}
    if lhs.internalCode != rhs.internalCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Sdk_V1_StackTrace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".StackTrace"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}locations\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.locations) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.locations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.locations, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Sdk_V1_StackTrace, rhs: Temporal_Api_Sdk_V1_StackTrace) -> Bool {
    if lhs.locations != rhs.locations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
