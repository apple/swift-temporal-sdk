// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/update/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies client's intent to wait for Update results.
package struct Temporal_Api_Update_V1_WaitPolicy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Indicates the Update lifecycle stage that the Update must reach before
  /// API call is returned.
  /// NOTE: This field works together with API call timeout which is limited by
  /// server timeout (maximum wait time). If server timeout is expired before
  /// user specified timeout, API call returns even if specified stage is not reached.
  package var lifecycleStage: Temporal_Api_Enums_V1_UpdateWorkflowExecutionLifecycleStage = .unspecified

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// The data needed by a client to refer to a previously invoked Workflow Update.
package struct Temporal_Api_Update_V1_UpdateRef: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var workflowExecution: Temporal_Api_Common_V1_WorkflowExecution {
    get {return _workflowExecution ?? Temporal_Api_Common_V1_WorkflowExecution()}
    set {_workflowExecution = newValue}
  }
  /// Returns true if `workflowExecution` has been explicitly set.
  package var hasWorkflowExecution: Bool {return self._workflowExecution != nil}
  /// Clears the value of `workflowExecution`. Subsequent reads from it will return its default value.
  package mutating func clearWorkflowExecution() {self._workflowExecution = nil}

  package var updateID: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _workflowExecution: Temporal_Api_Common_V1_WorkflowExecution? = nil
}

/// The outcome of a Workflow Update: success or failure.
package struct Temporal_Api_Update_V1_Outcome: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var value: Temporal_Api_Update_V1_Outcome.OneOf_Value? = nil

  package var success: Temporal_Api_Common_V1_Payloads {
    get {
      if case .success(let v)? = value {return v}
      return Temporal_Api_Common_V1_Payloads()
    }
    set {value = .success(newValue)}
  }

  package var failure: Temporal_Api_Failure_V1_Failure {
    get {
      if case .failure(let v)? = value {return v}
      return Temporal_Api_Failure_V1_Failure()
    }
    set {value = .failure(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum OneOf_Value: Equatable, Sendable {
    case success(Temporal_Api_Common_V1_Payloads)
    case failure(Temporal_Api_Failure_V1_Failure)

  }

  package init() {}
}

/// Metadata about a Workflow Update.
package struct Temporal_Api_Update_V1_Meta: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// An ID with workflow-scoped uniqueness for this Update.
  package var updateID: String = String()

  /// A string identifying the agent that requested this Update.
  package var identity: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct Temporal_Api_Update_V1_Input: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Headers that are passed with the Update from the requesting entity.
  /// These can include things like auth or tracing tokens.
  package var header: Temporal_Api_Common_V1_Header {
    get {return _header ?? Temporal_Api_Common_V1_Header()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  package var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  package mutating func clearHeader() {self._header = nil}

  /// The name of the Update handler to invoke on the target Workflow.
  package var name: String = String()

  /// The arguments to pass to the named Update handler.
  package var args: Temporal_Api_Common_V1_Payloads {
    get {return _args ?? Temporal_Api_Common_V1_Payloads()}
    set {_args = newValue}
  }
  /// Returns true if `args` has been explicitly set.
  package var hasArgs: Bool {return self._args != nil}
  /// Clears the value of `args`. Subsequent reads from it will return its default value.
  package mutating func clearArgs() {self._args = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _header: Temporal_Api_Common_V1_Header? = nil
  fileprivate var _args: Temporal_Api_Common_V1_Payloads? = nil
}

/// The client request that triggers a Workflow Update.
package struct Temporal_Api_Update_V1_Request: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var meta: Temporal_Api_Update_V1_Meta {
    get {return _meta ?? Temporal_Api_Update_V1_Meta()}
    set {_meta = newValue}
  }
  /// Returns true if `meta` has been explicitly set.
  package var hasMeta: Bool {return self._meta != nil}
  /// Clears the value of `meta`. Subsequent reads from it will return its default value.
  package mutating func clearMeta() {self._meta = nil}

  package var input: Temporal_Api_Update_V1_Input {
    get {return _input ?? Temporal_Api_Update_V1_Input()}
    set {_input = newValue}
  }
  /// Returns true if `input` has been explicitly set.
  package var hasInput: Bool {return self._input != nil}
  /// Clears the value of `input`. Subsequent reads from it will return its default value.
  package mutating func clearInput() {self._input = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _meta: Temporal_Api_Update_V1_Meta? = nil
  fileprivate var _input: Temporal_Api_Update_V1_Input? = nil
}

/// An Update protocol message indicating that a Workflow Update has been rejected.
package struct Temporal_Api_Update_V1_Rejection: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var rejectedRequestMessageID: String = String()

  package var rejectedRequestSequencingEventID: Int64 = 0

  package var rejectedRequest: Temporal_Api_Update_V1_Request {
    get {return _rejectedRequest ?? Temporal_Api_Update_V1_Request()}
    set {_rejectedRequest = newValue}
  }
  /// Returns true if `rejectedRequest` has been explicitly set.
  package var hasRejectedRequest: Bool {return self._rejectedRequest != nil}
  /// Clears the value of `rejectedRequest`. Subsequent reads from it will return its default value.
  package mutating func clearRejectedRequest() {self._rejectedRequest = nil}

  package var failure: Temporal_Api_Failure_V1_Failure {
    get {return _failure ?? Temporal_Api_Failure_V1_Failure()}
    set {_failure = newValue}
  }
  /// Returns true if `failure` has been explicitly set.
  package var hasFailure: Bool {return self._failure != nil}
  /// Clears the value of `failure`. Subsequent reads from it will return its default value.
  package mutating func clearFailure() {self._failure = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _rejectedRequest: Temporal_Api_Update_V1_Request? = nil
  fileprivate var _failure: Temporal_Api_Failure_V1_Failure? = nil
}

/// An Update protocol message indicating that a Workflow Update has
/// been accepted (i.e. passed the worker-side validation phase).
package struct Temporal_Api_Update_V1_Acceptance: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var acceptedRequestMessageID: String = String()

  package var acceptedRequestSequencingEventID: Int64 = 0

  package var acceptedRequest: Temporal_Api_Update_V1_Request {
    get {return _acceptedRequest ?? Temporal_Api_Update_V1_Request()}
    set {_acceptedRequest = newValue}
  }
  /// Returns true if `acceptedRequest` has been explicitly set.
  package var hasAcceptedRequest: Bool {return self._acceptedRequest != nil}
  /// Clears the value of `acceptedRequest`. Subsequent reads from it will return its default value.
  package mutating func clearAcceptedRequest() {self._acceptedRequest = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _acceptedRequest: Temporal_Api_Update_V1_Request? = nil
}

/// An Update protocol message indicating that a Workflow Update has
/// completed with the contained outcome.
package struct Temporal_Api_Update_V1_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var meta: Temporal_Api_Update_V1_Meta {
    get {return _meta ?? Temporal_Api_Update_V1_Meta()}
    set {_meta = newValue}
  }
  /// Returns true if `meta` has been explicitly set.
  package var hasMeta: Bool {return self._meta != nil}
  /// Clears the value of `meta`. Subsequent reads from it will return its default value.
  package mutating func clearMeta() {self._meta = nil}

  package var outcome: Temporal_Api_Update_V1_Outcome {
    get {return _outcome ?? Temporal_Api_Update_V1_Outcome()}
    set {_outcome = newValue}
  }
  /// Returns true if `outcome` has been explicitly set.
  package var hasOutcome: Bool {return self._outcome != nil}
  /// Clears the value of `outcome`. Subsequent reads from it will return its default value.
  package mutating func clearOutcome() {self._outcome = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _meta: Temporal_Api_Update_V1_Meta? = nil
  fileprivate var _outcome: Temporal_Api_Update_V1_Outcome? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.update.v1"

extension Temporal_Api_Update_V1_WaitPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WaitPolicy"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}lifecycle_stage\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.lifecycleStage) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lifecycleStage != .unspecified {
      try visitor.visitSingularEnumField(value: self.lifecycleStage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Update_V1_WaitPolicy, rhs: Temporal_Api_Update_V1_WaitPolicy) -> Bool {
    if lhs.lifecycleStage != rhs.lifecycleStage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Update_V1_UpdateRef: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".UpdateRef"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}workflow_execution\0\u{3}update_id\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._workflowExecution) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.updateID) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._workflowExecution {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.updateID.isEmpty {
      try visitor.visitSingularStringField(value: self.updateID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Update_V1_UpdateRef, rhs: Temporal_Api_Update_V1_UpdateRef) -> Bool {
    if lhs._workflowExecution != rhs._workflowExecution {return false}
    if lhs.updateID != rhs.updateID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Update_V1_Outcome: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Outcome"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}success\0\u{1}failure\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Temporal_Api_Common_V1_Payloads?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .success(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .success(v)
        }
      }()
      case 2: try {
        var v: Temporal_Api_Failure_V1_Failure?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .failure(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .failure(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .success?: try {
      guard case .success(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .failure?: try {
      guard case .failure(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Update_V1_Outcome, rhs: Temporal_Api_Update_V1_Outcome) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Update_V1_Meta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Meta"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}update_id\0\u{1}identity\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.updateID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.identity) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.updateID.isEmpty {
      try visitor.visitSingularStringField(value: self.updateID, fieldNumber: 1)
    }
    if !self.identity.isEmpty {
      try visitor.visitSingularStringField(value: self.identity, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Update_V1_Meta, rhs: Temporal_Api_Update_V1_Meta) -> Bool {
    if lhs.updateID != rhs.updateID {return false}
    if lhs.identity != rhs.identity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Update_V1_Input: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Input"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}header\0\u{1}name\0\u{1}args\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._args) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try { if let v = self._args {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Update_V1_Input, rhs: Temporal_Api_Update_V1_Input) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.name != rhs.name {return false}
    if lhs._args != rhs._args {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Update_V1_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Request"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}meta\0\u{1}input\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._meta) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._input) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._meta {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._input {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Update_V1_Request, rhs: Temporal_Api_Update_V1_Request) -> Bool {
    if lhs._meta != rhs._meta {return false}
    if lhs._input != rhs._input {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Update_V1_Rejection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Rejection"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}rejected_request_message_id\0\u{3}rejected_request_sequencing_event_id\0\u{3}rejected_request\0\u{1}failure\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.rejectedRequestMessageID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.rejectedRequestSequencingEventID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._rejectedRequest) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._failure) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rejectedRequestMessageID.isEmpty {
      try visitor.visitSingularStringField(value: self.rejectedRequestMessageID, fieldNumber: 1)
    }
    if self.rejectedRequestSequencingEventID != 0 {
      try visitor.visitSingularInt64Field(value: self.rejectedRequestSequencingEventID, fieldNumber: 2)
    }
    try { if let v = self._rejectedRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._failure {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Update_V1_Rejection, rhs: Temporal_Api_Update_V1_Rejection) -> Bool {
    if lhs.rejectedRequestMessageID != rhs.rejectedRequestMessageID {return false}
    if lhs.rejectedRequestSequencingEventID != rhs.rejectedRequestSequencingEventID {return false}
    if lhs._rejectedRequest != rhs._rejectedRequest {return false}
    if lhs._failure != rhs._failure {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Update_V1_Acceptance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Acceptance"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}accepted_request_message_id\0\u{3}accepted_request_sequencing_event_id\0\u{3}accepted_request\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.acceptedRequestMessageID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.acceptedRequestSequencingEventID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._acceptedRequest) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.acceptedRequestMessageID.isEmpty {
      try visitor.visitSingularStringField(value: self.acceptedRequestMessageID, fieldNumber: 1)
    }
    if self.acceptedRequestSequencingEventID != 0 {
      try visitor.visitSingularInt64Field(value: self.acceptedRequestSequencingEventID, fieldNumber: 2)
    }
    try { if let v = self._acceptedRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Update_V1_Acceptance, rhs: Temporal_Api_Update_V1_Acceptance) -> Bool {
    if lhs.acceptedRequestMessageID != rhs.acceptedRequestMessageID {return false}
    if lhs.acceptedRequestSequencingEventID != rhs.acceptedRequestSequencingEventID {return false}
    if lhs._acceptedRequest != rhs._acceptedRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Update_V1_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Response"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}meta\0\u{1}outcome\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._meta) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._outcome) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._meta {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._outcome {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Update_V1_Response, rhs: Temporal_Api_Update_V1_Response) -> Bool {
    if lhs._meta != rhs._meta {return false}
    if lhs._outcome != rhs._outcome {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
