// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/sdk/core/external_data/external_data.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package struct Coresdk_ExternalData_LocalActivityMarkerData: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var seq: UInt32 = 0

  /// The number of attempts at execution before we recorded this result. Typically starts at 1,
  /// but it is possible to start at a higher number when backing off using a timer.
  package var attempt: UInt32 = 0

  package var activityID: String = String()

  package var activityType: String = String()

  /// You can think of this as "perceived completion time". It is the time the local activity thought
  /// it was when it completed. Which could be different from wall-clock time because of workflow
  /// replay. It's the WFT start time + the LA's runtime
  package var completeTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _completeTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_completeTime = newValue}
  }
  /// Returns true if `completeTime` has been explicitly set.
  package var hasCompleteTime: Bool {return self._completeTime != nil}
  /// Clears the value of `completeTime`. Subsequent reads from it will return its default value.
  package mutating func clearCompleteTime() {self._completeTime = nil}

  /// If set, this local activity conceptually is retrying after the specified backoff.
  /// Implementation wise, they are really two different LA machines, but with the same type & input.
  /// The retry starts with an attempt number > 1.
  package var backoff: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _backoff ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_backoff = newValue}
  }
  /// Returns true if `backoff` has been explicitly set.
  package var hasBackoff: Bool {return self._backoff != nil}
  /// Clears the value of `backoff`. Subsequent reads from it will return its default value.
  package mutating func clearBackoff() {self._backoff = nil}

  /// The time the LA was originally scheduled (wall clock time). This is used to track
  /// schedule-to-close timeouts when timer-based backoffs are used
  package var originalScheduleTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _originalScheduleTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_originalScheduleTime = newValue}
  }
  /// Returns true if `originalScheduleTime` has been explicitly set.
  package var hasOriginalScheduleTime: Bool {return self._originalScheduleTime != nil}
  /// Clears the value of `originalScheduleTime`. Subsequent reads from it will return its default value.
  package mutating func clearOriginalScheduleTime() {self._originalScheduleTime = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _completeTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _backoff: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _originalScheduleTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

package struct Coresdk_ExternalData_PatchedMarkerData: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The patch id
  package var id: String = String()

  /// Whether or not the patch is marked deprecated.
  package var deprecated: Bool = false

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "coresdk.external_data"

extension Coresdk_ExternalData_LocalActivityMarkerData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".LocalActivityMarkerData"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}seq\0\u{1}attempt\0\u{3}activity_id\0\u{3}activity_type\0\u{3}complete_time\0\u{1}backoff\0\u{3}original_schedule_time\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.seq) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.attempt) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.activityID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.activityType) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._completeTime) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._backoff) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._originalScheduleTime) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.seq != 0 {
      try visitor.visitSingularUInt32Field(value: self.seq, fieldNumber: 1)
    }
    if self.attempt != 0 {
      try visitor.visitSingularUInt32Field(value: self.attempt, fieldNumber: 2)
    }
    if !self.activityID.isEmpty {
      try visitor.visitSingularStringField(value: self.activityID, fieldNumber: 3)
    }
    if !self.activityType.isEmpty {
      try visitor.visitSingularStringField(value: self.activityType, fieldNumber: 4)
    }
    try { if let v = self._completeTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._backoff {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._originalScheduleTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Coresdk_ExternalData_LocalActivityMarkerData, rhs: Coresdk_ExternalData_LocalActivityMarkerData) -> Bool {
    if lhs.seq != rhs.seq {return false}
    if lhs.attempt != rhs.attempt {return false}
    if lhs.activityID != rhs.activityID {return false}
    if lhs.activityType != rhs.activityType {return false}
    if lhs._completeTime != rhs._completeTime {return false}
    if lhs._backoff != rhs._backoff {return false}
    if lhs._originalScheduleTime != rhs._originalScheduleTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Coresdk_ExternalData_PatchedMarkerData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".PatchedMarkerData"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}deprecated\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.deprecated) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.deprecated != false {
      try visitor.visitSingularBoolField(value: self.deprecated, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Coresdk_ExternalData_PatchedMarkerData, rhs: Coresdk_ExternalData_PatchedMarkerData) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.deprecated != rhs.deprecated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
