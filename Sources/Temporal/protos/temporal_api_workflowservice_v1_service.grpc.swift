// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/workflowservice/v1/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

package import GRPCCore
internal import GRPCProtobuf

// MARK: - temporal.api.workflowservice.v1.WorkflowService

/// Namespace containing generated types for the "temporal.api.workflowservice.v1.WorkflowService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
package enum Temporal_Api_Workflowservice_V1_WorkflowService {
    /// Service descriptor for the "temporal.api.workflowservice.v1.WorkflowService" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "RegisterNamespace" metadata.
        package enum RegisterNamespace {
            /// Request type for "RegisterNamespace".
            package typealias Input = Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest
            /// Response type for "RegisterNamespace".
            package typealias Output = Temporal_Api_Workflowservice_V1_RegisterNamespaceResponse
            /// Descriptor for "RegisterNamespace".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RegisterNamespace"
            )
        }
        /// Namespace for "DescribeNamespace" metadata.
        package enum DescribeNamespace {
            /// Request type for "DescribeNamespace".
            package typealias Input = Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest
            /// Response type for "DescribeNamespace".
            package typealias Output = Temporal_Api_Workflowservice_V1_DescribeNamespaceResponse
            /// Descriptor for "DescribeNamespace".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DescribeNamespace"
            )
        }
        /// Namespace for "ListNamespaces" metadata.
        package enum ListNamespaces {
            /// Request type for "ListNamespaces".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListNamespacesRequest
            /// Response type for "ListNamespaces".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListNamespacesResponse
            /// Descriptor for "ListNamespaces".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListNamespaces"
            )
        }
        /// Namespace for "UpdateNamespace" metadata.
        package enum UpdateNamespace {
            /// Request type for "UpdateNamespace".
            package typealias Input = Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest
            /// Response type for "UpdateNamespace".
            package typealias Output = Temporal_Api_Workflowservice_V1_UpdateNamespaceResponse
            /// Descriptor for "UpdateNamespace".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "UpdateNamespace"
            )
        }
        /// Namespace for "DeprecateNamespace" metadata.
        package enum DeprecateNamespace {
            /// Request type for "DeprecateNamespace".
            package typealias Input = Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest
            /// Response type for "DeprecateNamespace".
            package typealias Output = Temporal_Api_Workflowservice_V1_DeprecateNamespaceResponse
            /// Descriptor for "DeprecateNamespace".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DeprecateNamespace"
            )
        }
        /// Namespace for "StartWorkflowExecution" metadata.
        package enum StartWorkflowExecution {
            /// Request type for "StartWorkflowExecution".
            package typealias Input = Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest
            /// Response type for "StartWorkflowExecution".
            package typealias Output = Temporal_Api_Workflowservice_V1_StartWorkflowExecutionResponse
            /// Descriptor for "StartWorkflowExecution".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "StartWorkflowExecution"
            )
        }
        /// Namespace for "ExecuteMultiOperation" metadata.
        package enum ExecuteMultiOperation {
            /// Request type for "ExecuteMultiOperation".
            package typealias Input = Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest
            /// Response type for "ExecuteMultiOperation".
            package typealias Output = Temporal_Api_Workflowservice_V1_ExecuteMultiOperationResponse
            /// Descriptor for "ExecuteMultiOperation".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ExecuteMultiOperation"
            )
        }
        /// Namespace for "GetWorkflowExecutionHistory" metadata.
        package enum GetWorkflowExecutionHistory {
            /// Request type for "GetWorkflowExecutionHistory".
            package typealias Input = Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest
            /// Response type for "GetWorkflowExecutionHistory".
            package typealias Output = Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryResponse
            /// Descriptor for "GetWorkflowExecutionHistory".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "GetWorkflowExecutionHistory"
            )
        }
        /// Namespace for "GetWorkflowExecutionHistoryReverse" metadata.
        package enum GetWorkflowExecutionHistoryReverse {
            /// Request type for "GetWorkflowExecutionHistoryReverse".
            package typealias Input = Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest
            /// Response type for "GetWorkflowExecutionHistoryReverse".
            package typealias Output = Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseResponse
            /// Descriptor for "GetWorkflowExecutionHistoryReverse".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "GetWorkflowExecutionHistoryReverse"
            )
        }
        /// Namespace for "PollWorkflowTaskQueue" metadata.
        package enum PollWorkflowTaskQueue {
            /// Request type for "PollWorkflowTaskQueue".
            package typealias Input = Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest
            /// Response type for "PollWorkflowTaskQueue".
            package typealias Output = Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueResponse
            /// Descriptor for "PollWorkflowTaskQueue".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "PollWorkflowTaskQueue"
            )
        }
        /// Namespace for "RespondWorkflowTaskCompleted" metadata.
        package enum RespondWorkflowTaskCompleted {
            /// Request type for "RespondWorkflowTaskCompleted".
            package typealias Input = Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest
            /// Response type for "RespondWorkflowTaskCompleted".
            package typealias Output = Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedResponse
            /// Descriptor for "RespondWorkflowTaskCompleted".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RespondWorkflowTaskCompleted"
            )
        }
        /// Namespace for "RespondWorkflowTaskFailed" metadata.
        package enum RespondWorkflowTaskFailed {
            /// Request type for "RespondWorkflowTaskFailed".
            package typealias Input = Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest
            /// Response type for "RespondWorkflowTaskFailed".
            package typealias Output = Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedResponse
            /// Descriptor for "RespondWorkflowTaskFailed".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RespondWorkflowTaskFailed"
            )
        }
        /// Namespace for "PollActivityTaskQueue" metadata.
        package enum PollActivityTaskQueue {
            /// Request type for "PollActivityTaskQueue".
            package typealias Input = Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest
            /// Response type for "PollActivityTaskQueue".
            package typealias Output = Temporal_Api_Workflowservice_V1_PollActivityTaskQueueResponse
            /// Descriptor for "PollActivityTaskQueue".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "PollActivityTaskQueue"
            )
        }
        /// Namespace for "RecordActivityTaskHeartbeat" metadata.
        package enum RecordActivityTaskHeartbeat {
            /// Request type for "RecordActivityTaskHeartbeat".
            package typealias Input = Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest
            /// Response type for "RecordActivityTaskHeartbeat".
            package typealias Output = Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatResponse
            /// Descriptor for "RecordActivityTaskHeartbeat".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RecordActivityTaskHeartbeat"
            )
        }
        /// Namespace for "RecordActivityTaskHeartbeatById" metadata.
        package enum RecordActivityTaskHeartbeatById {
            /// Request type for "RecordActivityTaskHeartbeatById".
            package typealias Input = Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest
            /// Response type for "RecordActivityTaskHeartbeatById".
            package typealias Output = Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdResponse
            /// Descriptor for "RecordActivityTaskHeartbeatById".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RecordActivityTaskHeartbeatById"
            )
        }
        /// Namespace for "RespondActivityTaskCompleted" metadata.
        package enum RespondActivityTaskCompleted {
            /// Request type for "RespondActivityTaskCompleted".
            package typealias Input = Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest
            /// Response type for "RespondActivityTaskCompleted".
            package typealias Output = Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedResponse
            /// Descriptor for "RespondActivityTaskCompleted".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RespondActivityTaskCompleted"
            )
        }
        /// Namespace for "RespondActivityTaskCompletedById" metadata.
        package enum RespondActivityTaskCompletedById {
            /// Request type for "RespondActivityTaskCompletedById".
            package typealias Input = Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest
            /// Response type for "RespondActivityTaskCompletedById".
            package typealias Output = Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdResponse
            /// Descriptor for "RespondActivityTaskCompletedById".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RespondActivityTaskCompletedById"
            )
        }
        /// Namespace for "RespondActivityTaskFailed" metadata.
        package enum RespondActivityTaskFailed {
            /// Request type for "RespondActivityTaskFailed".
            package typealias Input = Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest
            /// Response type for "RespondActivityTaskFailed".
            package typealias Output = Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedResponse
            /// Descriptor for "RespondActivityTaskFailed".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RespondActivityTaskFailed"
            )
        }
        /// Namespace for "RespondActivityTaskFailedById" metadata.
        package enum RespondActivityTaskFailedById {
            /// Request type for "RespondActivityTaskFailedById".
            package typealias Input = Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest
            /// Response type for "RespondActivityTaskFailedById".
            package typealias Output = Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdResponse
            /// Descriptor for "RespondActivityTaskFailedById".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RespondActivityTaskFailedById"
            )
        }
        /// Namespace for "RespondActivityTaskCanceled" metadata.
        package enum RespondActivityTaskCanceled {
            /// Request type for "RespondActivityTaskCanceled".
            package typealias Input = Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest
            /// Response type for "RespondActivityTaskCanceled".
            package typealias Output = Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledResponse
            /// Descriptor for "RespondActivityTaskCanceled".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RespondActivityTaskCanceled"
            )
        }
        /// Namespace for "RespondActivityTaskCanceledById" metadata.
        package enum RespondActivityTaskCanceledById {
            /// Request type for "RespondActivityTaskCanceledById".
            package typealias Input = Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest
            /// Response type for "RespondActivityTaskCanceledById".
            package typealias Output = Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdResponse
            /// Descriptor for "RespondActivityTaskCanceledById".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RespondActivityTaskCanceledById"
            )
        }
        /// Namespace for "RequestCancelWorkflowExecution" metadata.
        package enum RequestCancelWorkflowExecution {
            /// Request type for "RequestCancelWorkflowExecution".
            package typealias Input = Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest
            /// Response type for "RequestCancelWorkflowExecution".
            package typealias Output = Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionResponse
            /// Descriptor for "RequestCancelWorkflowExecution".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RequestCancelWorkflowExecution"
            )
        }
        /// Namespace for "SignalWorkflowExecution" metadata.
        package enum SignalWorkflowExecution {
            /// Request type for "SignalWorkflowExecution".
            package typealias Input = Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest
            /// Response type for "SignalWorkflowExecution".
            package typealias Output = Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionResponse
            /// Descriptor for "SignalWorkflowExecution".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "SignalWorkflowExecution"
            )
        }
        /// Namespace for "SignalWithStartWorkflowExecution" metadata.
        package enum SignalWithStartWorkflowExecution {
            /// Request type for "SignalWithStartWorkflowExecution".
            package typealias Input = Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest
            /// Response type for "SignalWithStartWorkflowExecution".
            package typealias Output = Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionResponse
            /// Descriptor for "SignalWithStartWorkflowExecution".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "SignalWithStartWorkflowExecution"
            )
        }
        /// Namespace for "ResetWorkflowExecution" metadata.
        package enum ResetWorkflowExecution {
            /// Request type for "ResetWorkflowExecution".
            package typealias Input = Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest
            /// Response type for "ResetWorkflowExecution".
            package typealias Output = Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionResponse
            /// Descriptor for "ResetWorkflowExecution".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ResetWorkflowExecution"
            )
        }
        /// Namespace for "TerminateWorkflowExecution" metadata.
        package enum TerminateWorkflowExecution {
            /// Request type for "TerminateWorkflowExecution".
            package typealias Input = Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest
            /// Response type for "TerminateWorkflowExecution".
            package typealias Output = Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionResponse
            /// Descriptor for "TerminateWorkflowExecution".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "TerminateWorkflowExecution"
            )
        }
        /// Namespace for "DeleteWorkflowExecution" metadata.
        package enum DeleteWorkflowExecution {
            /// Request type for "DeleteWorkflowExecution".
            package typealias Input = Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest
            /// Response type for "DeleteWorkflowExecution".
            package typealias Output = Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionResponse
            /// Descriptor for "DeleteWorkflowExecution".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DeleteWorkflowExecution"
            )
        }
        /// Namespace for "ListOpenWorkflowExecutions" metadata.
        package enum ListOpenWorkflowExecutions {
            /// Request type for "ListOpenWorkflowExecutions".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest
            /// Response type for "ListOpenWorkflowExecutions".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsResponse
            /// Descriptor for "ListOpenWorkflowExecutions".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListOpenWorkflowExecutions"
            )
        }
        /// Namespace for "ListClosedWorkflowExecutions" metadata.
        package enum ListClosedWorkflowExecutions {
            /// Request type for "ListClosedWorkflowExecutions".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest
            /// Response type for "ListClosedWorkflowExecutions".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsResponse
            /// Descriptor for "ListClosedWorkflowExecutions".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListClosedWorkflowExecutions"
            )
        }
        /// Namespace for "ListWorkflowExecutions" metadata.
        package enum ListWorkflowExecutions {
            /// Request type for "ListWorkflowExecutions".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest
            /// Response type for "ListWorkflowExecutions".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsResponse
            /// Descriptor for "ListWorkflowExecutions".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListWorkflowExecutions"
            )
        }
        /// Namespace for "ListArchivedWorkflowExecutions" metadata.
        package enum ListArchivedWorkflowExecutions {
            /// Request type for "ListArchivedWorkflowExecutions".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest
            /// Response type for "ListArchivedWorkflowExecutions".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsResponse
            /// Descriptor for "ListArchivedWorkflowExecutions".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListArchivedWorkflowExecutions"
            )
        }
        /// Namespace for "ScanWorkflowExecutions" metadata.
        package enum ScanWorkflowExecutions {
            /// Request type for "ScanWorkflowExecutions".
            package typealias Input = Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest
            /// Response type for "ScanWorkflowExecutions".
            package typealias Output = Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsResponse
            /// Descriptor for "ScanWorkflowExecutions".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ScanWorkflowExecutions"
            )
        }
        /// Namespace for "CountWorkflowExecutions" metadata.
        package enum CountWorkflowExecutions {
            /// Request type for "CountWorkflowExecutions".
            package typealias Input = Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest
            /// Response type for "CountWorkflowExecutions".
            package typealias Output = Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsResponse
            /// Descriptor for "CountWorkflowExecutions".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "CountWorkflowExecutions"
            )
        }
        /// Namespace for "GetSearchAttributes" metadata.
        package enum GetSearchAttributes {
            /// Request type for "GetSearchAttributes".
            package typealias Input = Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest
            /// Response type for "GetSearchAttributes".
            package typealias Output = Temporal_Api_Workflowservice_V1_GetSearchAttributesResponse
            /// Descriptor for "GetSearchAttributes".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "GetSearchAttributes"
            )
        }
        /// Namespace for "RespondQueryTaskCompleted" metadata.
        package enum RespondQueryTaskCompleted {
            /// Request type for "RespondQueryTaskCompleted".
            package typealias Input = Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest
            /// Response type for "RespondQueryTaskCompleted".
            package typealias Output = Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedResponse
            /// Descriptor for "RespondQueryTaskCompleted".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RespondQueryTaskCompleted"
            )
        }
        /// Namespace for "ResetStickyTaskQueue" metadata.
        package enum ResetStickyTaskQueue {
            /// Request type for "ResetStickyTaskQueue".
            package typealias Input = Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest
            /// Response type for "ResetStickyTaskQueue".
            package typealias Output = Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueResponse
            /// Descriptor for "ResetStickyTaskQueue".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ResetStickyTaskQueue"
            )
        }
        /// Namespace for "ShutdownWorker" metadata.
        package enum ShutdownWorker {
            /// Request type for "ShutdownWorker".
            package typealias Input = Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest
            /// Response type for "ShutdownWorker".
            package typealias Output = Temporal_Api_Workflowservice_V1_ShutdownWorkerResponse
            /// Descriptor for "ShutdownWorker".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ShutdownWorker"
            )
        }
        /// Namespace for "QueryWorkflow" metadata.
        package enum QueryWorkflow {
            /// Request type for "QueryWorkflow".
            package typealias Input = Temporal_Api_Workflowservice_V1_QueryWorkflowRequest
            /// Response type for "QueryWorkflow".
            package typealias Output = Temporal_Api_Workflowservice_V1_QueryWorkflowResponse
            /// Descriptor for "QueryWorkflow".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "QueryWorkflow"
            )
        }
        /// Namespace for "DescribeWorkflowExecution" metadata.
        package enum DescribeWorkflowExecution {
            /// Request type for "DescribeWorkflowExecution".
            package typealias Input = Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest
            /// Response type for "DescribeWorkflowExecution".
            package typealias Output = Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionResponse
            /// Descriptor for "DescribeWorkflowExecution".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DescribeWorkflowExecution"
            )
        }
        /// Namespace for "DescribeTaskQueue" metadata.
        package enum DescribeTaskQueue {
            /// Request type for "DescribeTaskQueue".
            package typealias Input = Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest
            /// Response type for "DescribeTaskQueue".
            package typealias Output = Temporal_Api_Workflowservice_V1_DescribeTaskQueueResponse
            /// Descriptor for "DescribeTaskQueue".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DescribeTaskQueue"
            )
        }
        /// Namespace for "GetClusterInfo" metadata.
        package enum GetClusterInfo {
            /// Request type for "GetClusterInfo".
            package typealias Input = Temporal_Api_Workflowservice_V1_GetClusterInfoRequest
            /// Response type for "GetClusterInfo".
            package typealias Output = Temporal_Api_Workflowservice_V1_GetClusterInfoResponse
            /// Descriptor for "GetClusterInfo".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "GetClusterInfo"
            )
        }
        /// Namespace for "GetSystemInfo" metadata.
        package enum GetSystemInfo {
            /// Request type for "GetSystemInfo".
            package typealias Input = Temporal_Api_Workflowservice_V1_GetSystemInfoRequest
            /// Response type for "GetSystemInfo".
            package typealias Output = Temporal_Api_Workflowservice_V1_GetSystemInfoResponse
            /// Descriptor for "GetSystemInfo".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "GetSystemInfo"
            )
        }
        /// Namespace for "ListTaskQueuePartitions" metadata.
        package enum ListTaskQueuePartitions {
            /// Request type for "ListTaskQueuePartitions".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest
            /// Response type for "ListTaskQueuePartitions".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsResponse
            /// Descriptor for "ListTaskQueuePartitions".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListTaskQueuePartitions"
            )
        }
        /// Namespace for "CreateSchedule" metadata.
        package enum CreateSchedule {
            /// Request type for "CreateSchedule".
            package typealias Input = Temporal_Api_Workflowservice_V1_CreateScheduleRequest
            /// Response type for "CreateSchedule".
            package typealias Output = Temporal_Api_Workflowservice_V1_CreateScheduleResponse
            /// Descriptor for "CreateSchedule".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "CreateSchedule"
            )
        }
        /// Namespace for "DescribeSchedule" metadata.
        package enum DescribeSchedule {
            /// Request type for "DescribeSchedule".
            package typealias Input = Temporal_Api_Workflowservice_V1_DescribeScheduleRequest
            /// Response type for "DescribeSchedule".
            package typealias Output = Temporal_Api_Workflowservice_V1_DescribeScheduleResponse
            /// Descriptor for "DescribeSchedule".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DescribeSchedule"
            )
        }
        /// Namespace for "UpdateSchedule" metadata.
        package enum UpdateSchedule {
            /// Request type for "UpdateSchedule".
            package typealias Input = Temporal_Api_Workflowservice_V1_UpdateScheduleRequest
            /// Response type for "UpdateSchedule".
            package typealias Output = Temporal_Api_Workflowservice_V1_UpdateScheduleResponse
            /// Descriptor for "UpdateSchedule".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "UpdateSchedule"
            )
        }
        /// Namespace for "PatchSchedule" metadata.
        package enum PatchSchedule {
            /// Request type for "PatchSchedule".
            package typealias Input = Temporal_Api_Workflowservice_V1_PatchScheduleRequest
            /// Response type for "PatchSchedule".
            package typealias Output = Temporal_Api_Workflowservice_V1_PatchScheduleResponse
            /// Descriptor for "PatchSchedule".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "PatchSchedule"
            )
        }
        /// Namespace for "ListScheduleMatchingTimes" metadata.
        package enum ListScheduleMatchingTimes {
            /// Request type for "ListScheduleMatchingTimes".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest
            /// Response type for "ListScheduleMatchingTimes".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesResponse
            /// Descriptor for "ListScheduleMatchingTimes".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListScheduleMatchingTimes"
            )
        }
        /// Namespace for "DeleteSchedule" metadata.
        package enum DeleteSchedule {
            /// Request type for "DeleteSchedule".
            package typealias Input = Temporal_Api_Workflowservice_V1_DeleteScheduleRequest
            /// Response type for "DeleteSchedule".
            package typealias Output = Temporal_Api_Workflowservice_V1_DeleteScheduleResponse
            /// Descriptor for "DeleteSchedule".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DeleteSchedule"
            )
        }
        /// Namespace for "ListSchedules" metadata.
        package enum ListSchedules {
            /// Request type for "ListSchedules".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListSchedulesRequest
            /// Response type for "ListSchedules".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListSchedulesResponse
            /// Descriptor for "ListSchedules".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListSchedules"
            )
        }
        /// Namespace for "UpdateWorkerBuildIdCompatibility" metadata.
        package enum UpdateWorkerBuildIdCompatibility {
            /// Request type for "UpdateWorkerBuildIdCompatibility".
            package typealias Input = Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest
            /// Response type for "UpdateWorkerBuildIdCompatibility".
            package typealias Output = Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityResponse
            /// Descriptor for "UpdateWorkerBuildIdCompatibility".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "UpdateWorkerBuildIdCompatibility"
            )
        }
        /// Namespace for "GetWorkerBuildIdCompatibility" metadata.
        package enum GetWorkerBuildIdCompatibility {
            /// Request type for "GetWorkerBuildIdCompatibility".
            package typealias Input = Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest
            /// Response type for "GetWorkerBuildIdCompatibility".
            package typealias Output = Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityResponse
            /// Descriptor for "GetWorkerBuildIdCompatibility".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "GetWorkerBuildIdCompatibility"
            )
        }
        /// Namespace for "UpdateWorkerVersioningRules" metadata.
        package enum UpdateWorkerVersioningRules {
            /// Request type for "UpdateWorkerVersioningRules".
            package typealias Input = Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest
            /// Response type for "UpdateWorkerVersioningRules".
            package typealias Output = Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesResponse
            /// Descriptor for "UpdateWorkerVersioningRules".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "UpdateWorkerVersioningRules"
            )
        }
        /// Namespace for "GetWorkerVersioningRules" metadata.
        package enum GetWorkerVersioningRules {
            /// Request type for "GetWorkerVersioningRules".
            package typealias Input = Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest
            /// Response type for "GetWorkerVersioningRules".
            package typealias Output = Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesResponse
            /// Descriptor for "GetWorkerVersioningRules".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "GetWorkerVersioningRules"
            )
        }
        /// Namespace for "GetWorkerTaskReachability" metadata.
        package enum GetWorkerTaskReachability {
            /// Request type for "GetWorkerTaskReachability".
            package typealias Input = Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest
            /// Response type for "GetWorkerTaskReachability".
            package typealias Output = Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityResponse
            /// Descriptor for "GetWorkerTaskReachability".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "GetWorkerTaskReachability"
            )
        }
        /// Namespace for "DescribeDeployment" metadata.
        package enum DescribeDeployment {
            /// Request type for "DescribeDeployment".
            package typealias Input = Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest
            /// Response type for "DescribeDeployment".
            package typealias Output = Temporal_Api_Workflowservice_V1_DescribeDeploymentResponse
            /// Descriptor for "DescribeDeployment".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DescribeDeployment"
            )
        }
        /// Namespace for "DescribeWorkerDeploymentVersion" metadata.
        package enum DescribeWorkerDeploymentVersion {
            /// Request type for "DescribeWorkerDeploymentVersion".
            package typealias Input = Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest
            /// Response type for "DescribeWorkerDeploymentVersion".
            package typealias Output = Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionResponse
            /// Descriptor for "DescribeWorkerDeploymentVersion".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DescribeWorkerDeploymentVersion"
            )
        }
        /// Namespace for "ListDeployments" metadata.
        package enum ListDeployments {
            /// Request type for "ListDeployments".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListDeploymentsRequest
            /// Response type for "ListDeployments".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListDeploymentsResponse
            /// Descriptor for "ListDeployments".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListDeployments"
            )
        }
        /// Namespace for "GetDeploymentReachability" metadata.
        package enum GetDeploymentReachability {
            /// Request type for "GetDeploymentReachability".
            package typealias Input = Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest
            /// Response type for "GetDeploymentReachability".
            package typealias Output = Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityResponse
            /// Descriptor for "GetDeploymentReachability".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "GetDeploymentReachability"
            )
        }
        /// Namespace for "GetCurrentDeployment" metadata.
        package enum GetCurrentDeployment {
            /// Request type for "GetCurrentDeployment".
            package typealias Input = Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest
            /// Response type for "GetCurrentDeployment".
            package typealias Output = Temporal_Api_Workflowservice_V1_GetCurrentDeploymentResponse
            /// Descriptor for "GetCurrentDeployment".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "GetCurrentDeployment"
            )
        }
        /// Namespace for "SetCurrentDeployment" metadata.
        package enum SetCurrentDeployment {
            /// Request type for "SetCurrentDeployment".
            package typealias Input = Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest
            /// Response type for "SetCurrentDeployment".
            package typealias Output = Temporal_Api_Workflowservice_V1_SetCurrentDeploymentResponse
            /// Descriptor for "SetCurrentDeployment".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "SetCurrentDeployment"
            )
        }
        /// Namespace for "SetWorkerDeploymentCurrentVersion" metadata.
        package enum SetWorkerDeploymentCurrentVersion {
            /// Request type for "SetWorkerDeploymentCurrentVersion".
            package typealias Input = Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest
            /// Response type for "SetWorkerDeploymentCurrentVersion".
            package typealias Output = Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionResponse
            /// Descriptor for "SetWorkerDeploymentCurrentVersion".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "SetWorkerDeploymentCurrentVersion"
            )
        }
        /// Namespace for "DescribeWorkerDeployment" metadata.
        package enum DescribeWorkerDeployment {
            /// Request type for "DescribeWorkerDeployment".
            package typealias Input = Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest
            /// Response type for "DescribeWorkerDeployment".
            package typealias Output = Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentResponse
            /// Descriptor for "DescribeWorkerDeployment".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DescribeWorkerDeployment"
            )
        }
        /// Namespace for "DeleteWorkerDeployment" metadata.
        package enum DeleteWorkerDeployment {
            /// Request type for "DeleteWorkerDeployment".
            package typealias Input = Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest
            /// Response type for "DeleteWorkerDeployment".
            package typealias Output = Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentResponse
            /// Descriptor for "DeleteWorkerDeployment".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DeleteWorkerDeployment"
            )
        }
        /// Namespace for "DeleteWorkerDeploymentVersion" metadata.
        package enum DeleteWorkerDeploymentVersion {
            /// Request type for "DeleteWorkerDeploymentVersion".
            package typealias Input = Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest
            /// Response type for "DeleteWorkerDeploymentVersion".
            package typealias Output = Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionResponse
            /// Descriptor for "DeleteWorkerDeploymentVersion".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DeleteWorkerDeploymentVersion"
            )
        }
        /// Namespace for "SetWorkerDeploymentRampingVersion" metadata.
        package enum SetWorkerDeploymentRampingVersion {
            /// Request type for "SetWorkerDeploymentRampingVersion".
            package typealias Input = Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest
            /// Response type for "SetWorkerDeploymentRampingVersion".
            package typealias Output = Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionResponse
            /// Descriptor for "SetWorkerDeploymentRampingVersion".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "SetWorkerDeploymentRampingVersion"
            )
        }
        /// Namespace for "ListWorkerDeployments" metadata.
        package enum ListWorkerDeployments {
            /// Request type for "ListWorkerDeployments".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest
            /// Response type for "ListWorkerDeployments".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsResponse
            /// Descriptor for "ListWorkerDeployments".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListWorkerDeployments"
            )
        }
        /// Namespace for "UpdateWorkerDeploymentVersionMetadata" metadata.
        package enum UpdateWorkerDeploymentVersionMetadata {
            /// Request type for "UpdateWorkerDeploymentVersionMetadata".
            package typealias Input = Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest
            /// Response type for "UpdateWorkerDeploymentVersionMetadata".
            package typealias Output = Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataResponse
            /// Descriptor for "UpdateWorkerDeploymentVersionMetadata".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "UpdateWorkerDeploymentVersionMetadata"
            )
        }
        /// Namespace for "UpdateWorkflowExecution" metadata.
        package enum UpdateWorkflowExecution {
            /// Request type for "UpdateWorkflowExecution".
            package typealias Input = Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest
            /// Response type for "UpdateWorkflowExecution".
            package typealias Output = Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionResponse
            /// Descriptor for "UpdateWorkflowExecution".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "UpdateWorkflowExecution"
            )
        }
        /// Namespace for "PollWorkflowExecutionUpdate" metadata.
        package enum PollWorkflowExecutionUpdate {
            /// Request type for "PollWorkflowExecutionUpdate".
            package typealias Input = Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest
            /// Response type for "PollWorkflowExecutionUpdate".
            package typealias Output = Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateResponse
            /// Descriptor for "PollWorkflowExecutionUpdate".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "PollWorkflowExecutionUpdate"
            )
        }
        /// Namespace for "StartBatchOperation" metadata.
        package enum StartBatchOperation {
            /// Request type for "StartBatchOperation".
            package typealias Input = Temporal_Api_Workflowservice_V1_StartBatchOperationRequest
            /// Response type for "StartBatchOperation".
            package typealias Output = Temporal_Api_Workflowservice_V1_StartBatchOperationResponse
            /// Descriptor for "StartBatchOperation".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "StartBatchOperation"
            )
        }
        /// Namespace for "StopBatchOperation" metadata.
        package enum StopBatchOperation {
            /// Request type for "StopBatchOperation".
            package typealias Input = Temporal_Api_Workflowservice_V1_StopBatchOperationRequest
            /// Response type for "StopBatchOperation".
            package typealias Output = Temporal_Api_Workflowservice_V1_StopBatchOperationResponse
            /// Descriptor for "StopBatchOperation".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "StopBatchOperation"
            )
        }
        /// Namespace for "DescribeBatchOperation" metadata.
        package enum DescribeBatchOperation {
            /// Request type for "DescribeBatchOperation".
            package typealias Input = Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest
            /// Response type for "DescribeBatchOperation".
            package typealias Output = Temporal_Api_Workflowservice_V1_DescribeBatchOperationResponse
            /// Descriptor for "DescribeBatchOperation".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DescribeBatchOperation"
            )
        }
        /// Namespace for "ListBatchOperations" metadata.
        package enum ListBatchOperations {
            /// Request type for "ListBatchOperations".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest
            /// Response type for "ListBatchOperations".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListBatchOperationsResponse
            /// Descriptor for "ListBatchOperations".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListBatchOperations"
            )
        }
        /// Namespace for "PollNexusTaskQueue" metadata.
        package enum PollNexusTaskQueue {
            /// Request type for "PollNexusTaskQueue".
            package typealias Input = Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest
            /// Response type for "PollNexusTaskQueue".
            package typealias Output = Temporal_Api_Workflowservice_V1_PollNexusTaskQueueResponse
            /// Descriptor for "PollNexusTaskQueue".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "PollNexusTaskQueue"
            )
        }
        /// Namespace for "RespondNexusTaskCompleted" metadata.
        package enum RespondNexusTaskCompleted {
            /// Request type for "RespondNexusTaskCompleted".
            package typealias Input = Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest
            /// Response type for "RespondNexusTaskCompleted".
            package typealias Output = Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedResponse
            /// Descriptor for "RespondNexusTaskCompleted".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RespondNexusTaskCompleted"
            )
        }
        /// Namespace for "RespondNexusTaskFailed" metadata.
        package enum RespondNexusTaskFailed {
            /// Request type for "RespondNexusTaskFailed".
            package typealias Input = Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest
            /// Response type for "RespondNexusTaskFailed".
            package typealias Output = Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedResponse
            /// Descriptor for "RespondNexusTaskFailed".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RespondNexusTaskFailed"
            )
        }
        /// Namespace for "UpdateActivityOptions" metadata.
        package enum UpdateActivityOptions {
            /// Request type for "UpdateActivityOptions".
            package typealias Input = Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest
            /// Response type for "UpdateActivityOptions".
            package typealias Output = Temporal_Api_Workflowservice_V1_UpdateActivityOptionsResponse
            /// Descriptor for "UpdateActivityOptions".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "UpdateActivityOptions"
            )
        }
        /// Namespace for "UpdateWorkflowExecutionOptions" metadata.
        package enum UpdateWorkflowExecutionOptions {
            /// Request type for "UpdateWorkflowExecutionOptions".
            package typealias Input = Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest
            /// Response type for "UpdateWorkflowExecutionOptions".
            package typealias Output = Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsResponse
            /// Descriptor for "UpdateWorkflowExecutionOptions".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "UpdateWorkflowExecutionOptions"
            )
        }
        /// Namespace for "PauseActivity" metadata.
        package enum PauseActivity {
            /// Request type for "PauseActivity".
            package typealias Input = Temporal_Api_Workflowservice_V1_PauseActivityRequest
            /// Response type for "PauseActivity".
            package typealias Output = Temporal_Api_Workflowservice_V1_PauseActivityResponse
            /// Descriptor for "PauseActivity".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "PauseActivity"
            )
        }
        /// Namespace for "UnpauseActivity" metadata.
        package enum UnpauseActivity {
            /// Request type for "UnpauseActivity".
            package typealias Input = Temporal_Api_Workflowservice_V1_UnpauseActivityRequest
            /// Response type for "UnpauseActivity".
            package typealias Output = Temporal_Api_Workflowservice_V1_UnpauseActivityResponse
            /// Descriptor for "UnpauseActivity".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "UnpauseActivity"
            )
        }
        /// Namespace for "ResetActivity" metadata.
        package enum ResetActivity {
            /// Request type for "ResetActivity".
            package typealias Input = Temporal_Api_Workflowservice_V1_ResetActivityRequest
            /// Response type for "ResetActivity".
            package typealias Output = Temporal_Api_Workflowservice_V1_ResetActivityResponse
            /// Descriptor for "ResetActivity".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ResetActivity"
            )
        }
        /// Namespace for "CreateWorkflowRule" metadata.
        package enum CreateWorkflowRule {
            /// Request type for "CreateWorkflowRule".
            package typealias Input = Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest
            /// Response type for "CreateWorkflowRule".
            package typealias Output = Temporal_Api_Workflowservice_V1_CreateWorkflowRuleResponse
            /// Descriptor for "CreateWorkflowRule".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "CreateWorkflowRule"
            )
        }
        /// Namespace for "DescribeWorkflowRule" metadata.
        package enum DescribeWorkflowRule {
            /// Request type for "DescribeWorkflowRule".
            package typealias Input = Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest
            /// Response type for "DescribeWorkflowRule".
            package typealias Output = Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleResponse
            /// Descriptor for "DescribeWorkflowRule".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DescribeWorkflowRule"
            )
        }
        /// Namespace for "DeleteWorkflowRule" metadata.
        package enum DeleteWorkflowRule {
            /// Request type for "DeleteWorkflowRule".
            package typealias Input = Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest
            /// Response type for "DeleteWorkflowRule".
            package typealias Output = Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleResponse
            /// Descriptor for "DeleteWorkflowRule".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "DeleteWorkflowRule"
            )
        }
        /// Namespace for "ListWorkflowRules" metadata.
        package enum ListWorkflowRules {
            /// Request type for "ListWorkflowRules".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest
            /// Response type for "ListWorkflowRules".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListWorkflowRulesResponse
            /// Descriptor for "ListWorkflowRules".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListWorkflowRules"
            )
        }
        /// Namespace for "TriggerWorkflowRule" metadata.
        package enum TriggerWorkflowRule {
            /// Request type for "TriggerWorkflowRule".
            package typealias Input = Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest
            /// Response type for "TriggerWorkflowRule".
            package typealias Output = Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleResponse
            /// Descriptor for "TriggerWorkflowRule".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "TriggerWorkflowRule"
            )
        }
        /// Namespace for "RecordWorkerHeartbeat" metadata.
        package enum RecordWorkerHeartbeat {
            /// Request type for "RecordWorkerHeartbeat".
            package typealias Input = Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest
            /// Response type for "RecordWorkerHeartbeat".
            package typealias Output = Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatResponse
            /// Descriptor for "RecordWorkerHeartbeat".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "RecordWorkerHeartbeat"
            )
        }
        /// Namespace for "ListWorkers" metadata.
        package enum ListWorkers {
            /// Request type for "ListWorkers".
            package typealias Input = Temporal_Api_Workflowservice_V1_ListWorkersRequest
            /// Response type for "ListWorkers".
            package typealias Output = Temporal_Api_Workflowservice_V1_ListWorkersResponse
            /// Descriptor for "ListWorkers".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "ListWorkers"
            )
        }
        /// Namespace for "UpdateTaskQueueConfig" metadata.
        package enum UpdateTaskQueueConfig {
            /// Request type for "UpdateTaskQueueConfig".
            package typealias Input = Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest
            /// Response type for "UpdateTaskQueueConfig".
            package typealias Output = Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigResponse
            /// Descriptor for "UpdateTaskQueueConfig".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "UpdateTaskQueueConfig"
            )
        }
        /// Namespace for "FetchWorkerConfig" metadata.
        package enum FetchWorkerConfig {
            /// Request type for "FetchWorkerConfig".
            package typealias Input = Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest
            /// Response type for "FetchWorkerConfig".
            package typealias Output = Temporal_Api_Workflowservice_V1_FetchWorkerConfigResponse
            /// Descriptor for "FetchWorkerConfig".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "FetchWorkerConfig"
            )
        }
        /// Namespace for "UpdateWorkerConfig" metadata.
        package enum UpdateWorkerConfig {
            /// Request type for "UpdateWorkerConfig".
            package typealias Input = Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest
            /// Response type for "UpdateWorkerConfig".
            package typealias Output = Temporal_Api_Workflowservice_V1_UpdateWorkerConfigResponse
            /// Descriptor for "UpdateWorkerConfig".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService"),
                method: "UpdateWorkerConfig"
            )
        }
        /// Descriptors for all methods in the "temporal.api.workflowservice.v1.WorkflowService" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            RegisterNamespace.descriptor,
            DescribeNamespace.descriptor,
            ListNamespaces.descriptor,
            UpdateNamespace.descriptor,
            DeprecateNamespace.descriptor,
            StartWorkflowExecution.descriptor,
            ExecuteMultiOperation.descriptor,
            GetWorkflowExecutionHistory.descriptor,
            GetWorkflowExecutionHistoryReverse.descriptor,
            PollWorkflowTaskQueue.descriptor,
            RespondWorkflowTaskCompleted.descriptor,
            RespondWorkflowTaskFailed.descriptor,
            PollActivityTaskQueue.descriptor,
            RecordActivityTaskHeartbeat.descriptor,
            RecordActivityTaskHeartbeatById.descriptor,
            RespondActivityTaskCompleted.descriptor,
            RespondActivityTaskCompletedById.descriptor,
            RespondActivityTaskFailed.descriptor,
            RespondActivityTaskFailedById.descriptor,
            RespondActivityTaskCanceled.descriptor,
            RespondActivityTaskCanceledById.descriptor,
            RequestCancelWorkflowExecution.descriptor,
            SignalWorkflowExecution.descriptor,
            SignalWithStartWorkflowExecution.descriptor,
            ResetWorkflowExecution.descriptor,
            TerminateWorkflowExecution.descriptor,
            DeleteWorkflowExecution.descriptor,
            ListOpenWorkflowExecutions.descriptor,
            ListClosedWorkflowExecutions.descriptor,
            ListWorkflowExecutions.descriptor,
            ListArchivedWorkflowExecutions.descriptor,
            ScanWorkflowExecutions.descriptor,
            CountWorkflowExecutions.descriptor,
            GetSearchAttributes.descriptor,
            RespondQueryTaskCompleted.descriptor,
            ResetStickyTaskQueue.descriptor,
            ShutdownWorker.descriptor,
            QueryWorkflow.descriptor,
            DescribeWorkflowExecution.descriptor,
            DescribeTaskQueue.descriptor,
            GetClusterInfo.descriptor,
            GetSystemInfo.descriptor,
            ListTaskQueuePartitions.descriptor,
            CreateSchedule.descriptor,
            DescribeSchedule.descriptor,
            UpdateSchedule.descriptor,
            PatchSchedule.descriptor,
            ListScheduleMatchingTimes.descriptor,
            DeleteSchedule.descriptor,
            ListSchedules.descriptor,
            UpdateWorkerBuildIdCompatibility.descriptor,
            GetWorkerBuildIdCompatibility.descriptor,
            UpdateWorkerVersioningRules.descriptor,
            GetWorkerVersioningRules.descriptor,
            GetWorkerTaskReachability.descriptor,
            DescribeDeployment.descriptor,
            DescribeWorkerDeploymentVersion.descriptor,
            ListDeployments.descriptor,
            GetDeploymentReachability.descriptor,
            GetCurrentDeployment.descriptor,
            SetCurrentDeployment.descriptor,
            SetWorkerDeploymentCurrentVersion.descriptor,
            DescribeWorkerDeployment.descriptor,
            DeleteWorkerDeployment.descriptor,
            DeleteWorkerDeploymentVersion.descriptor,
            SetWorkerDeploymentRampingVersion.descriptor,
            ListWorkerDeployments.descriptor,
            UpdateWorkerDeploymentVersionMetadata.descriptor,
            UpdateWorkflowExecution.descriptor,
            PollWorkflowExecutionUpdate.descriptor,
            StartBatchOperation.descriptor,
            StopBatchOperation.descriptor,
            DescribeBatchOperation.descriptor,
            ListBatchOperations.descriptor,
            PollNexusTaskQueue.descriptor,
            RespondNexusTaskCompleted.descriptor,
            RespondNexusTaskFailed.descriptor,
            UpdateActivityOptions.descriptor,
            UpdateWorkflowExecutionOptions.descriptor,
            PauseActivity.descriptor,
            UnpauseActivity.descriptor,
            ResetActivity.descriptor,
            CreateWorkflowRule.descriptor,
            DescribeWorkflowRule.descriptor,
            DeleteWorkflowRule.descriptor,
            ListWorkflowRules.descriptor,
            TriggerWorkflowRule.descriptor,
            RecordWorkerHeartbeat.descriptor,
            ListWorkers.descriptor,
            UpdateTaskQueueConfig.descriptor,
            FetchWorkerConfig.descriptor,
            UpdateWorkerConfig.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "temporal.api.workflowservice.v1.WorkflowService" service.
    package static let temporal_api_workflowservice_v1_WorkflowService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.workflowservice.v1.WorkflowService")
}

// MARK: temporal.api.workflowservice.v1.WorkflowService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Temporal_Api_Workflowservice_V1_WorkflowService {
    /// Generated client protocol for the "temporal.api.workflowservice.v1.WorkflowService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > WorkflowService API defines how Temporal SDKs and other clients interact with the Temporal server
    /// > to create and interact with workflows and activities.
    /// > 
    /// > Users are expected to call `StartWorkflowExecution` to create a new workflow execution.
    /// > 
    /// > To drive workflows, a worker using a Temporal SDK must exist which regularly polls for workflow
    /// > and activity tasks from the service. For each workflow task, the sdk must process the
    /// > (incremental or complete) event history and respond back with any newly generated commands.
    /// > 
    /// > For each activity task, the worker is expected to execute the user's code which implements that
    /// > activity, responding with completion or failure.
    package protocol ClientProtocol: Sendable {
        /// Call the "RegisterNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RegisterNamespace creates a new namespace which can be used as a container for all resources.
        /// > 
        /// > A Namespace is a top level entity within Temporal, and is used as a container for resources
        /// > like workflow executions, task queues, etc. A Namespace acts as a sandbox and provides
        /// > isolation for all resources within the namespace. All resources belongs to exactly one
        /// > namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RegisterNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func registerNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RegisterNamespaceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RegisterNamespaceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DescribeNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DescribeNamespace returns the information and configuration for a registered namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func describeNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeNamespaceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeNamespaceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListNamespaces" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListNamespaces returns the information and configuration for all namespaces.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListNamespacesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListNamespacesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListNamespacesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listNamespaces<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListNamespacesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListNamespacesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListNamespacesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListNamespacesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateNamespace is used to update the information and configuration of a registered
        /// > namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateNamespaceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateNamespaceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeprecateNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeprecateNamespace is used to update the state of a registered namespace to DEPRECATED.
        /// > 
        /// > Once the namespace is deprecated it cannot be used to start new workflow executions. Existing
        /// > workflow executions will continue to run on deprecated namespaces.
        /// > Deprecated.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: Deprecated --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DeprecateNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deprecateNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DeprecateNamespaceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeprecateNamespaceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "StartWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > StartWorkflowExecution starts a new workflow execution.
        /// > 
        /// > It will create the execution with a `WORKFLOW_EXECUTION_STARTED` event in its history and
        /// > also schedule the first workflow task. Returns `WorkflowExecutionAlreadyStarted`, if an
        /// > instance already exists with same workflow id.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_StartWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func startWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ExecuteMultiOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ExecuteMultiOperation executes multiple operations within a single workflow.
        /// > 
        /// > Operations are started atomically, meaning if *any* operation fails to be started, none are,
        /// > and the request fails. Upon start, the API returns only when *all* operations have a response.
        /// > 
        /// > Upon failure, it returns `MultiOperationExecutionFailure` where the status code
        /// > equals the status code of the *first* operation that failed to be started.
        /// > 
        /// > NOTE: Experimental API.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ExecuteMultiOperationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func executeMultiOperation<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetWorkflowExecutionHistory" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetWorkflowExecutionHistory returns the history of specified workflow execution. Fails with
        /// > `NotFound` if the specified workflow execution is unknown to the service.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getWorkflowExecutionHistory<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetWorkflowExecutionHistoryReverse" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetWorkflowExecutionHistoryReverse returns the history of specified workflow execution in reverse 
        /// > order (starting from last event). Fails with`NotFound` if the specified workflow execution is 
        /// > unknown to the service.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getWorkflowExecutionHistoryReverse<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PollWorkflowTaskQueue" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PollWorkflowTaskQueue is called by workers to make progress on workflows.
        /// > 
        /// > A WorkflowTask is dispatched to callers for active workflow executions with pending workflow
        /// > tasks. The worker is expected to call `RespondWorkflowTaskCompleted` when it is done
        /// > processing the task. The service will create a `WorkflowTaskStarted` event in the history for
        /// > this task before handing it to the worker.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func pollWorkflowTaskQueue<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RespondWorkflowTaskCompleted" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondWorkflowTaskCompleted is called by workers to successfully complete workflow tasks
        /// > they received from `PollWorkflowTaskQueue`.
        /// > 
        /// > Completing a WorkflowTask will write a `WORKFLOW_TASK_COMPLETED` event to the workflow's
        /// > history, along with events corresponding to whatever commands the SDK generated while
        /// > executing the task (ex timer started, activity task scheduled, etc).
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func respondWorkflowTaskCompleted<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RespondWorkflowTaskFailed" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondWorkflowTaskFailed is called by workers to indicate the processing of a workflow task
        /// > failed.
        /// > 
        /// > This results in a `WORKFLOW_TASK_FAILED` event written to the history, and a new workflow
        /// > task will be scheduled. This API can be used to report unhandled failures resulting from
        /// > applying the workflow task.
        /// > 
        /// > Temporal will only append first WorkflowTaskFailed event to the history of workflow execution
        /// > for consecutive failures.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func respondWorkflowTaskFailed<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PollActivityTaskQueue" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PollActivityTaskQueue is called by workers to process activity tasks from a specific task
        /// > queue.
        /// > 
        /// > The worker is expected to call one of the `RespondActivityTaskXXX` methods when it is done
        /// > processing the task.
        /// > 
        /// > An activity task is dispatched whenever a `SCHEDULE_ACTIVITY_TASK` command is produced during
        /// > workflow execution. An in memory `ACTIVITY_TASK_STARTED` event is written to mutable state
        /// > before the task is dispatched to the worker. The started event, and the final event
        /// > (`ACTIVITY_TASK_COMPLETED` / `ACTIVITY_TASK_FAILED` / `ACTIVITY_TASK_TIMED_OUT`) will both be
        /// > written permanently to Workflow execution history when Activity is finished. This is done to
        /// > avoid writing many events in the case of a failure/retry loop.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_PollActivityTaskQueueResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func pollActivityTaskQueue<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RecordActivityTaskHeartbeat" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RecordActivityTaskHeartbeat is optionally called by workers while they execute activities.
        /// > 
        /// > If worker fails to heartbeat within the `heartbeat_timeout` interval for the activity task,
        /// > then it will be marked as timed out and an `ACTIVITY_TASK_TIMED_OUT` event will be written to
        /// > the workflow history. Calling `RecordActivityTaskHeartbeat` will fail with `NotFound` in
        /// > such situations, in that event, the SDK should request cancellation of the activity.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func recordActivityTaskHeartbeat<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RecordActivityTaskHeartbeatById" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > See `RecordActivityTaskHeartbeat`. This version allows clients to record heartbeats by
        /// > namespace/workflow id/activity id instead of task token.
        /// > 
        /// > (-- api-linter: core::0136::prepositions=disabled
        /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func recordActivityTaskHeartbeatById<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RespondActivityTaskCompleted" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondActivityTaskCompleted is called by workers when they successfully complete an activity
        /// > task.
        /// > 
        /// > This results in a new `ACTIVITY_TASK_COMPLETED` event being written to the workflow history
        /// > and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
        /// > no longer valid due to activity timeout, already being completed, or never having existed.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func respondActivityTaskCompleted<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RespondActivityTaskCompletedById" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > See `RecordActivityTaskCompleted`. This version allows clients to record completions by
        /// > namespace/workflow id/activity id instead of task token.
        /// > 
        /// > (-- api-linter: core::0136::prepositions=disabled
        /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func respondActivityTaskCompletedById<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RespondActivityTaskFailed" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondActivityTaskFailed is called by workers when processing an activity task fails.
        /// > 
        /// > This results in a new `ACTIVITY_TASK_FAILED` event being written to the workflow history and
        /// > a new workflow task created for the workflow. Fails with `NotFound` if the task token is no
        /// > longer valid due to activity timeout, already being completed, or never having existed.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func respondActivityTaskFailed<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RespondActivityTaskFailedById" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > See `RecordActivityTaskFailed`. This version allows clients to record failures by
        /// > namespace/workflow id/activity id instead of task token.
        /// > 
        /// > (-- api-linter: core::0136::prepositions=disabled
        /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func respondActivityTaskFailedById<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RespondActivityTaskCanceled" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondActivityTaskFailed is called by workers when processing an activity task fails.
        /// > 
        /// > This results in a new `ACTIVITY_TASK_CANCELED` event being written to the workflow history
        /// > and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
        /// > no longer valid due to activity timeout, already being completed, or never having existed.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func respondActivityTaskCanceled<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RespondActivityTaskCanceledById" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > See `RecordActivityTaskCanceled`. This version allows clients to record failures by
        /// > namespace/workflow id/activity id instead of task token.
        /// > 
        /// > (-- api-linter: core::0136::prepositions=disabled
        /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func respondActivityTaskCanceledById<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RequestCancelWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RequestCancelWorkflowExecution is called by workers when they want to request cancellation of
        /// > a workflow execution.
        /// > 
        /// > This results in a new `WORKFLOW_EXECUTION_CANCEL_REQUESTED` event being written to the
        /// > workflow history and a new workflow task created for the workflow. It returns success if the requested
        /// > workflow is already closed. It fails with 'NotFound' if the requested workflow doesn't exist.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func requestCancelWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SignalWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > SignalWorkflowExecution is used to send a signal to a running workflow execution.
        /// > 
        /// > This results in a `WORKFLOW_EXECUTION_SIGNALED` event recorded in the history and a workflow
        /// > task being created for the execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func signalWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SignalWithStartWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > SignalWithStartWorkflowExecution is used to ensure a signal is sent to a workflow, even if
        /// > it isn't yet started.
        /// > 
        /// > If the workflow is running, a `WORKFLOW_EXECUTION_SIGNALED` event is recorded in the history
        /// > and a workflow task is generated.
        /// > 
        /// > If the workflow is not running or not found, then the workflow is created with
        /// > `WORKFLOW_EXECUTION_STARTED` and `WORKFLOW_EXECUTION_SIGNALED` events in its history, and a
        /// > workflow task is generated.
        /// > 
        /// > (-- api-linter: core::0136::prepositions=disabled
        /// >     aip.dev/not-precedent: "With" is used to indicate combined operation. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func signalWithStartWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ResetWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ResetWorkflowExecution will reset an existing workflow execution to a specified
        /// > `WORKFLOW_TASK_COMPLETED` event (exclusive). It will immediately terminate the current
        /// > execution instance.
        /// > TODO: Does exclusive here mean *just* the completed event, or also WFT started? Otherwise the task is doomed to time out?
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func resetWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "TerminateWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > TerminateWorkflowExecution terminates an existing workflow execution by recording a
        /// > `WORKFLOW_EXECUTION_TERMINATED` event in the history and immediately terminating the
        /// > execution instance.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func terminateWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteWorkflowExecution asynchronously deletes a specific Workflow Execution (when
        /// > WorkflowExecution.run_id is provided) or the latest Workflow Execution (when
        /// > WorkflowExecution.run_id is not provided). If the Workflow Execution is Running, it will be
        /// > terminated before deletion.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: Workflow deletion not exposed to HTTP, users should use cancel or terminate. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListOpenWorkflowExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific namespace.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: HTTP users should use ListWorkflowExecutions instead. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listOpenWorkflowExecutions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListClosedWorkflowExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific namespace.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: HTTP users should use ListWorkflowExecutions instead. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listClosedWorkflowExecutions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListWorkflowExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListWorkflowExecutions is a visibility API to list workflow executions in a specific namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listWorkflowExecutions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListArchivedWorkflowExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListArchivedWorkflowExecutions is a visibility API to list archived workflow executions in a specific namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listArchivedWorkflowExecutions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ScanWorkflowExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ScanWorkflowExecutions is a visibility API to list large amount of workflow executions in a specific namespace without order.
        /// > 
        /// > Deprecated: Replaced with `ListWorkflowExecutions`.
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: HTTP users should use ListWorkflowExecutions instead. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func scanWorkflowExecutions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CountWorkflowExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CountWorkflowExecutions is a visibility API to count of workflow executions in a specific namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func countWorkflowExecutions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetSearchAttributes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetSearchAttributes is a visibility API to get all legal keys that could be used in list APIs
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose this search attribute API to HTTP (but may expose on OperatorService). --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetSearchAttributesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getSearchAttributes<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetSearchAttributesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetSearchAttributesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RespondQueryTaskCompleted" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondQueryTaskCompleted is called by workers to complete queries which were delivered on
        /// > the `query` (not `queries`) field of a `PollWorkflowTaskQueueResponse`.
        /// > 
        /// > Completing the query will unblock the corresponding client call to `QueryWorkflow` and return
        /// > the query result a response.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func respondQueryTaskCompleted<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ResetStickyTaskQueue" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ResetStickyTaskQueue resets the sticky task queue related information in the mutable state of
        /// > a given workflow. This is prudent for workers to perform if a workflow has been paged out of
        /// > their cache.
        /// > 
        /// > Things cleared are:
        /// > 1. StickyTaskQueue
        /// > 2. StickyScheduleToStartTimeout
        /// > 
        /// > When possible, ShutdownWorker should be preferred over
        /// > ResetStickyTaskQueue (particularly when a worker is shutting down or
        /// > cycling).
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func resetStickyTaskQueue<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ShutdownWorker" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ShutdownWorker is used to indicate that the given sticky task
        /// > queue is no longer being polled by its worker. Following the completion of
        /// > ShutdownWorker, newly-added workflow tasks will instead be placed
        /// > in the normal task queue, eligible for any worker to pick up.
        /// > 
        /// > ShutdownWorker should be called by workers while shutting down,
        /// > after they've shut down their pollers. If another sticky poll
        /// > request is issued, the sticky task queue will be revived.
        /// > 
        /// > As of Temporal Server v1.25.0, ShutdownWorker hasn't yet been implemented.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ShutdownWorkerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func shutdownWorker<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ShutdownWorkerResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ShutdownWorkerResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "QueryWorkflow" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > QueryWorkflow requests a query be executed for a specified workflow execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_QueryWorkflowRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_QueryWorkflowRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_QueryWorkflowResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func queryWorkflow<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_QueryWorkflowRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_QueryWorkflowRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_QueryWorkflowResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_QueryWorkflowResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DescribeWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DescribeWorkflowExecution returns information about the specified workflow execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func describeWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DescribeTaskQueue" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DescribeTaskQueue returns the following information about the target task queue, broken down by Build ID:
        /// >   - List of pollers
        /// >   - Workflow Reachability status
        /// >   - Backlog info for Workflow and/or Activity tasks
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeTaskQueueResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func describeTaskQueue<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeTaskQueueResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeTaskQueueResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetClusterInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetClusterInfo returns information about temporal cluster
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetClusterInfoRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetClusterInfoRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetClusterInfoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getClusterInfo<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetClusterInfoRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetClusterInfoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetClusterInfoResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetClusterInfoResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetSystemInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetSystemInfo returns information about the system.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetSystemInfoRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetSystemInfoRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetSystemInfoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getSystemInfo<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetSystemInfoRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetSystemInfoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetSystemInfoResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetSystemInfoResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListTaskQueuePartitions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose this low-level API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listTaskQueuePartitions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_CreateScheduleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_CreateScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_CreateScheduleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createSchedule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_CreateScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_CreateScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_CreateScheduleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_CreateScheduleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DescribeSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Returns the schedule description and current state of an existing schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeScheduleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeScheduleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func describeSchedule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeScheduleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeScheduleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Changes the configuration or state of an existing schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateScheduleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateScheduleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateSchedule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateScheduleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateScheduleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PatchSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Makes a specific change to a schedule or triggers an immediate action.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PatchScheduleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_PatchScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_PatchScheduleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func patchSchedule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PatchScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_PatchScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_PatchScheduleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PatchScheduleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListScheduleMatchingTimes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists matching times within a range.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listScheduleMatchingTimes<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a schedule, removing it from the system.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteScheduleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DeleteScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DeleteScheduleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteSchedule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DeleteScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DeleteScheduleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteScheduleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListSchedules" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List all schedules in a namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListSchedulesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListSchedulesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListSchedulesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listSchedules<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListSchedulesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListSchedulesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListSchedulesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListSchedulesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateWorkerBuildIdCompatibility" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deprecated. Use `UpdateWorkerVersioningRules`.
        /// > 
        /// > Allows users to specify sets of worker build id versions on a per task queue basis. Versions
        /// > are ordered, and may be either compatible with some extant version, or a new incompatible
        /// > version, forming sets of ids which are incompatible with each other, but whose contained
        /// > members are compatible with one another.
        /// > 
        /// > A single build id may be mapped to multiple task queues using this API for cases where a single process hosts
        /// > multiple workers. 
        /// > 
        /// > To query which workers can be retired, use the `GetWorkerTaskReachability` API.
        /// > 
        /// > NOTE: The number of task queues mapped to a single build id is limited by the `limit.taskQueuesPerBuildId`
        /// > (default is 20), if this limit is exceeded this API will error with a FailedPrecondition.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do yet expose versioning API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateWorkerBuildIdCompatibility<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetWorkerBuildIdCompatibility" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deprecated. Use `GetWorkerVersioningRules`.
        /// > Fetches the worker build id versioning sets for a task queue.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getWorkerBuildIdCompatibility<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateWorkerVersioningRules" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Use this API to manage Worker Versioning Rules for a given Task Queue. There are two types of
        /// > rules: Build ID Assignment rules and Compatible Build ID Redirect rules.
        /// > 
        /// > Assignment rules determine how to assign new executions to a Build IDs. Their primary
        /// > use case is to specify the latest Build ID but they have powerful features for gradual rollout
        /// > of a new Build ID.
        /// > 
        /// > Once a workflow execution is assigned to a Build ID and it completes its first Workflow Task,
        /// > the workflow stays on the assigned Build ID regardless of changes in assignment rules. This
        /// > eliminates the need for compatibility between versions when you only care about using the new
        /// > version for new workflows and let existing workflows finish in their own version.
        /// > 
        /// > Activities, Child Workflows and Continue-as-New executions have the option to inherit the
        /// > Build ID of their parent/previous workflow or use the latest assignment rules to independently
        /// > select a Build ID.
        /// > 
        /// > Redirect rules should only be used when you want to move workflows and activities assigned to
        /// > one Build ID (source) to another compatible Build ID (target). You are responsible to make sure
        /// > the target Build ID of a redirect rule is able to process event histories made by the source
        /// > Build ID by using [Patching](https://docs.temporal.io/workflows#patching) or other means.
        /// > 
        /// > WARNING: Worker Versioning is not yet stable and the API and behavior may change incompatibly.
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do yet expose versioning API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateWorkerVersioningRules<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetWorkerVersioningRules" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Fetches the Build ID assignment and redirect rules for a Task Queue.
        /// > WARNING: Worker Versioning is not yet stable and the API and behavior may change incompatibly.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getWorkerVersioningRules<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetWorkerTaskReachability" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deprecated. Use `DescribeTaskQueue`.
        /// > 
        /// > Fetches task reachability to determine whether a worker may be retired.
        /// > The request may specify task queues to query for or let the server fetch all task queues mapped to the given
        /// > build IDs.
        /// > 
        /// > When requesting a large number of task queues or all task queues associated with the given build ids in a
        /// > namespace, all task queues will be listed in the response but some of them may not contain reachability
        /// > information due to a server enforced limit. When reaching the limit, task queues that reachability information
        /// > could not be retrieved for will be marked with a single TASK_REACHABILITY_UNSPECIFIED entry. The caller may issue
        /// > another call to get the reachability for those task queues.
        /// > 
        /// > Open source users can adjust this limit by setting the server's dynamic config value for
        /// > `limit.reachabilityTaskQueueScan` with the caveat that this call can strain the visibility store.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getWorkerTaskReachability<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DescribeDeployment" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Describes a worker deployment.
        /// > Experimental. This API might significantly change or be removed in a future release.
        /// > Deprecated. Replaced with `DescribeWorkerDeploymentVersion`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeDeploymentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func describeDeployment<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeDeploymentResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeDeploymentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DescribeWorkerDeploymentVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Describes a worker deployment version.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func describeWorkerDeploymentVersion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListDeployments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists worker deployments in the namespace. Optionally can filter based on deployment series
        /// > name.
        /// > Experimental. This API might significantly change or be removed in a future release.
        /// > Deprecated. Replaced with `ListWorkerDeployments`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListDeploymentsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListDeploymentsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListDeploymentsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listDeployments<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListDeploymentsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListDeploymentsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListDeploymentsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListDeploymentsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetDeploymentReachability" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Returns the reachability level of a worker deployment to help users decide when it is time
        /// > to decommission a deployment. Reachability level is calculated based on the deployment's
        /// > `status` and existing workflows that depend on the given deployment for their execution.
        /// > Calculating reachability is relatively expensive. Therefore, server might return a recently
        /// > cached value. In such a case, the `last_update_time` will inform you about the actual
        /// > reachability calculation time.
        /// > Experimental. This API might significantly change or be removed in a future release.
        /// > Deprecated. Replaced with `DrainageInfo` returned by `DescribeWorkerDeploymentVersion`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDeploymentReachability<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCurrentDeployment" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Returns the current deployment (and its info) for a given deployment series.
        /// > Experimental. This API might significantly change or be removed in a future release.
        /// > Deprecated. Replaced by `current_version` returned by `DescribeWorkerDeployment`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetCurrentDeploymentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCurrentDeployment<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetCurrentDeployment" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Sets a deployment as the current deployment for its deployment series. Can optionally update
        /// > the metadata of the deployment as well.
        /// > Experimental. This API might significantly change or be removed in a future release.
        /// > Deprecated. Replaced by `SetWorkerDeploymentCurrentVersion`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_SetCurrentDeploymentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setCurrentDeployment<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetWorkerDeploymentCurrentVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Set/unset the Current Version of a Worker Deployment. Automatically unsets the Ramping
        /// > Version if it is the Version being set as Current.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setWorkerDeploymentCurrentVersion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DescribeWorkerDeployment" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Describes a Worker Deployment.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func describeWorkerDeployment<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteWorkerDeployment" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes records of (an old) Deployment. A deployment can only be deleted if
        /// > it has no Version in it.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteWorkerDeployment<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteWorkerDeploymentVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Used for manual deletion of Versions. User can delete a Version only when all the
        /// > following conditions are met:
        /// >  - It is not the Current or Ramping Version of its Deployment.
        /// >  - It has no active pollers (none of the task queues in the Version have pollers)
        /// >  - It is not draining (see WorkerDeploymentVersionInfo.drainage_info). This condition
        /// >    can be skipped by passing `skip-drainage=true`.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteWorkerDeploymentVersion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetWorkerDeploymentRampingVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Set/unset the Ramping Version of a Worker Deployment and its ramp percentage. Can be used for
        /// > gradual ramp to unversioned workers too.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setWorkerDeploymentRampingVersion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListWorkerDeployments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all Worker Deployments that are tracked in the Namespace.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listWorkerDeployments<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateWorkerDeploymentVersionMetadata" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates the user-given metadata attached to a Worker Deployment Version.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateWorkerDeploymentVersionMetadata<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Invokes the specified Update function on user Workflow code.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PollWorkflowExecutionUpdate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Polls a Workflow Execution for the outcome of a Workflow Update
        /// > previously issued through the UpdateWorkflowExecution RPC. The effective
        /// > timeout on this call will be shorter of the the caller-supplied gRPC
        /// > timeout and the server's configured long-poll timeout.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We don't expose update polling API to HTTP in favor of a potential future non-blocking form. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func pollWorkflowExecutionUpdate<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "StartBatchOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > StartBatchOperation starts a new batch operation
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_StartBatchOperationRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_StartBatchOperationRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_StartBatchOperationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func startBatchOperation<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_StartBatchOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_StartBatchOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_StartBatchOperationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_StartBatchOperationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "StopBatchOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > StopBatchOperation stops a batch operation
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_StopBatchOperationRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_StopBatchOperationRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_StopBatchOperationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func stopBatchOperation<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_StopBatchOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_StopBatchOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_StopBatchOperationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_StopBatchOperationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DescribeBatchOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DescribeBatchOperation returns the information about a batch operation
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeBatchOperationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func describeBatchOperation<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeBatchOperationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeBatchOperationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListBatchOperations" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListBatchOperations returns a list of batch operations
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListBatchOperationsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listBatchOperations<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListBatchOperationsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListBatchOperationsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PollNexusTaskQueue" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PollNexusTaskQueue is a long poll call used by workers to receive Nexus tasks.
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_PollNexusTaskQueueResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func pollNexusTaskQueue<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RespondNexusTaskCompleted" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondNexusTaskCompleted is called by workers to respond to Nexus tasks received via PollNexusTaskQueue.
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func respondNexusTaskCompleted<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RespondNexusTaskFailed" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondNexusTaskFailed is called by workers to fail Nexus tasks received via PollNexusTaskQueue.
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func respondNexusTaskFailed<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateActivityOptions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateActivityOptions is called by the client to update the options of an activity by its ID or type.
        /// > If there are multiple pending activities of the provided type - all of them will be updated.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateActivityOptionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateActivityOptions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateWorkflowExecutionOptions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateWorkflowExecutionOptions partially updates the WorkflowExecutionOptions of an existing workflow execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateWorkflowExecutionOptions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PauseActivity" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PauseActivity pauses the execution of an activity specified by its ID or type.
        /// > If there are multiple pending activities of the provided type - all of them will be paused
        /// > 
        /// > Pausing an activity means:
        /// > - If the activity is currently waiting for a retry or is running and subsequently fails,
        /// >   it will not be rescheduled until it is unpaused.
        /// > - If the activity is already paused, calling this method will have no effect.
        /// > - If the activity is running and finishes successfully, the activity will be completed.
        /// > - If the activity is running and finishes with failure:
        /// >   * if there is no retry left - the activity will be completed.
        /// >   * if there are more retries left - the activity will be paused.
        /// > For long-running activities:
        /// > - activities in paused state will send a cancellation with "activity_paused" set to 'true' in response to 'RecordActivityTaskHeartbeat'.
        /// > - The activity should respond to the cancellation accordingly.
        /// > 
        /// > Returns a `NotFound` error if there is no pending activity with the provided ID or type
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PauseActivityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_PauseActivityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_PauseActivityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func pauseActivity<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PauseActivityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_PauseActivityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_PauseActivityResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PauseActivityResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UnpauseActivity" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UnpauseActivity unpauses the execution of an activity specified by its ID or type.
        /// > If there are multiple pending activities of the provided type - all of them will be unpaused.
        /// > 
        /// > If activity is not paused, this call will have no effect.
        /// > If the activity was paused while waiting for retry, it will be scheduled immediately (* see 'jitter' flag).
        /// > Once the activity is unpaused, all timeout timers will be regenerated.
        /// > 
        /// > Flags:
        /// > 'jitter': the activity will be scheduled at a random time within the jitter duration.
        /// > 'reset_attempts': the number of attempts will be reset.
        /// > 'reset_heartbeat': the activity heartbeat timer and heartbeats will be reset.
        /// > 
        /// > Returns a `NotFound` error if there is no pending activity with the provided ID or type
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UnpauseActivityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UnpauseActivityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UnpauseActivityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func unpauseActivity<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UnpauseActivityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UnpauseActivityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UnpauseActivityResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UnpauseActivityResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ResetActivity" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ResetActivity resets the execution of an activity specified by its ID or type.
        /// > If there are multiple pending activities of the provided type - all of them will be reset.
        /// > 
        /// > Resetting an activity means:
        /// > * number of attempts will be reset to 0.
        /// > * activity timeouts will be reset.
        /// > * if the activity is waiting for retry, and it is not paused or 'keep_paused' is not provided:
        /// >    it will be scheduled immediately (* see 'jitter' flag),
        /// > 
        /// > Flags:
        /// > 
        /// > 'jitter': the activity will be scheduled at a random time within the jitter duration.
        /// > If the activity currently paused it will be unpaused, unless 'keep_paused' flag is provided.
        /// > 'reset_heartbeats': the activity heartbeat timer and heartbeats will be reset.
        /// > 'keep_paused': if the activity is paused, it will remain paused.
        /// > 
        /// > Returns a `NotFound` error if there is no pending activity with the provided ID or type.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ResetActivityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ResetActivityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ResetActivityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func resetActivity<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ResetActivityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ResetActivityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ResetActivityResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ResetActivityResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateWorkflowRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a new workflow rule. The rules are used to control the workflow execution.
        /// > The rule will be applied to all running and new workflows in the namespace.
        /// > If the rule with such ID already exist this call will fail
        /// > Note: the rules are part of namespace configuration and will be stored in the namespace config.
        /// > Namespace config is eventually consistent.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_CreateWorkflowRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createWorkflowRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DescribeWorkflowRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DescribeWorkflowRule return the rule specification for existing rule id.
        /// > If there is no rule with such id - NOT FOUND error will be returned.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func describeWorkflowRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteWorkflowRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete rule by rule id
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteWorkflowRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListWorkflowRules" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Return all namespace workflow rules
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListWorkflowRulesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listWorkflowRules<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListWorkflowRulesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkflowRulesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "TriggerWorkflowRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > TriggerWorkflowRule allows to:
        /// >  * trigger existing rule for a specific workflow execution;
        /// >  * trigger rule for a specific workflow execution without creating a rule;
        /// > This is useful for one-off operations.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func triggerWorkflowRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RecordWorkerHeartbeat" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > WorkerHeartbeat receive heartbeat request from the worker.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func recordWorkerHeartbeat<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListWorkers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListWorkers is a visibility API to list worker status information in a specific namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListWorkersRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListWorkersRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListWorkersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listWorkers<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkersRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListWorkersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListWorkersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateTaskQueueConfig" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates task queue configuration.
        /// > For the overall queue rate limit: the rate limit set by this api overrides the worker-set rate limit,
        /// > which uncouples the rate limit from the worker lifecycle.
        /// > If the overall queue rate limit is unset, the worker-set rate limit takes effect.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateTaskQueueConfig<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "FetchWorkerConfig" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > FetchWorkerConfig returns the worker configuration for a specific worker.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_FetchWorkerConfigResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func fetchWorkerConfig<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_FetchWorkerConfigResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_FetchWorkerConfigResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateWorkerConfig" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateWorkerConfig updates the worker configuration of one or more workers.
        /// > Can be used to partially update the worker configuration.
        /// > Can be used to update the configuration of multiple workers.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerConfigResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateWorkerConfig<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "temporal.api.workflowservice.v1.WorkflowService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > WorkflowService API defines how Temporal SDKs and other clients interact with the Temporal server
    /// > to create and interact with workflows and activities.
    /// > 
    /// > Users are expected to call `StartWorkflowExecution` to create a new workflow execution.
    /// > 
    /// > To drive workflows, a worker using a Temporal SDK must exist which regularly polls for workflow
    /// > and activity tasks from the service. For each workflow task, the sdk must process the
    /// > (incremental or complete) event history and respond back with any newly generated commands.
    /// > 
    /// > For each activity task, the worker is expected to execute the user's code which implements that
    /// > activity, responding with completion or failure.
    package struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "RegisterNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RegisterNamespace creates a new namespace which can be used as a container for all resources.
        /// > 
        /// > A Namespace is a top level entity within Temporal, and is used as a container for resources
        /// > like workflow executions, task queues, etc. A Namespace acts as a sandbox and provides
        /// > isolation for all resources within the namespace. All resources belongs to exactly one
        /// > namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RegisterNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func registerNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RegisterNamespaceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RegisterNamespaceResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RegisterNamespace.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DescribeNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DescribeNamespace returns the information and configuration for a registered namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func describeNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeNamespaceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeNamespaceResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DescribeNamespace.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListNamespaces" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListNamespaces returns the information and configuration for all namespaces.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListNamespacesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListNamespacesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListNamespacesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listNamespaces<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListNamespacesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListNamespacesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListNamespacesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListNamespacesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListNamespaces.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateNamespace is used to update the information and configuration of a registered
        /// > namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateNamespaceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateNamespaceResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.UpdateNamespace.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeprecateNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeprecateNamespace is used to update the state of a registered namespace to DEPRECATED.
        /// > 
        /// > Once the namespace is deprecated it cannot be used to start new workflow executions. Existing
        /// > workflow executions will continue to run on deprecated namespaces.
        /// > Deprecated.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: Deprecated --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DeprecateNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deprecateNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DeprecateNamespaceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeprecateNamespaceResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DeprecateNamespace.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "StartWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > StartWorkflowExecution starts a new workflow execution.
        /// > 
        /// > It will create the execution with a `WORKFLOW_EXECUTION_STARTED` event in its history and
        /// > also schedule the first workflow task. Returns `WorkflowExecutionAlreadyStarted`, if an
        /// > instance already exists with same workflow id.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_StartWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func startWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.StartWorkflowExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ExecuteMultiOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ExecuteMultiOperation executes multiple operations within a single workflow.
        /// > 
        /// > Operations are started atomically, meaning if *any* operation fails to be started, none are,
        /// > and the request fails. Upon start, the API returns only when *all* operations have a response.
        /// > 
        /// > Upon failure, it returns `MultiOperationExecutionFailure` where the status code
        /// > equals the status code of the *first* operation that failed to be started.
        /// > 
        /// > NOTE: Experimental API.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ExecuteMultiOperationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func executeMultiOperation<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ExecuteMultiOperation.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetWorkflowExecutionHistory" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetWorkflowExecutionHistory returns the history of specified workflow execution. Fails with
        /// > `NotFound` if the specified workflow execution is unknown to the service.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getWorkflowExecutionHistory<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.GetWorkflowExecutionHistory.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetWorkflowExecutionHistoryReverse" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetWorkflowExecutionHistoryReverse returns the history of specified workflow execution in reverse 
        /// > order (starting from last event). Fails with`NotFound` if the specified workflow execution is 
        /// > unknown to the service.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getWorkflowExecutionHistoryReverse<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.GetWorkflowExecutionHistoryReverse.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PollWorkflowTaskQueue" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PollWorkflowTaskQueue is called by workers to make progress on workflows.
        /// > 
        /// > A WorkflowTask is dispatched to callers for active workflow executions with pending workflow
        /// > tasks. The worker is expected to call `RespondWorkflowTaskCompleted` when it is done
        /// > processing the task. The service will create a `WorkflowTaskStarted` event in the history for
        /// > this task before handing it to the worker.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func pollWorkflowTaskQueue<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.PollWorkflowTaskQueue.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RespondWorkflowTaskCompleted" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondWorkflowTaskCompleted is called by workers to successfully complete workflow tasks
        /// > they received from `PollWorkflowTaskQueue`.
        /// > 
        /// > Completing a WorkflowTask will write a `WORKFLOW_TASK_COMPLETED` event to the workflow's
        /// > history, along with events corresponding to whatever commands the SDK generated while
        /// > executing the task (ex timer started, activity task scheduled, etc).
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func respondWorkflowTaskCompleted<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RespondWorkflowTaskCompleted.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RespondWorkflowTaskFailed" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondWorkflowTaskFailed is called by workers to indicate the processing of a workflow task
        /// > failed.
        /// > 
        /// > This results in a `WORKFLOW_TASK_FAILED` event written to the history, and a new workflow
        /// > task will be scheduled. This API can be used to report unhandled failures resulting from
        /// > applying the workflow task.
        /// > 
        /// > Temporal will only append first WorkflowTaskFailed event to the history of workflow execution
        /// > for consecutive failures.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func respondWorkflowTaskFailed<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RespondWorkflowTaskFailed.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PollActivityTaskQueue" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PollActivityTaskQueue is called by workers to process activity tasks from a specific task
        /// > queue.
        /// > 
        /// > The worker is expected to call one of the `RespondActivityTaskXXX` methods when it is done
        /// > processing the task.
        /// > 
        /// > An activity task is dispatched whenever a `SCHEDULE_ACTIVITY_TASK` command is produced during
        /// > workflow execution. An in memory `ACTIVITY_TASK_STARTED` event is written to mutable state
        /// > before the task is dispatched to the worker. The started event, and the final event
        /// > (`ACTIVITY_TASK_COMPLETED` / `ACTIVITY_TASK_FAILED` / `ACTIVITY_TASK_TIMED_OUT`) will both be
        /// > written permanently to Workflow execution history when Activity is finished. This is done to
        /// > avoid writing many events in the case of a failure/retry loop.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_PollActivityTaskQueueResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func pollActivityTaskQueue<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.PollActivityTaskQueue.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RecordActivityTaskHeartbeat" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RecordActivityTaskHeartbeat is optionally called by workers while they execute activities.
        /// > 
        /// > If worker fails to heartbeat within the `heartbeat_timeout` interval for the activity task,
        /// > then it will be marked as timed out and an `ACTIVITY_TASK_TIMED_OUT` event will be written to
        /// > the workflow history. Calling `RecordActivityTaskHeartbeat` will fail with `NotFound` in
        /// > such situations, in that event, the SDK should request cancellation of the activity.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func recordActivityTaskHeartbeat<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RecordActivityTaskHeartbeat.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RecordActivityTaskHeartbeatById" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > See `RecordActivityTaskHeartbeat`. This version allows clients to record heartbeats by
        /// > namespace/workflow id/activity id instead of task token.
        /// > 
        /// > (-- api-linter: core::0136::prepositions=disabled
        /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func recordActivityTaskHeartbeatById<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RecordActivityTaskHeartbeatById.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RespondActivityTaskCompleted" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondActivityTaskCompleted is called by workers when they successfully complete an activity
        /// > task.
        /// > 
        /// > This results in a new `ACTIVITY_TASK_COMPLETED` event being written to the workflow history
        /// > and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
        /// > no longer valid due to activity timeout, already being completed, or never having existed.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func respondActivityTaskCompleted<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RespondActivityTaskCompleted.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RespondActivityTaskCompletedById" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > See `RecordActivityTaskCompleted`. This version allows clients to record completions by
        /// > namespace/workflow id/activity id instead of task token.
        /// > 
        /// > (-- api-linter: core::0136::prepositions=disabled
        /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func respondActivityTaskCompletedById<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RespondActivityTaskCompletedById.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RespondActivityTaskFailed" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondActivityTaskFailed is called by workers when processing an activity task fails.
        /// > 
        /// > This results in a new `ACTIVITY_TASK_FAILED` event being written to the workflow history and
        /// > a new workflow task created for the workflow. Fails with `NotFound` if the task token is no
        /// > longer valid due to activity timeout, already being completed, or never having existed.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func respondActivityTaskFailed<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RespondActivityTaskFailed.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RespondActivityTaskFailedById" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > See `RecordActivityTaskFailed`. This version allows clients to record failures by
        /// > namespace/workflow id/activity id instead of task token.
        /// > 
        /// > (-- api-linter: core::0136::prepositions=disabled
        /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func respondActivityTaskFailedById<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RespondActivityTaskFailedById.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RespondActivityTaskCanceled" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondActivityTaskFailed is called by workers when processing an activity task fails.
        /// > 
        /// > This results in a new `ACTIVITY_TASK_CANCELED` event being written to the workflow history
        /// > and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
        /// > no longer valid due to activity timeout, already being completed, or never having existed.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func respondActivityTaskCanceled<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RespondActivityTaskCanceled.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RespondActivityTaskCanceledById" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > See `RecordActivityTaskCanceled`. This version allows clients to record failures by
        /// > namespace/workflow id/activity id instead of task token.
        /// > 
        /// > (-- api-linter: core::0136::prepositions=disabled
        /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func respondActivityTaskCanceledById<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RespondActivityTaskCanceledById.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RequestCancelWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RequestCancelWorkflowExecution is called by workers when they want to request cancellation of
        /// > a workflow execution.
        /// > 
        /// > This results in a new `WORKFLOW_EXECUTION_CANCEL_REQUESTED` event being written to the
        /// > workflow history and a new workflow task created for the workflow. It returns success if the requested
        /// > workflow is already closed. It fails with 'NotFound' if the requested workflow doesn't exist.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func requestCancelWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RequestCancelWorkflowExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SignalWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > SignalWorkflowExecution is used to send a signal to a running workflow execution.
        /// > 
        /// > This results in a `WORKFLOW_EXECUTION_SIGNALED` event recorded in the history and a workflow
        /// > task being created for the execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func signalWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.SignalWorkflowExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SignalWithStartWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > SignalWithStartWorkflowExecution is used to ensure a signal is sent to a workflow, even if
        /// > it isn't yet started.
        /// > 
        /// > If the workflow is running, a `WORKFLOW_EXECUTION_SIGNALED` event is recorded in the history
        /// > and a workflow task is generated.
        /// > 
        /// > If the workflow is not running or not found, then the workflow is created with
        /// > `WORKFLOW_EXECUTION_STARTED` and `WORKFLOW_EXECUTION_SIGNALED` events in its history, and a
        /// > workflow task is generated.
        /// > 
        /// > (-- api-linter: core::0136::prepositions=disabled
        /// >     aip.dev/not-precedent: "With" is used to indicate combined operation. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func signalWithStartWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.SignalWithStartWorkflowExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ResetWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ResetWorkflowExecution will reset an existing workflow execution to a specified
        /// > `WORKFLOW_TASK_COMPLETED` event (exclusive). It will immediately terminate the current
        /// > execution instance.
        /// > TODO: Does exclusive here mean *just* the completed event, or also WFT started? Otherwise the task is doomed to time out?
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func resetWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ResetWorkflowExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "TerminateWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > TerminateWorkflowExecution terminates an existing workflow execution by recording a
        /// > `WORKFLOW_EXECUTION_TERMINATED` event in the history and immediately terminating the
        /// > execution instance.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func terminateWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.TerminateWorkflowExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteWorkflowExecution asynchronously deletes a specific Workflow Execution (when
        /// > WorkflowExecution.run_id is provided) or the latest Workflow Execution (when
        /// > WorkflowExecution.run_id is not provided). If the Workflow Execution is Running, it will be
        /// > terminated before deletion.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: Workflow deletion not exposed to HTTP, users should use cancel or terminate. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DeleteWorkflowExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListOpenWorkflowExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific namespace.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: HTTP users should use ListWorkflowExecutions instead. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listOpenWorkflowExecutions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListOpenWorkflowExecutions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListClosedWorkflowExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific namespace.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: HTTP users should use ListWorkflowExecutions instead. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listClosedWorkflowExecutions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListClosedWorkflowExecutions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListWorkflowExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListWorkflowExecutions is a visibility API to list workflow executions in a specific namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listWorkflowExecutions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListWorkflowExecutions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListArchivedWorkflowExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListArchivedWorkflowExecutions is a visibility API to list archived workflow executions in a specific namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listArchivedWorkflowExecutions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListArchivedWorkflowExecutions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ScanWorkflowExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ScanWorkflowExecutions is a visibility API to list large amount of workflow executions in a specific namespace without order.
        /// > 
        /// > Deprecated: Replaced with `ListWorkflowExecutions`.
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: HTTP users should use ListWorkflowExecutions instead. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func scanWorkflowExecutions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ScanWorkflowExecutions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CountWorkflowExecutions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CountWorkflowExecutions is a visibility API to count of workflow executions in a specific namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func countWorkflowExecutions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.CountWorkflowExecutions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetSearchAttributes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetSearchAttributes is a visibility API to get all legal keys that could be used in list APIs
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose this search attribute API to HTTP (but may expose on OperatorService). --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetSearchAttributesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getSearchAttributes<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetSearchAttributesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetSearchAttributesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.GetSearchAttributes.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RespondQueryTaskCompleted" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondQueryTaskCompleted is called by workers to complete queries which were delivered on
        /// > the `query` (not `queries`) field of a `PollWorkflowTaskQueueResponse`.
        /// > 
        /// > Completing the query will unblock the corresponding client call to `QueryWorkflow` and return
        /// > the query result a response.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func respondQueryTaskCompleted<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RespondQueryTaskCompleted.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ResetStickyTaskQueue" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ResetStickyTaskQueue resets the sticky task queue related information in the mutable state of
        /// > a given workflow. This is prudent for workers to perform if a workflow has been paged out of
        /// > their cache.
        /// > 
        /// > Things cleared are:
        /// > 1. StickyTaskQueue
        /// > 2. StickyScheduleToStartTimeout
        /// > 
        /// > When possible, ShutdownWorker should be preferred over
        /// > ResetStickyTaskQueue (particularly when a worker is shutting down or
        /// > cycling).
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func resetStickyTaskQueue<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ResetStickyTaskQueue.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ShutdownWorker" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ShutdownWorker is used to indicate that the given sticky task
        /// > queue is no longer being polled by its worker. Following the completion of
        /// > ShutdownWorker, newly-added workflow tasks will instead be placed
        /// > in the normal task queue, eligible for any worker to pick up.
        /// > 
        /// > ShutdownWorker should be called by workers while shutting down,
        /// > after they've shut down their pollers. If another sticky poll
        /// > request is issued, the sticky task queue will be revived.
        /// > 
        /// > As of Temporal Server v1.25.0, ShutdownWorker hasn't yet been implemented.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ShutdownWorkerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func shutdownWorker<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ShutdownWorkerResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ShutdownWorkerResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ShutdownWorker.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "QueryWorkflow" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > QueryWorkflow requests a query be executed for a specified workflow execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_QueryWorkflowRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_QueryWorkflowRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_QueryWorkflowResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func queryWorkflow<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_QueryWorkflowRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_QueryWorkflowRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_QueryWorkflowResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_QueryWorkflowResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.QueryWorkflow.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DescribeWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DescribeWorkflowExecution returns information about the specified workflow execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func describeWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DescribeWorkflowExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DescribeTaskQueue" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DescribeTaskQueue returns the following information about the target task queue, broken down by Build ID:
        /// >   - List of pollers
        /// >   - Workflow Reachability status
        /// >   - Backlog info for Workflow and/or Activity tasks
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeTaskQueueResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func describeTaskQueue<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeTaskQueueResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeTaskQueueResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DescribeTaskQueue.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetClusterInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetClusterInfo returns information about temporal cluster
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetClusterInfoRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetClusterInfoRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetClusterInfoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getClusterInfo<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetClusterInfoRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetClusterInfoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetClusterInfoResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetClusterInfoResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.GetClusterInfo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetSystemInfo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > GetSystemInfo returns information about the system.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetSystemInfoRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetSystemInfoRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetSystemInfoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getSystemInfo<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetSystemInfoRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetSystemInfoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetSystemInfoResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetSystemInfoResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.GetSystemInfo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListTaskQueuePartitions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose this low-level API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listTaskQueuePartitions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListTaskQueuePartitions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_CreateScheduleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_CreateScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_CreateScheduleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createSchedule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_CreateScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_CreateScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_CreateScheduleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_CreateScheduleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.CreateSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DescribeSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Returns the schedule description and current state of an existing schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeScheduleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeScheduleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func describeSchedule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeScheduleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeScheduleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DescribeSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Changes the configuration or state of an existing schedule.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateScheduleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateScheduleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateSchedule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateScheduleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateScheduleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.UpdateSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PatchSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Makes a specific change to a schedule or triggers an immediate action.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PatchScheduleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_PatchScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_PatchScheduleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func patchSchedule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PatchScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_PatchScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_PatchScheduleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PatchScheduleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.PatchSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListScheduleMatchingTimes" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists matching times within a range.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listScheduleMatchingTimes<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListScheduleMatchingTimes.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteSchedule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a schedule, removing it from the system.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteScheduleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DeleteScheduleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DeleteScheduleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteSchedule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteScheduleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DeleteScheduleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DeleteScheduleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteScheduleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DeleteSchedule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListSchedules" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List all schedules in a namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListSchedulesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListSchedulesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListSchedulesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listSchedules<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListSchedulesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListSchedulesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListSchedulesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListSchedulesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListSchedules.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateWorkerBuildIdCompatibility" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deprecated. Use `UpdateWorkerVersioningRules`.
        /// > 
        /// > Allows users to specify sets of worker build id versions on a per task queue basis. Versions
        /// > are ordered, and may be either compatible with some extant version, or a new incompatible
        /// > version, forming sets of ids which are incompatible with each other, but whose contained
        /// > members are compatible with one another.
        /// > 
        /// > A single build id may be mapped to multiple task queues using this API for cases where a single process hosts
        /// > multiple workers. 
        /// > 
        /// > To query which workers can be retired, use the `GetWorkerTaskReachability` API.
        /// > 
        /// > NOTE: The number of task queues mapped to a single build id is limited by the `limit.taskQueuesPerBuildId`
        /// > (default is 20), if this limit is exceeded this API will error with a FailedPrecondition.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do yet expose versioning API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateWorkerBuildIdCompatibility<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.UpdateWorkerBuildIdCompatibility.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetWorkerBuildIdCompatibility" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deprecated. Use `GetWorkerVersioningRules`.
        /// > Fetches the worker build id versioning sets for a task queue.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getWorkerBuildIdCompatibility<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.GetWorkerBuildIdCompatibility.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateWorkerVersioningRules" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Use this API to manage Worker Versioning Rules for a given Task Queue. There are two types of
        /// > rules: Build ID Assignment rules and Compatible Build ID Redirect rules.
        /// > 
        /// > Assignment rules determine how to assign new executions to a Build IDs. Their primary
        /// > use case is to specify the latest Build ID but they have powerful features for gradual rollout
        /// > of a new Build ID.
        /// > 
        /// > Once a workflow execution is assigned to a Build ID and it completes its first Workflow Task,
        /// > the workflow stays on the assigned Build ID regardless of changes in assignment rules. This
        /// > eliminates the need for compatibility between versions when you only care about using the new
        /// > version for new workflows and let existing workflows finish in their own version.
        /// > 
        /// > Activities, Child Workflows and Continue-as-New executions have the option to inherit the
        /// > Build ID of their parent/previous workflow or use the latest assignment rules to independently
        /// > select a Build ID.
        /// > 
        /// > Redirect rules should only be used when you want to move workflows and activities assigned to
        /// > one Build ID (source) to another compatible Build ID (target). You are responsible to make sure
        /// > the target Build ID of a redirect rule is able to process event histories made by the source
        /// > Build ID by using [Patching](https://docs.temporal.io/workflows#patching) or other means.
        /// > 
        /// > WARNING: Worker Versioning is not yet stable and the API and behavior may change incompatibly.
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do yet expose versioning API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateWorkerVersioningRules<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.UpdateWorkerVersioningRules.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetWorkerVersioningRules" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Fetches the Build ID assignment and redirect rules for a Task Queue.
        /// > WARNING: Worker Versioning is not yet stable and the API and behavior may change incompatibly.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getWorkerVersioningRules<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.GetWorkerVersioningRules.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetWorkerTaskReachability" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deprecated. Use `DescribeTaskQueue`.
        /// > 
        /// > Fetches task reachability to determine whether a worker may be retired.
        /// > The request may specify task queues to query for or let the server fetch all task queues mapped to the given
        /// > build IDs.
        /// > 
        /// > When requesting a large number of task queues or all task queues associated with the given build ids in a
        /// > namespace, all task queues will be listed in the response but some of them may not contain reachability
        /// > information due to a server enforced limit. When reaching the limit, task queues that reachability information
        /// > could not be retrieved for will be marked with a single TASK_REACHABILITY_UNSPECIFIED entry. The caller may issue
        /// > another call to get the reachability for those task queues.
        /// > 
        /// > Open source users can adjust this limit by setting the server's dynamic config value for
        /// > `limit.reachabilityTaskQueueScan` with the caveat that this call can strain the visibility store.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getWorkerTaskReachability<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.GetWorkerTaskReachability.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DescribeDeployment" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Describes a worker deployment.
        /// > Experimental. This API might significantly change or be removed in a future release.
        /// > Deprecated. Replaced with `DescribeWorkerDeploymentVersion`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeDeploymentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func describeDeployment<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeDeploymentResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeDeploymentResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DescribeDeployment.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DescribeWorkerDeploymentVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Describes a worker deployment version.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func describeWorkerDeploymentVersion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DescribeWorkerDeploymentVersion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListDeployments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists worker deployments in the namespace. Optionally can filter based on deployment series
        /// > name.
        /// > Experimental. This API might significantly change or be removed in a future release.
        /// > Deprecated. Replaced with `ListWorkerDeployments`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListDeploymentsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListDeploymentsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListDeploymentsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listDeployments<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListDeploymentsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListDeploymentsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListDeploymentsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListDeploymentsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListDeployments.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetDeploymentReachability" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Returns the reachability level of a worker deployment to help users decide when it is time
        /// > to decommission a deployment. Reachability level is calculated based on the deployment's
        /// > `status` and existing workflows that depend on the given deployment for their execution.
        /// > Calculating reachability is relatively expensive. Therefore, server might return a recently
        /// > cached value. In such a case, the `last_update_time` will inform you about the actual
        /// > reachability calculation time.
        /// > Experimental. This API might significantly change or be removed in a future release.
        /// > Deprecated. Replaced with `DrainageInfo` returned by `DescribeWorkerDeploymentVersion`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getDeploymentReachability<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.GetDeploymentReachability.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCurrentDeployment" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Returns the current deployment (and its info) for a given deployment series.
        /// > Experimental. This API might significantly change or be removed in a future release.
        /// > Deprecated. Replaced by `current_version` returned by `DescribeWorkerDeployment`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_GetCurrentDeploymentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getCurrentDeployment<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.GetCurrentDeployment.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetCurrentDeployment" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Sets a deployment as the current deployment for its deployment series. Can optionally update
        /// > the metadata of the deployment as well.
        /// > Experimental. This API might significantly change or be removed in a future release.
        /// > Deprecated. Replaced by `SetWorkerDeploymentCurrentVersion`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_SetCurrentDeploymentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func setCurrentDeployment<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.SetCurrentDeployment.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetWorkerDeploymentCurrentVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Set/unset the Current Version of a Worker Deployment. Automatically unsets the Ramping
        /// > Version if it is the Version being set as Current.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func setWorkerDeploymentCurrentVersion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.SetWorkerDeploymentCurrentVersion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DescribeWorkerDeployment" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Describes a Worker Deployment.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func describeWorkerDeployment<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DescribeWorkerDeployment.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteWorkerDeployment" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes records of (an old) Deployment. A deployment can only be deleted if
        /// > it has no Version in it.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteWorkerDeployment<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DeleteWorkerDeployment.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteWorkerDeploymentVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Used for manual deletion of Versions. User can delete a Version only when all the
        /// > following conditions are met:
        /// >  - It is not the Current or Ramping Version of its Deployment.
        /// >  - It has no active pollers (none of the task queues in the Version have pollers)
        /// >  - It is not draining (see WorkerDeploymentVersionInfo.drainage_info). This condition
        /// >    can be skipped by passing `skip-drainage=true`.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteWorkerDeploymentVersion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DeleteWorkerDeploymentVersion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetWorkerDeploymentRampingVersion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Set/unset the Ramping Version of a Worker Deployment and its ramp percentage. Can be used for
        /// > gradual ramp to unversioned workers too.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func setWorkerDeploymentRampingVersion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.SetWorkerDeploymentRampingVersion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListWorkerDeployments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all Worker Deployments that are tracked in the Namespace.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listWorkerDeployments<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListWorkerDeployments.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateWorkerDeploymentVersionMetadata" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates the user-given metadata attached to a Worker Deployment Version.
        /// > Experimental. This API might significantly change or be removed in a future release.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateWorkerDeploymentVersionMetadata<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.UpdateWorkerDeploymentVersionMetadata.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateWorkflowExecution" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Invokes the specified Update function on user Workflow code.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateWorkflowExecution<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.UpdateWorkflowExecution.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PollWorkflowExecutionUpdate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Polls a Workflow Execution for the outcome of a Workflow Update
        /// > previously issued through the UpdateWorkflowExecution RPC. The effective
        /// > timeout on this call will be shorter of the the caller-supplied gRPC
        /// > timeout and the server's configured long-poll timeout.
        /// > 
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We don't expose update polling API to HTTP in favor of a potential future non-blocking form. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func pollWorkflowExecutionUpdate<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.PollWorkflowExecutionUpdate.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "StartBatchOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > StartBatchOperation starts a new batch operation
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_StartBatchOperationRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_StartBatchOperationRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_StartBatchOperationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func startBatchOperation<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_StartBatchOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_StartBatchOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_StartBatchOperationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_StartBatchOperationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.StartBatchOperation.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "StopBatchOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > StopBatchOperation stops a batch operation
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_StopBatchOperationRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_StopBatchOperationRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_StopBatchOperationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func stopBatchOperation<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_StopBatchOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_StopBatchOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_StopBatchOperationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_StopBatchOperationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.StopBatchOperation.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DescribeBatchOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DescribeBatchOperation returns the information about a batch operation
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeBatchOperationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func describeBatchOperation<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeBatchOperationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeBatchOperationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DescribeBatchOperation.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListBatchOperations" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListBatchOperations returns a list of batch operations
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListBatchOperationsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listBatchOperations<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListBatchOperationsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListBatchOperationsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListBatchOperations.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PollNexusTaskQueue" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PollNexusTaskQueue is a long poll call used by workers to receive Nexus tasks.
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_PollNexusTaskQueueResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func pollNexusTaskQueue<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.PollNexusTaskQueue.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RespondNexusTaskCompleted" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondNexusTaskCompleted is called by workers to respond to Nexus tasks received via PollNexusTaskQueue.
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func respondNexusTaskCompleted<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RespondNexusTaskCompleted.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RespondNexusTaskFailed" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RespondNexusTaskFailed is called by workers to fail Nexus tasks received via PollNexusTaskQueue.
        /// > (-- api-linter: core::0127::http-annotation=disabled
        /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func respondNexusTaskFailed<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RespondNexusTaskFailed.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateActivityOptions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateActivityOptions is called by the client to update the options of an activity by its ID or type.
        /// > If there are multiple pending activities of the provided type - all of them will be updated.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateActivityOptionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateActivityOptions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.UpdateActivityOptions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateWorkflowExecutionOptions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateWorkflowExecutionOptions partially updates the WorkflowExecutionOptions of an existing workflow execution.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateWorkflowExecutionOptions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.UpdateWorkflowExecutionOptions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PauseActivity" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > PauseActivity pauses the execution of an activity specified by its ID or type.
        /// > If there are multiple pending activities of the provided type - all of them will be paused
        /// > 
        /// > Pausing an activity means:
        /// > - If the activity is currently waiting for a retry or is running and subsequently fails,
        /// >   it will not be rescheduled until it is unpaused.
        /// > - If the activity is already paused, calling this method will have no effect.
        /// > - If the activity is running and finishes successfully, the activity will be completed.
        /// > - If the activity is running and finishes with failure:
        /// >   * if there is no retry left - the activity will be completed.
        /// >   * if there are more retries left - the activity will be paused.
        /// > For long-running activities:
        /// > - activities in paused state will send a cancellation with "activity_paused" set to 'true' in response to 'RecordActivityTaskHeartbeat'.
        /// > - The activity should respond to the cancellation accordingly.
        /// > 
        /// > Returns a `NotFound` error if there is no pending activity with the provided ID or type
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PauseActivityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_PauseActivityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_PauseActivityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func pauseActivity<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PauseActivityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_PauseActivityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_PauseActivityResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PauseActivityResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.PauseActivity.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UnpauseActivity" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UnpauseActivity unpauses the execution of an activity specified by its ID or type.
        /// > If there are multiple pending activities of the provided type - all of them will be unpaused.
        /// > 
        /// > If activity is not paused, this call will have no effect.
        /// > If the activity was paused while waiting for retry, it will be scheduled immediately (* see 'jitter' flag).
        /// > Once the activity is unpaused, all timeout timers will be regenerated.
        /// > 
        /// > Flags:
        /// > 'jitter': the activity will be scheduled at a random time within the jitter duration.
        /// > 'reset_attempts': the number of attempts will be reset.
        /// > 'reset_heartbeat': the activity heartbeat timer and heartbeats will be reset.
        /// > 
        /// > Returns a `NotFound` error if there is no pending activity with the provided ID or type
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UnpauseActivityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UnpauseActivityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UnpauseActivityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func unpauseActivity<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UnpauseActivityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UnpauseActivityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UnpauseActivityResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UnpauseActivityResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.UnpauseActivity.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ResetActivity" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ResetActivity resets the execution of an activity specified by its ID or type.
        /// > If there are multiple pending activities of the provided type - all of them will be reset.
        /// > 
        /// > Resetting an activity means:
        /// > * number of attempts will be reset to 0.
        /// > * activity timeouts will be reset.
        /// > * if the activity is waiting for retry, and it is not paused or 'keep_paused' is not provided:
        /// >    it will be scheduled immediately (* see 'jitter' flag),
        /// > 
        /// > Flags:
        /// > 
        /// > 'jitter': the activity will be scheduled at a random time within the jitter duration.
        /// > If the activity currently paused it will be unpaused, unless 'keep_paused' flag is provided.
        /// > 'reset_heartbeats': the activity heartbeat timer and heartbeats will be reset.
        /// > 'keep_paused': if the activity is paused, it will remain paused.
        /// > 
        /// > Returns a `NotFound` error if there is no pending activity with the provided ID or type.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ResetActivityRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ResetActivityRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ResetActivityResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func resetActivity<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ResetActivityRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ResetActivityRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ResetActivityResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ResetActivityResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ResetActivity.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateWorkflowRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a new workflow rule. The rules are used to control the workflow execution.
        /// > The rule will be applied to all running and new workflows in the namespace.
        /// > If the rule with such ID already exist this call will fail
        /// > Note: the rules are part of namespace configuration and will be stored in the namespace config.
        /// > Namespace config is eventually consistent.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_CreateWorkflowRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createWorkflowRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.CreateWorkflowRule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DescribeWorkflowRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DescribeWorkflowRule return the rule specification for existing rule id.
        /// > If there is no rule with such id - NOT FOUND error will be returned.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func describeWorkflowRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DescribeWorkflowRule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteWorkflowRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete rule by rule id
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteWorkflowRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.DeleteWorkflowRule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListWorkflowRules" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Return all namespace workflow rules
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListWorkflowRulesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listWorkflowRules<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListWorkflowRulesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkflowRulesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListWorkflowRules.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "TriggerWorkflowRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > TriggerWorkflowRule allows to:
        /// >  * trigger existing rule for a specific workflow execution;
        /// >  * trigger rule for a specific workflow execution without creating a rule;
        /// > This is useful for one-off operations.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func triggerWorkflowRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.TriggerWorkflowRule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RecordWorkerHeartbeat" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > WorkerHeartbeat receive heartbeat request from the worker.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func recordWorkerHeartbeat<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.RecordWorkerHeartbeat.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListWorkers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListWorkers is a visibility API to list worker status information in a specific namespace.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListWorkersRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_ListWorkersRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_ListWorkersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listWorkers<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkersRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_ListWorkersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_ListWorkersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.ListWorkers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateTaskQueueConfig" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates task queue configuration.
        /// > For the overall queue rate limit: the rate limit set by this api overrides the worker-set rate limit,
        /// > which uncouples the rate limit from the worker lifecycle.
        /// > If the overall queue rate limit is unset, the worker-set rate limit takes effect.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateTaskQueueConfig<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.UpdateTaskQueueConfig.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "FetchWorkerConfig" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > FetchWorkerConfig returns the worker configuration for a specific worker.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_FetchWorkerConfigResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func fetchWorkerConfig<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_FetchWorkerConfigResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_FetchWorkerConfigResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.FetchWorkerConfig.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateWorkerConfig" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > UpdateWorkerConfig updates the worker configuration of one or more workers.
        /// > Can be used to partially update the worker configuration.
        /// > Can be used to update the configuration of multiple workers.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Workflowservice_V1_UpdateWorkerConfigResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateWorkerConfig<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Workflowservice_V1_WorkflowService.Method.UpdateWorkerConfig.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Temporal_Api_Workflowservice_V1_WorkflowService.ClientProtocol {
    /// Call the "RegisterNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RegisterNamespace creates a new namespace which can be used as a container for all resources.
    /// > 
    /// > A Namespace is a top level entity within Temporal, and is used as a container for resources
    /// > like workflow executions, task queues, etc. A Namespace acts as a sandbox and provides
    /// > isolation for all resources within the namespace. All resources belongs to exactly one
    /// > namespace.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func registerNamespace<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RegisterNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.registerNamespace(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RegisterNamespaceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DescribeNamespace returns the information and configuration for a registered namespace.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeNamespace<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.describeNamespace(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DescribeNamespaceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListNamespaces" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListNamespaces returns the information and configuration for all namespaces.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListNamespacesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listNamespaces<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListNamespacesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListNamespacesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listNamespaces(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListNamespacesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListNamespacesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateNamespace is used to update the information and configuration of a registered
    /// > namespace.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateNamespace<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateNamespace(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_UpdateNamespaceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeprecateNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeprecateNamespace is used to update the state of a registered namespace to DEPRECATED.
    /// > 
    /// > Once the namespace is deprecated it cannot be used to start new workflow executions. Existing
    /// > workflow executions will continue to run on deprecated namespaces.
    /// > Deprecated.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: Deprecated --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deprecateNamespace<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeprecateNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deprecateNamespace(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DeprecateNamespaceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StartWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > StartWorkflowExecution starts a new workflow execution.
    /// > 
    /// > It will create the execution with a `WORKFLOW_EXECUTION_STARTED` event in its history and
    /// > also schedule the first workflow task. Returns `WorkflowExecutionAlreadyStarted`, if an
    /// > instance already exists with same workflow id.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func startWorkflowExecution<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.startWorkflowExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ExecuteMultiOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ExecuteMultiOperation executes multiple operations within a single workflow.
    /// > 
    /// > Operations are started atomically, meaning if *any* operation fails to be started, none are,
    /// > and the request fails. Upon start, the API returns only when *all* operations have a response.
    /// > 
    /// > Upon failure, it returns `MultiOperationExecutionFailure` where the status code
    /// > equals the status code of the *first* operation that failed to be started.
    /// > 
    /// > NOTE: Experimental API.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func executeMultiOperation<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.executeMultiOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWorkflowExecutionHistory" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetWorkflowExecutionHistory returns the history of specified workflow execution. Fails with
    /// > `NotFound` if the specified workflow execution is unknown to the service.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getWorkflowExecutionHistory<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getWorkflowExecutionHistory(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWorkflowExecutionHistoryReverse" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetWorkflowExecutionHistoryReverse returns the history of specified workflow execution in reverse 
    /// > order (starting from last event). Fails with`NotFound` if the specified workflow execution is 
    /// > unknown to the service.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getWorkflowExecutionHistoryReverse<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getWorkflowExecutionHistoryReverse(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PollWorkflowTaskQueue" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PollWorkflowTaskQueue is called by workers to make progress on workflows.
    /// > 
    /// > A WorkflowTask is dispatched to callers for active workflow executions with pending workflow
    /// > tasks. The worker is expected to call `RespondWorkflowTaskCompleted` when it is done
    /// > processing the task. The service will create a `WorkflowTaskStarted` event in the history for
    /// > this task before handing it to the worker.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func pollWorkflowTaskQueue<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.pollWorkflowTaskQueue(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondWorkflowTaskCompleted" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondWorkflowTaskCompleted is called by workers to successfully complete workflow tasks
    /// > they received from `PollWorkflowTaskQueue`.
    /// > 
    /// > Completing a WorkflowTask will write a `WORKFLOW_TASK_COMPLETED` event to the workflow's
    /// > history, along with events corresponding to whatever commands the SDK generated while
    /// > executing the task (ex timer started, activity task scheduled, etc).
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondWorkflowTaskCompleted<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.respondWorkflowTaskCompleted(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondWorkflowTaskFailed" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondWorkflowTaskFailed is called by workers to indicate the processing of a workflow task
    /// > failed.
    /// > 
    /// > This results in a `WORKFLOW_TASK_FAILED` event written to the history, and a new workflow
    /// > task will be scheduled. This API can be used to report unhandled failures resulting from
    /// > applying the workflow task.
    /// > 
    /// > Temporal will only append first WorkflowTaskFailed event to the history of workflow execution
    /// > for consecutive failures.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondWorkflowTaskFailed<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.respondWorkflowTaskFailed(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PollActivityTaskQueue" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PollActivityTaskQueue is called by workers to process activity tasks from a specific task
    /// > queue.
    /// > 
    /// > The worker is expected to call one of the `RespondActivityTaskXXX` methods when it is done
    /// > processing the task.
    /// > 
    /// > An activity task is dispatched whenever a `SCHEDULE_ACTIVITY_TASK` command is produced during
    /// > workflow execution. An in memory `ACTIVITY_TASK_STARTED` event is written to mutable state
    /// > before the task is dispatched to the worker. The started event, and the final event
    /// > (`ACTIVITY_TASK_COMPLETED` / `ACTIVITY_TASK_FAILED` / `ACTIVITY_TASK_TIMED_OUT`) will both be
    /// > written permanently to Workflow execution history when Activity is finished. This is done to
    /// > avoid writing many events in the case of a failure/retry loop.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func pollActivityTaskQueue<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.pollActivityTaskQueue(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RecordActivityTaskHeartbeat" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RecordActivityTaskHeartbeat is optionally called by workers while they execute activities.
    /// > 
    /// > If worker fails to heartbeat within the `heartbeat_timeout` interval for the activity task,
    /// > then it will be marked as timed out and an `ACTIVITY_TASK_TIMED_OUT` event will be written to
    /// > the workflow history. Calling `RecordActivityTaskHeartbeat` will fail with `NotFound` in
    /// > such situations, in that event, the SDK should request cancellation of the activity.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func recordActivityTaskHeartbeat<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.recordActivityTaskHeartbeat(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RecordActivityTaskHeartbeatById" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > See `RecordActivityTaskHeartbeat`. This version allows clients to record heartbeats by
    /// > namespace/workflow id/activity id instead of task token.
    /// > 
    /// > (-- api-linter: core::0136::prepositions=disabled
    /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func recordActivityTaskHeartbeatById<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.recordActivityTaskHeartbeatById(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondActivityTaskCompleted" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondActivityTaskCompleted is called by workers when they successfully complete an activity
    /// > task.
    /// > 
    /// > This results in a new `ACTIVITY_TASK_COMPLETED` event being written to the workflow history
    /// > and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
    /// > no longer valid due to activity timeout, already being completed, or never having existed.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondActivityTaskCompleted<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.respondActivityTaskCompleted(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondActivityTaskCompletedById" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > See `RecordActivityTaskCompleted`. This version allows clients to record completions by
    /// > namespace/workflow id/activity id instead of task token.
    /// > 
    /// > (-- api-linter: core::0136::prepositions=disabled
    /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondActivityTaskCompletedById<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.respondActivityTaskCompletedById(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondActivityTaskFailed" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondActivityTaskFailed is called by workers when processing an activity task fails.
    /// > 
    /// > This results in a new `ACTIVITY_TASK_FAILED` event being written to the workflow history and
    /// > a new workflow task created for the workflow. Fails with `NotFound` if the task token is no
    /// > longer valid due to activity timeout, already being completed, or never having existed.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondActivityTaskFailed<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.respondActivityTaskFailed(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondActivityTaskFailedById" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > See `RecordActivityTaskFailed`. This version allows clients to record failures by
    /// > namespace/workflow id/activity id instead of task token.
    /// > 
    /// > (-- api-linter: core::0136::prepositions=disabled
    /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondActivityTaskFailedById<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.respondActivityTaskFailedById(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondActivityTaskCanceled" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondActivityTaskFailed is called by workers when processing an activity task fails.
    /// > 
    /// > This results in a new `ACTIVITY_TASK_CANCELED` event being written to the workflow history
    /// > and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
    /// > no longer valid due to activity timeout, already being completed, or never having existed.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondActivityTaskCanceled<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.respondActivityTaskCanceled(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondActivityTaskCanceledById" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > See `RecordActivityTaskCanceled`. This version allows clients to record failures by
    /// > namespace/workflow id/activity id instead of task token.
    /// > 
    /// > (-- api-linter: core::0136::prepositions=disabled
    /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondActivityTaskCanceledById<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.respondActivityTaskCanceledById(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RequestCancelWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RequestCancelWorkflowExecution is called by workers when they want to request cancellation of
    /// > a workflow execution.
    /// > 
    /// > This results in a new `WORKFLOW_EXECUTION_CANCEL_REQUESTED` event being written to the
    /// > workflow history and a new workflow task created for the workflow. It returns success if the requested
    /// > workflow is already closed. It fails with 'NotFound' if the requested workflow doesn't exist.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func requestCancelWorkflowExecution<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.requestCancelWorkflowExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SignalWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > SignalWorkflowExecution is used to send a signal to a running workflow execution.
    /// > 
    /// > This results in a `WORKFLOW_EXECUTION_SIGNALED` event recorded in the history and a workflow
    /// > task being created for the execution.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func signalWorkflowExecution<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.signalWorkflowExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SignalWithStartWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > SignalWithStartWorkflowExecution is used to ensure a signal is sent to a workflow, even if
    /// > it isn't yet started.
    /// > 
    /// > If the workflow is running, a `WORKFLOW_EXECUTION_SIGNALED` event is recorded in the history
    /// > and a workflow task is generated.
    /// > 
    /// > If the workflow is not running or not found, then the workflow is created with
    /// > `WORKFLOW_EXECUTION_STARTED` and `WORKFLOW_EXECUTION_SIGNALED` events in its history, and a
    /// > workflow task is generated.
    /// > 
    /// > (-- api-linter: core::0136::prepositions=disabled
    /// >     aip.dev/not-precedent: "With" is used to indicate combined operation. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func signalWithStartWorkflowExecution<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.signalWithStartWorkflowExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResetWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ResetWorkflowExecution will reset an existing workflow execution to a specified
    /// > `WORKFLOW_TASK_COMPLETED` event (exclusive). It will immediately terminate the current
    /// > execution instance.
    /// > TODO: Does exclusive here mean *just* the completed event, or also WFT started? Otherwise the task is doomed to time out?
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func resetWorkflowExecution<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.resetWorkflowExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "TerminateWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TerminateWorkflowExecution terminates an existing workflow execution by recording a
    /// > `WORKFLOW_EXECUTION_TERMINATED` event in the history and immediately terminating the
    /// > execution instance.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func terminateWorkflowExecution<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.terminateWorkflowExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteWorkflowExecution asynchronously deletes a specific Workflow Execution (when
    /// > WorkflowExecution.run_id is provided) or the latest Workflow Execution (when
    /// > WorkflowExecution.run_id is not provided). If the Workflow Execution is Running, it will be
    /// > terminated before deletion.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: Workflow deletion not exposed to HTTP, users should use cancel or terminate. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteWorkflowExecution<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteWorkflowExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListOpenWorkflowExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific namespace.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: HTTP users should use ListWorkflowExecutions instead. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listOpenWorkflowExecutions<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listOpenWorkflowExecutions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListClosedWorkflowExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific namespace.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: HTTP users should use ListWorkflowExecutions instead. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listClosedWorkflowExecutions<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listClosedWorkflowExecutions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListWorkflowExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListWorkflowExecutions is a visibility API to list workflow executions in a specific namespace.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listWorkflowExecutions<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listWorkflowExecutions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListArchivedWorkflowExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListArchivedWorkflowExecutions is a visibility API to list archived workflow executions in a specific namespace.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listArchivedWorkflowExecutions<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listArchivedWorkflowExecutions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ScanWorkflowExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ScanWorkflowExecutions is a visibility API to list large amount of workflow executions in a specific namespace without order.
    /// > 
    /// > Deprecated: Replaced with `ListWorkflowExecutions`.
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: HTTP users should use ListWorkflowExecutions instead. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func scanWorkflowExecutions<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.scanWorkflowExecutions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CountWorkflowExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CountWorkflowExecutions is a visibility API to count of workflow executions in a specific namespace.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func countWorkflowExecutions<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.countWorkflowExecutions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSearchAttributes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetSearchAttributes is a visibility API to get all legal keys that could be used in list APIs
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose this search attribute API to HTTP (but may expose on OperatorService). --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getSearchAttributes<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetSearchAttributesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getSearchAttributes(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_GetSearchAttributesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondQueryTaskCompleted" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondQueryTaskCompleted is called by workers to complete queries which were delivered on
    /// > the `query` (not `queries`) field of a `PollWorkflowTaskQueueResponse`.
    /// > 
    /// > Completing the query will unblock the corresponding client call to `QueryWorkflow` and return
    /// > the query result a response.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondQueryTaskCompleted<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.respondQueryTaskCompleted(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResetStickyTaskQueue" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ResetStickyTaskQueue resets the sticky task queue related information in the mutable state of
    /// > a given workflow. This is prudent for workers to perform if a workflow has been paged out of
    /// > their cache.
    /// > 
    /// > Things cleared are:
    /// > 1. StickyTaskQueue
    /// > 2. StickyScheduleToStartTimeout
    /// > 
    /// > When possible, ShutdownWorker should be preferred over
    /// > ResetStickyTaskQueue (particularly when a worker is shutting down or
    /// > cycling).
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func resetStickyTaskQueue<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.resetStickyTaskQueue(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ShutdownWorker" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ShutdownWorker is used to indicate that the given sticky task
    /// > queue is no longer being polled by its worker. Following the completion of
    /// > ShutdownWorker, newly-added workflow tasks will instead be placed
    /// > in the normal task queue, eligible for any worker to pick up.
    /// > 
    /// > ShutdownWorker should be called by workers while shutting down,
    /// > after they've shut down their pollers. If another sticky poll
    /// > request is issued, the sticky task queue will be revived.
    /// > 
    /// > As of Temporal Server v1.25.0, ShutdownWorker hasn't yet been implemented.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func shutdownWorker<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ShutdownWorkerResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.shutdownWorker(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ShutdownWorkerResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "QueryWorkflow" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > QueryWorkflow requests a query be executed for a specified workflow execution.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_QueryWorkflowRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func queryWorkflow<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_QueryWorkflowRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_QueryWorkflowResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.queryWorkflow(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_QueryWorkflowRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_QueryWorkflowResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DescribeWorkflowExecution returns information about the specified workflow execution.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeWorkflowExecution<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.describeWorkflowExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeTaskQueue" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DescribeTaskQueue returns the following information about the target task queue, broken down by Build ID:
    /// >   - List of pollers
    /// >   - Workflow Reachability status
    /// >   - Backlog info for Workflow and/or Activity tasks
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeTaskQueue<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeTaskQueueResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.describeTaskQueue(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DescribeTaskQueueResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetClusterInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetClusterInfo returns information about temporal cluster
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetClusterInfoRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getClusterInfo<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetClusterInfoRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetClusterInfoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getClusterInfo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_GetClusterInfoRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_GetClusterInfoResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSystemInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetSystemInfo returns information about the system.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetSystemInfoRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getSystemInfo<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetSystemInfoRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetSystemInfoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getSystemInfo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_GetSystemInfoRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_GetSystemInfoResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListTaskQueuePartitions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose this low-level API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listTaskQueuePartitions<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listTaskQueuePartitions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new schedule.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_CreateScheduleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createSchedule<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_CreateScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_CreateScheduleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_CreateScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_CreateScheduleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Returns the schedule description and current state of an existing schedule.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeScheduleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeSchedule<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeScheduleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.describeSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DescribeScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DescribeScheduleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Changes the configuration or state of an existing schedule.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateScheduleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateSchedule<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateScheduleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_UpdateScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_UpdateScheduleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PatchSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Makes a specific change to a schedule or triggers an immediate action.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PatchScheduleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func patchSchedule<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PatchScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PatchScheduleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.patchSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_PatchScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_PatchScheduleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListScheduleMatchingTimes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists matching times within a range.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listScheduleMatchingTimes<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listScheduleMatchingTimes(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a schedule, removing it from the system.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteScheduleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteSchedule<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteScheduleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteScheduleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteSchedule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DeleteScheduleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DeleteScheduleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListSchedules" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List all schedules in a namespace.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListSchedulesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listSchedules<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListSchedulesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListSchedulesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listSchedules(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListSchedulesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListSchedulesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateWorkerBuildIdCompatibility" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deprecated. Use `UpdateWorkerVersioningRules`.
    /// > 
    /// > Allows users to specify sets of worker build id versions on a per task queue basis. Versions
    /// > are ordered, and may be either compatible with some extant version, or a new incompatible
    /// > version, forming sets of ids which are incompatible with each other, but whose contained
    /// > members are compatible with one another.
    /// > 
    /// > A single build id may be mapped to multiple task queues using this API for cases where a single process hosts
    /// > multiple workers. 
    /// > 
    /// > To query which workers can be retired, use the `GetWorkerTaskReachability` API.
    /// > 
    /// > NOTE: The number of task queues mapped to a single build id is limited by the `limit.taskQueuesPerBuildId`
    /// > (default is 20), if this limit is exceeded this API will error with a FailedPrecondition.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do yet expose versioning API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateWorkerBuildIdCompatibility<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateWorkerBuildIdCompatibility(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWorkerBuildIdCompatibility" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deprecated. Use `GetWorkerVersioningRules`.
    /// > Fetches the worker build id versioning sets for a task queue.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getWorkerBuildIdCompatibility<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getWorkerBuildIdCompatibility(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateWorkerVersioningRules" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Use this API to manage Worker Versioning Rules for a given Task Queue. There are two types of
    /// > rules: Build ID Assignment rules and Compatible Build ID Redirect rules.
    /// > 
    /// > Assignment rules determine how to assign new executions to a Build IDs. Their primary
    /// > use case is to specify the latest Build ID but they have powerful features for gradual rollout
    /// > of a new Build ID.
    /// > 
    /// > Once a workflow execution is assigned to a Build ID and it completes its first Workflow Task,
    /// > the workflow stays on the assigned Build ID regardless of changes in assignment rules. This
    /// > eliminates the need for compatibility between versions when you only care about using the new
    /// > version for new workflows and let existing workflows finish in their own version.
    /// > 
    /// > Activities, Child Workflows and Continue-as-New executions have the option to inherit the
    /// > Build ID of their parent/previous workflow or use the latest assignment rules to independently
    /// > select a Build ID.
    /// > 
    /// > Redirect rules should only be used when you want to move workflows and activities assigned to
    /// > one Build ID (source) to another compatible Build ID (target). You are responsible to make sure
    /// > the target Build ID of a redirect rule is able to process event histories made by the source
    /// > Build ID by using [Patching](https://docs.temporal.io/workflows#patching) or other means.
    /// > 
    /// > WARNING: Worker Versioning is not yet stable and the API and behavior may change incompatibly.
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do yet expose versioning API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateWorkerVersioningRules<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateWorkerVersioningRules(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWorkerVersioningRules" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Fetches the Build ID assignment and redirect rules for a Task Queue.
    /// > WARNING: Worker Versioning is not yet stable and the API and behavior may change incompatibly.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getWorkerVersioningRules<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getWorkerVersioningRules(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWorkerTaskReachability" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deprecated. Use `DescribeTaskQueue`.
    /// > 
    /// > Fetches task reachability to determine whether a worker may be retired.
    /// > The request may specify task queues to query for or let the server fetch all task queues mapped to the given
    /// > build IDs.
    /// > 
    /// > When requesting a large number of task queues or all task queues associated with the given build ids in a
    /// > namespace, all task queues will be listed in the response but some of them may not contain reachability
    /// > information due to a server enforced limit. When reaching the limit, task queues that reachability information
    /// > could not be retrieved for will be marked with a single TASK_REACHABILITY_UNSPECIFIED entry. The caller may issue
    /// > another call to get the reachability for those task queues.
    /// > 
    /// > Open source users can adjust this limit by setting the server's dynamic config value for
    /// > `limit.reachabilityTaskQueueScan` with the caveat that this call can strain the visibility store.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getWorkerTaskReachability<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getWorkerTaskReachability(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeDeployment" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Describes a worker deployment.
    /// > Experimental. This API might significantly change or be removed in a future release.
    /// > Deprecated. Replaced with `DescribeWorkerDeploymentVersion`.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeDeployment<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeDeploymentResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.describeDeployment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DescribeDeploymentResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeWorkerDeploymentVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Describes a worker deployment version.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeWorkerDeploymentVersion<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.describeWorkerDeploymentVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDeployments" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists worker deployments in the namespace. Optionally can filter based on deployment series
    /// > name.
    /// > Experimental. This API might significantly change or be removed in a future release.
    /// > Deprecated. Replaced with `ListWorkerDeployments`.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListDeploymentsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listDeployments<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListDeploymentsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListDeploymentsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listDeployments(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListDeploymentsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListDeploymentsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDeploymentReachability" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Returns the reachability level of a worker deployment to help users decide when it is time
    /// > to decommission a deployment. Reachability level is calculated based on the deployment's
    /// > `status` and existing workflows that depend on the given deployment for their execution.
    /// > Calculating reachability is relatively expensive. Therefore, server might return a recently
    /// > cached value. In such a case, the `last_update_time` will inform you about the actual
    /// > reachability calculation time.
    /// > Experimental. This API might significantly change or be removed in a future release.
    /// > Deprecated. Replaced with `DrainageInfo` returned by `DescribeWorkerDeploymentVersion`.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getDeploymentReachability<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getDeploymentReachability(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCurrentDeployment" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Returns the current deployment (and its info) for a given deployment series.
    /// > Experimental. This API might significantly change or be removed in a future release.
    /// > Deprecated. Replaced by `current_version` returned by `DescribeWorkerDeployment`.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getCurrentDeployment<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCurrentDeployment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetCurrentDeployment" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Sets a deployment as the current deployment for its deployment series. Can optionally update
    /// > the metadata of the deployment as well.
    /// > Experimental. This API might significantly change or be removed in a future release.
    /// > Deprecated. Replaced by `SetWorkerDeploymentCurrentVersion`.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func setCurrentDeployment<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setCurrentDeployment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetWorkerDeploymentCurrentVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Set/unset the Current Version of a Worker Deployment. Automatically unsets the Ramping
    /// > Version if it is the Version being set as Current.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func setWorkerDeploymentCurrentVersion<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setWorkerDeploymentCurrentVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeWorkerDeployment" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Describes a Worker Deployment.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeWorkerDeployment<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.describeWorkerDeployment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteWorkerDeployment" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes records of (an old) Deployment. A deployment can only be deleted if
    /// > it has no Version in it.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteWorkerDeployment<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteWorkerDeployment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteWorkerDeploymentVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Used for manual deletion of Versions. User can delete a Version only when all the
    /// > following conditions are met:
    /// >  - It is not the Current or Ramping Version of its Deployment.
    /// >  - It has no active pollers (none of the task queues in the Version have pollers)
    /// >  - It is not draining (see WorkerDeploymentVersionInfo.drainage_info). This condition
    /// >    can be skipped by passing `skip-drainage=true`.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteWorkerDeploymentVersion<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteWorkerDeploymentVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetWorkerDeploymentRampingVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Set/unset the Ramping Version of a Worker Deployment and its ramp percentage. Can be used for
    /// > gradual ramp to unversioned workers too.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func setWorkerDeploymentRampingVersion<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setWorkerDeploymentRampingVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListWorkerDeployments" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all Worker Deployments that are tracked in the Namespace.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listWorkerDeployments<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listWorkerDeployments(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateWorkerDeploymentVersionMetadata" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates the user-given metadata attached to a Worker Deployment Version.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateWorkerDeploymentVersionMetadata<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateWorkerDeploymentVersionMetadata(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Invokes the specified Update function on user Workflow code.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateWorkflowExecution<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateWorkflowExecution(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PollWorkflowExecutionUpdate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Polls a Workflow Execution for the outcome of a Workflow Update
    /// > previously issued through the UpdateWorkflowExecution RPC. The effective
    /// > timeout on this call will be shorter of the the caller-supplied gRPC
    /// > timeout and the server's configured long-poll timeout.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We don't expose update polling API to HTTP in favor of a potential future non-blocking form. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func pollWorkflowExecutionUpdate<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.pollWorkflowExecutionUpdate(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StartBatchOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > StartBatchOperation starts a new batch operation
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_StartBatchOperationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func startBatchOperation<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_StartBatchOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_StartBatchOperationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.startBatchOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_StartBatchOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_StartBatchOperationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StopBatchOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > StopBatchOperation stops a batch operation
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_StopBatchOperationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func stopBatchOperation<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_StopBatchOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_StopBatchOperationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.stopBatchOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_StopBatchOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_StopBatchOperationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeBatchOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DescribeBatchOperation returns the information about a batch operation
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeBatchOperation<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeBatchOperationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.describeBatchOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DescribeBatchOperationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListBatchOperations" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListBatchOperations returns a list of batch operations
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listBatchOperations<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListBatchOperationsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listBatchOperations(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListBatchOperationsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PollNexusTaskQueue" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PollNexusTaskQueue is a long poll call used by workers to receive Nexus tasks.
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func pollNexusTaskQueue<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.pollNexusTaskQueue(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondNexusTaskCompleted" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondNexusTaskCompleted is called by workers to respond to Nexus tasks received via PollNexusTaskQueue.
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondNexusTaskCompleted<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.respondNexusTaskCompleted(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondNexusTaskFailed" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondNexusTaskFailed is called by workers to fail Nexus tasks received via PollNexusTaskQueue.
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondNexusTaskFailed<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.respondNexusTaskFailed(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateActivityOptions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateActivityOptions is called by the client to update the options of an activity by its ID or type.
    /// > If there are multiple pending activities of the provided type - all of them will be updated.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateActivityOptions<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateActivityOptions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateWorkflowExecutionOptions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateWorkflowExecutionOptions partially updates the WorkflowExecutionOptions of an existing workflow execution.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateWorkflowExecutionOptions<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateWorkflowExecutionOptions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PauseActivity" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PauseActivity pauses the execution of an activity specified by its ID or type.
    /// > If there are multiple pending activities of the provided type - all of them will be paused
    /// > 
    /// > Pausing an activity means:
    /// > - If the activity is currently waiting for a retry or is running and subsequently fails,
    /// >   it will not be rescheduled until it is unpaused.
    /// > - If the activity is already paused, calling this method will have no effect.
    /// > - If the activity is running and finishes successfully, the activity will be completed.
    /// > - If the activity is running and finishes with failure:
    /// >   * if there is no retry left - the activity will be completed.
    /// >   * if there are more retries left - the activity will be paused.
    /// > For long-running activities:
    /// > - activities in paused state will send a cancellation with "activity_paused" set to 'true' in response to 'RecordActivityTaskHeartbeat'.
    /// > - The activity should respond to the cancellation accordingly.
    /// > 
    /// > Returns a `NotFound` error if there is no pending activity with the provided ID or type
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_PauseActivityRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func pauseActivity<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PauseActivityRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PauseActivityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.pauseActivity(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_PauseActivityRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_PauseActivityResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UnpauseActivity" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UnpauseActivity unpauses the execution of an activity specified by its ID or type.
    /// > If there are multiple pending activities of the provided type - all of them will be unpaused.
    /// > 
    /// > If activity is not paused, this call will have no effect.
    /// > If the activity was paused while waiting for retry, it will be scheduled immediately (* see 'jitter' flag).
    /// > Once the activity is unpaused, all timeout timers will be regenerated.
    /// > 
    /// > Flags:
    /// > 'jitter': the activity will be scheduled at a random time within the jitter duration.
    /// > 'reset_attempts': the number of attempts will be reset.
    /// > 'reset_heartbeat': the activity heartbeat timer and heartbeats will be reset.
    /// > 
    /// > Returns a `NotFound` error if there is no pending activity with the provided ID or type
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UnpauseActivityRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func unpauseActivity<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UnpauseActivityRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UnpauseActivityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.unpauseActivity(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_UnpauseActivityRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_UnpauseActivityResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResetActivity" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ResetActivity resets the execution of an activity specified by its ID or type.
    /// > If there are multiple pending activities of the provided type - all of them will be reset.
    /// > 
    /// > Resetting an activity means:
    /// > * number of attempts will be reset to 0.
    /// > * activity timeouts will be reset.
    /// > * if the activity is waiting for retry, and it is not paused or 'keep_paused' is not provided:
    /// >    it will be scheduled immediately (* see 'jitter' flag),
    /// > 
    /// > Flags:
    /// > 
    /// > 'jitter': the activity will be scheduled at a random time within the jitter duration.
    /// > If the activity currently paused it will be unpaused, unless 'keep_paused' flag is provided.
    /// > 'reset_heartbeats': the activity heartbeat timer and heartbeats will be reset.
    /// > 'keep_paused': if the activity is paused, it will remain paused.
    /// > 
    /// > Returns a `NotFound` error if there is no pending activity with the provided ID or type.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ResetActivityRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func resetActivity<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ResetActivityRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ResetActivityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.resetActivity(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ResetActivityRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ResetActivityResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateWorkflowRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a new workflow rule. The rules are used to control the workflow execution.
    /// > The rule will be applied to all running and new workflows in the namespace.
    /// > If the rule with such ID already exist this call will fail
    /// > Note: the rules are part of namespace configuration and will be stored in the namespace config.
    /// > Namespace config is eventually consistent.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createWorkflowRule<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createWorkflowRule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeWorkflowRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DescribeWorkflowRule return the rule specification for existing rule id.
    /// > If there is no rule with such id - NOT FOUND error will be returned.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeWorkflowRule<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.describeWorkflowRule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteWorkflowRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete rule by rule id
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteWorkflowRule<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteWorkflowRule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListWorkflowRules" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Return all namespace workflow rules
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listWorkflowRules<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkflowRulesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listWorkflowRules(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListWorkflowRulesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "TriggerWorkflowRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TriggerWorkflowRule allows to:
    /// >  * trigger existing rule for a specific workflow execution;
    /// >  * trigger rule for a specific workflow execution without creating a rule;
    /// > This is useful for one-off operations.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func triggerWorkflowRule<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.triggerWorkflowRule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RecordWorkerHeartbeat" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > WorkerHeartbeat receive heartbeat request from the worker.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func recordWorkerHeartbeat<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.recordWorkerHeartbeat(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListWorkers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListWorkers is a visibility API to list worker status information in a specific namespace.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_ListWorkersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listWorkers<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listWorkers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_ListWorkersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_ListWorkersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateTaskQueueConfig" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates task queue configuration.
    /// > For the overall queue rate limit: the rate limit set by this api overrides the worker-set rate limit,
    /// > which uncouples the rate limit from the worker lifecycle.
    /// > If the overall queue rate limit is unset, the worker-set rate limit takes effect.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateTaskQueueConfig<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateTaskQueueConfig(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FetchWorkerConfig" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > FetchWorkerConfig returns the worker configuration for a specific worker.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func fetchWorkerConfig<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_FetchWorkerConfigResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.fetchWorkerConfig(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_FetchWorkerConfigResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateWorkerConfig" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateWorkerConfig updates the worker configuration of one or more workers.
    /// > Can be used to partially update the worker configuration.
    /// > Can be used to update the configuration of multiple workers.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateWorkerConfig<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateWorkerConfig(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Temporal_Api_Workflowservice_V1_WorkflowService.ClientProtocol {
    /// Call the "RegisterNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RegisterNamespace creates a new namespace which can be used as a container for all resources.
    /// > 
    /// > A Namespace is a top level entity within Temporal, and is used as a container for resources
    /// > like workflow executions, task queues, etc. A Namespace acts as a sandbox and provides
    /// > isolation for all resources within the namespace. All resources belongs to exactly one
    /// > namespace.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func registerNamespace<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RegisterNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RegisterNamespaceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.registerNamespace(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DescribeNamespace returns the information and configuration for a registered namespace.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeNamespace<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeNamespaceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.describeNamespace(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListNamespaces" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListNamespaces returns the information and configuration for all namespaces.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listNamespaces<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListNamespacesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListNamespacesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListNamespacesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listNamespaces(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateNamespace is used to update the information and configuration of a registered
    /// > namespace.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateNamespace<Result>(
        _ message: Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateNamespaceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateNamespace(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeprecateNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeprecateNamespace is used to update the state of a registered namespace to DEPRECATED.
    /// > 
    /// > Once the namespace is deprecated it cannot be used to start new workflow executions. Existing
    /// > workflow executions will continue to run on deprecated namespaces.
    /// > Deprecated.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: Deprecated --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deprecateNamespace<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeprecateNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeprecateNamespaceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deprecateNamespace(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StartWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > StartWorkflowExecution starts a new workflow execution.
    /// > 
    /// > It will create the execution with a `WORKFLOW_EXECUTION_STARTED` event in its history and
    /// > also schedule the first workflow task. Returns `WorkflowExecutionAlreadyStarted`, if an
    /// > instance already exists with same workflow id.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func startWorkflowExecution<Result>(
        _ message: Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_StartWorkflowExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.startWorkflowExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ExecuteMultiOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ExecuteMultiOperation executes multiple operations within a single workflow.
    /// > 
    /// > Operations are started atomically, meaning if *any* operation fails to be started, none are,
    /// > and the request fails. Upon start, the API returns only when *all* operations have a response.
    /// > 
    /// > Upon failure, it returns `MultiOperationExecutionFailure` where the status code
    /// > equals the status code of the *first* operation that failed to be started.
    /// > 
    /// > NOTE: Experimental API.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func executeMultiOperation<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ExecuteMultiOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.executeMultiOperation(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWorkflowExecutionHistory" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetWorkflowExecutionHistory returns the history of specified workflow execution. Fails with
    /// > `NotFound` if the specified workflow execution is unknown to the service.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getWorkflowExecutionHistory<Result>(
        _ message: Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getWorkflowExecutionHistory(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWorkflowExecutionHistoryReverse" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetWorkflowExecutionHistoryReverse returns the history of specified workflow execution in reverse 
    /// > order (starting from last event). Fails with`NotFound` if the specified workflow execution is 
    /// > unknown to the service.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getWorkflowExecutionHistoryReverse<Result>(
        _ message: Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkflowExecutionHistoryReverseRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getWorkflowExecutionHistoryReverse(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PollWorkflowTaskQueue" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PollWorkflowTaskQueue is called by workers to make progress on workflows.
    /// > 
    /// > A WorkflowTask is dispatched to callers for active workflow executions with pending workflow
    /// > tasks. The worker is expected to call `RespondWorkflowTaskCompleted` when it is done
    /// > processing the task. The service will create a `WorkflowTaskStarted` event in the history for
    /// > this task before handing it to the worker.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func pollWorkflowTaskQueue<Result>(
        _ message: Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollWorkflowTaskQueueRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.pollWorkflowTaskQueue(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondWorkflowTaskCompleted" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondWorkflowTaskCompleted is called by workers to successfully complete workflow tasks
    /// > they received from `PollWorkflowTaskQueue`.
    /// > 
    /// > Completing a WorkflowTask will write a `WORKFLOW_TASK_COMPLETED` event to the workflow's
    /// > history, along with events corresponding to whatever commands the SDK generated while
    /// > executing the task (ex timer started, activity task scheduled, etc).
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondWorkflowTaskCompleted<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskCompletedRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.respondWorkflowTaskCompleted(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondWorkflowTaskFailed" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondWorkflowTaskFailed is called by workers to indicate the processing of a workflow task
    /// > failed.
    /// > 
    /// > This results in a `WORKFLOW_TASK_FAILED` event written to the history, and a new workflow
    /// > task will be scheduled. This API can be used to report unhandled failures resulting from
    /// > applying the workflow task.
    /// > 
    /// > Temporal will only append first WorkflowTaskFailed event to the history of workflow execution
    /// > for consecutive failures.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondWorkflowTaskFailed<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondWorkflowTaskFailedRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.respondWorkflowTaskFailed(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PollActivityTaskQueue" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PollActivityTaskQueue is called by workers to process activity tasks from a specific task
    /// > queue.
    /// > 
    /// > The worker is expected to call one of the `RespondActivityTaskXXX` methods when it is done
    /// > processing the task.
    /// > 
    /// > An activity task is dispatched whenever a `SCHEDULE_ACTIVITY_TASK` command is produced during
    /// > workflow execution. An in memory `ACTIVITY_TASK_STARTED` event is written to mutable state
    /// > before the task is dispatched to the worker. The started event, and the final event
    /// > (`ACTIVITY_TASK_COMPLETED` / `ACTIVITY_TASK_FAILED` / `ACTIVITY_TASK_TIMED_OUT`) will both be
    /// > written permanently to Workflow execution history when Activity is finished. This is done to
    /// > avoid writing many events in the case of a failure/retry loop.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func pollActivityTaskQueue<Result>(
        _ message: Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollActivityTaskQueueRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.pollActivityTaskQueue(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RecordActivityTaskHeartbeat" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RecordActivityTaskHeartbeat is optionally called by workers while they execute activities.
    /// > 
    /// > If worker fails to heartbeat within the `heartbeat_timeout` interval for the activity task,
    /// > then it will be marked as timed out and an `ACTIVITY_TASK_TIMED_OUT` event will be written to
    /// > the workflow history. Calling `RecordActivityTaskHeartbeat` will fail with `NotFound` in
    /// > such situations, in that event, the SDK should request cancellation of the activity.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func recordActivityTaskHeartbeat<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.recordActivityTaskHeartbeat(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RecordActivityTaskHeartbeatById" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > See `RecordActivityTaskHeartbeat`. This version allows clients to record heartbeats by
    /// > namespace/workflow id/activity id instead of task token.
    /// > 
    /// > (-- api-linter: core::0136::prepositions=disabled
    /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func recordActivityTaskHeartbeatById<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RecordActivityTaskHeartbeatByIdRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.recordActivityTaskHeartbeatById(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondActivityTaskCompleted" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondActivityTaskCompleted is called by workers when they successfully complete an activity
    /// > task.
    /// > 
    /// > This results in a new `ACTIVITY_TASK_COMPLETED` event being written to the workflow history
    /// > and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
    /// > no longer valid due to activity timeout, already being completed, or never having existed.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondActivityTaskCompleted<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.respondActivityTaskCompleted(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondActivityTaskCompletedById" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > See `RecordActivityTaskCompleted`. This version allows clients to record completions by
    /// > namespace/workflow id/activity id instead of task token.
    /// > 
    /// > (-- api-linter: core::0136::prepositions=disabled
    /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondActivityTaskCompletedById<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCompletedByIdRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.respondActivityTaskCompletedById(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondActivityTaskFailed" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondActivityTaskFailed is called by workers when processing an activity task fails.
    /// > 
    /// > This results in a new `ACTIVITY_TASK_FAILED` event being written to the workflow history and
    /// > a new workflow task created for the workflow. Fails with `NotFound` if the task token is no
    /// > longer valid due to activity timeout, already being completed, or never having existed.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondActivityTaskFailed<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.respondActivityTaskFailed(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondActivityTaskFailedById" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > See `RecordActivityTaskFailed`. This version allows clients to record failures by
    /// > namespace/workflow id/activity id instead of task token.
    /// > 
    /// > (-- api-linter: core::0136::prepositions=disabled
    /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondActivityTaskFailedById<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskFailedByIdRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.respondActivityTaskFailedById(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondActivityTaskCanceled" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondActivityTaskFailed is called by workers when processing an activity task fails.
    /// > 
    /// > This results in a new `ACTIVITY_TASK_CANCELED` event being written to the workflow history
    /// > and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
    /// > no longer valid due to activity timeout, already being completed, or never having existed.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondActivityTaskCanceled<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.respondActivityTaskCanceled(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondActivityTaskCanceledById" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > See `RecordActivityTaskCanceled`. This version allows clients to record failures by
    /// > namespace/workflow id/activity id instead of task token.
    /// > 
    /// > (-- api-linter: core::0136::prepositions=disabled
    /// >     aip.dev/not-precedent: "By" is used to indicate request type. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondActivityTaskCanceledById<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondActivityTaskCanceledByIdRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.respondActivityTaskCanceledById(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RequestCancelWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RequestCancelWorkflowExecution is called by workers when they want to request cancellation of
    /// > a workflow execution.
    /// > 
    /// > This results in a new `WORKFLOW_EXECUTION_CANCEL_REQUESTED` event being written to the
    /// > workflow history and a new workflow task created for the workflow. It returns success if the requested
    /// > workflow is already closed. It fails with 'NotFound' if the requested workflow doesn't exist.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func requestCancelWorkflowExecution<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RequestCancelWorkflowExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.requestCancelWorkflowExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SignalWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > SignalWorkflowExecution is used to send a signal to a running workflow execution.
    /// > 
    /// > This results in a `WORKFLOW_EXECUTION_SIGNALED` event recorded in the history and a workflow
    /// > task being created for the execution.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func signalWorkflowExecution<Result>(
        _ message: Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SignalWorkflowExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.signalWorkflowExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SignalWithStartWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > SignalWithStartWorkflowExecution is used to ensure a signal is sent to a workflow, even if
    /// > it isn't yet started.
    /// > 
    /// > If the workflow is running, a `WORKFLOW_EXECUTION_SIGNALED` event is recorded in the history
    /// > and a workflow task is generated.
    /// > 
    /// > If the workflow is not running or not found, then the workflow is created with
    /// > `WORKFLOW_EXECUTION_STARTED` and `WORKFLOW_EXECUTION_SIGNALED` events in its history, and a
    /// > workflow task is generated.
    /// > 
    /// > (-- api-linter: core::0136::prepositions=disabled
    /// >     aip.dev/not-precedent: "With" is used to indicate combined operation. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func signalWithStartWorkflowExecution<Result>(
        _ message: Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SignalWithStartWorkflowExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.signalWithStartWorkflowExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResetWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ResetWorkflowExecution will reset an existing workflow execution to a specified
    /// > `WORKFLOW_TASK_COMPLETED` event (exclusive). It will immediately terminate the current
    /// > execution instance.
    /// > TODO: Does exclusive here mean *just* the completed event, or also WFT started? Otherwise the task is doomed to time out?
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func resetWorkflowExecution<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ResetWorkflowExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.resetWorkflowExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "TerminateWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TerminateWorkflowExecution terminates an existing workflow execution by recording a
    /// > `WORKFLOW_EXECUTION_TERMINATED` event in the history and immediately terminating the
    /// > execution instance.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func terminateWorkflowExecution<Result>(
        _ message: Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_TerminateWorkflowExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.terminateWorkflowExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteWorkflowExecution asynchronously deletes a specific Workflow Execution (when
    /// > WorkflowExecution.run_id is provided) or the latest Workflow Execution (when
    /// > WorkflowExecution.run_id is not provided). If the Workflow Execution is Running, it will be
    /// > terminated before deletion.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: Workflow deletion not exposed to HTTP, users should use cancel or terminate. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteWorkflowExecution<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkflowExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteWorkflowExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListOpenWorkflowExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific namespace.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: HTTP users should use ListWorkflowExecutions instead. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listOpenWorkflowExecutions<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListOpenWorkflowExecutionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listOpenWorkflowExecutions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListClosedWorkflowExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific namespace.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: HTTP users should use ListWorkflowExecutions instead. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listClosedWorkflowExecutions<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListClosedWorkflowExecutionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listClosedWorkflowExecutions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListWorkflowExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListWorkflowExecutions is a visibility API to list workflow executions in a specific namespace.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listWorkflowExecutions<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkflowExecutionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listWorkflowExecutions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListArchivedWorkflowExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListArchivedWorkflowExecutions is a visibility API to list archived workflow executions in a specific namespace.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listArchivedWorkflowExecutions<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListArchivedWorkflowExecutionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listArchivedWorkflowExecutions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ScanWorkflowExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ScanWorkflowExecutions is a visibility API to list large amount of workflow executions in a specific namespace without order.
    /// > 
    /// > Deprecated: Replaced with `ListWorkflowExecutions`.
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: HTTP users should use ListWorkflowExecutions instead. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func scanWorkflowExecutions<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ScanWorkflowExecutionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.scanWorkflowExecutions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CountWorkflowExecutions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CountWorkflowExecutions is a visibility API to count of workflow executions in a specific namespace.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func countWorkflowExecutions<Result>(
        _ message: Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_CountWorkflowExecutionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.countWorkflowExecutions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSearchAttributes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetSearchAttributes is a visibility API to get all legal keys that could be used in list APIs
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose this search attribute API to HTTP (but may expose on OperatorService). --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getSearchAttributes<Result>(
        _ message: Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetSearchAttributesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetSearchAttributesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getSearchAttributes(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondQueryTaskCompleted" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondQueryTaskCompleted is called by workers to complete queries which were delivered on
    /// > the `query` (not `queries`) field of a `PollWorkflowTaskQueueResponse`.
    /// > 
    /// > Completing the query will unblock the corresponding client call to `QueryWorkflow` and return
    /// > the query result a response.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondQueryTaskCompleted<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondQueryTaskCompletedRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.respondQueryTaskCompleted(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResetStickyTaskQueue" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ResetStickyTaskQueue resets the sticky task queue related information in the mutable state of
    /// > a given workflow. This is prudent for workers to perform if a workflow has been paged out of
    /// > their cache.
    /// > 
    /// > Things cleared are:
    /// > 1. StickyTaskQueue
    /// > 2. StickyScheduleToStartTimeout
    /// > 
    /// > When possible, ShutdownWorker should be preferred over
    /// > ResetStickyTaskQueue (particularly when a worker is shutting down or
    /// > cycling).
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func resetStickyTaskQueue<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ResetStickyTaskQueueRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.resetStickyTaskQueue(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ShutdownWorker" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ShutdownWorker is used to indicate that the given sticky task
    /// > queue is no longer being polled by its worker. Following the completion of
    /// > ShutdownWorker, newly-added workflow tasks will instead be placed
    /// > in the normal task queue, eligible for any worker to pick up.
    /// > 
    /// > ShutdownWorker should be called by workers while shutting down,
    /// > after they've shut down their pollers. If another sticky poll
    /// > request is issued, the sticky task queue will be revived.
    /// > 
    /// > As of Temporal Server v1.25.0, ShutdownWorker hasn't yet been implemented.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func shutdownWorker<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ShutdownWorkerResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ShutdownWorkerRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.shutdownWorker(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "QueryWorkflow" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > QueryWorkflow requests a query be executed for a specified workflow execution.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func queryWorkflow<Result>(
        _ message: Temporal_Api_Workflowservice_V1_QueryWorkflowRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_QueryWorkflowResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_QueryWorkflowRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.queryWorkflow(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DescribeWorkflowExecution returns information about the specified workflow execution.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeWorkflowExecution<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkflowExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.describeWorkflowExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeTaskQueue" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DescribeTaskQueue returns the following information about the target task queue, broken down by Build ID:
    /// >   - List of pollers
    /// >   - Workflow Reachability status
    /// >   - Backlog info for Workflow and/or Activity tasks
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeTaskQueue<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeTaskQueueResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeTaskQueueRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.describeTaskQueue(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetClusterInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetClusterInfo returns information about temporal cluster
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getClusterInfo<Result>(
        _ message: Temporal_Api_Workflowservice_V1_GetClusterInfoRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetClusterInfoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetClusterInfoRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getClusterInfo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetSystemInfo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > GetSystemInfo returns information about the system.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getSystemInfo<Result>(
        _ message: Temporal_Api_Workflowservice_V1_GetSystemInfoRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetSystemInfoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetSystemInfoRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getSystemInfo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListTaskQueuePartitions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose this low-level API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listTaskQueuePartitions<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListTaskQueuePartitionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listTaskQueuePartitions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new schedule.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createSchedule<Result>(
        _ message: Temporal_Api_Workflowservice_V1_CreateScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_CreateScheduleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_CreateScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Returns the schedule description and current state of an existing schedule.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeSchedule<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DescribeScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeScheduleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.describeSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Changes the configuration or state of an existing schedule.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateSchedule<Result>(
        _ message: Temporal_Api_Workflowservice_V1_UpdateScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateScheduleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PatchSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Makes a specific change to a schedule or triggers an immediate action.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func patchSchedule<Result>(
        _ message: Temporal_Api_Workflowservice_V1_PatchScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PatchScheduleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PatchScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.patchSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListScheduleMatchingTimes" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists matching times within a range.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listScheduleMatchingTimes<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListScheduleMatchingTimesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listScheduleMatchingTimes(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteSchedule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a schedule, removing it from the system.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteSchedule<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DeleteScheduleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteScheduleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteScheduleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteSchedule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListSchedules" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List all schedules in a namespace.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listSchedules<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListSchedulesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListSchedulesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListSchedulesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listSchedules(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateWorkerBuildIdCompatibility" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deprecated. Use `UpdateWorkerVersioningRules`.
    /// > 
    /// > Allows users to specify sets of worker build id versions on a per task queue basis. Versions
    /// > are ordered, and may be either compatible with some extant version, or a new incompatible
    /// > version, forming sets of ids which are incompatible with each other, but whose contained
    /// > members are compatible with one another.
    /// > 
    /// > A single build id may be mapped to multiple task queues using this API for cases where a single process hosts
    /// > multiple workers. 
    /// > 
    /// > To query which workers can be retired, use the `GetWorkerTaskReachability` API.
    /// > 
    /// > NOTE: The number of task queues mapped to a single build id is limited by the `limit.taskQueuesPerBuildId`
    /// > (default is 20), if this limit is exceeded this API will error with a FailedPrecondition.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do yet expose versioning API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateWorkerBuildIdCompatibility<Result>(
        _ message: Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerBuildIdCompatibilityRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateWorkerBuildIdCompatibility(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWorkerBuildIdCompatibility" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deprecated. Use `GetWorkerVersioningRules`.
    /// > Fetches the worker build id versioning sets for a task queue.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getWorkerBuildIdCompatibility<Result>(
        _ message: Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkerBuildIdCompatibilityRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getWorkerBuildIdCompatibility(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateWorkerVersioningRules" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Use this API to manage Worker Versioning Rules for a given Task Queue. There are two types of
    /// > rules: Build ID Assignment rules and Compatible Build ID Redirect rules.
    /// > 
    /// > Assignment rules determine how to assign new executions to a Build IDs. Their primary
    /// > use case is to specify the latest Build ID but they have powerful features for gradual rollout
    /// > of a new Build ID.
    /// > 
    /// > Once a workflow execution is assigned to a Build ID and it completes its first Workflow Task,
    /// > the workflow stays on the assigned Build ID regardless of changes in assignment rules. This
    /// > eliminates the need for compatibility between versions when you only care about using the new
    /// > version for new workflows and let existing workflows finish in their own version.
    /// > 
    /// > Activities, Child Workflows and Continue-as-New executions have the option to inherit the
    /// > Build ID of their parent/previous workflow or use the latest assignment rules to independently
    /// > select a Build ID.
    /// > 
    /// > Redirect rules should only be used when you want to move workflows and activities assigned to
    /// > one Build ID (source) to another compatible Build ID (target). You are responsible to make sure
    /// > the target Build ID of a redirect rule is able to process event histories made by the source
    /// > Build ID by using [Patching](https://docs.temporal.io/workflows#patching) or other means.
    /// > 
    /// > WARNING: Worker Versioning is not yet stable and the API and behavior may change incompatibly.
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do yet expose versioning API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateWorkerVersioningRules<Result>(
        _ message: Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerVersioningRulesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateWorkerVersioningRules(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWorkerVersioningRules" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Fetches the Build ID assignment and redirect rules for a Task Queue.
    /// > WARNING: Worker Versioning is not yet stable and the API and behavior may change incompatibly.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getWorkerVersioningRules<Result>(
        _ message: Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkerVersioningRulesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getWorkerVersioningRules(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWorkerTaskReachability" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deprecated. Use `DescribeTaskQueue`.
    /// > 
    /// > Fetches task reachability to determine whether a worker may be retired.
    /// > The request may specify task queues to query for or let the server fetch all task queues mapped to the given
    /// > build IDs.
    /// > 
    /// > When requesting a large number of task queues or all task queues associated with the given build ids in a
    /// > namespace, all task queues will be listed in the response but some of them may not contain reachability
    /// > information due to a server enforced limit. When reaching the limit, task queues that reachability information
    /// > could not be retrieved for will be marked with a single TASK_REACHABILITY_UNSPECIFIED entry. The caller may issue
    /// > another call to get the reachability for those task queues.
    /// > 
    /// > Open source users can adjust this limit by setting the server's dynamic config value for
    /// > `limit.reachabilityTaskQueueScan` with the caveat that this call can strain the visibility store.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getWorkerTaskReachability<Result>(
        _ message: Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetWorkerTaskReachabilityRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getWorkerTaskReachability(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeDeployment" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Describes a worker deployment.
    /// > Experimental. This API might significantly change or be removed in a future release.
    /// > Deprecated. Replaced with `DescribeWorkerDeploymentVersion`.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeDeployment<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeDeploymentResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeDeploymentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.describeDeployment(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeWorkerDeploymentVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Describes a worker deployment version.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeWorkerDeploymentVersion<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.describeWorkerDeploymentVersion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDeployments" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists worker deployments in the namespace. Optionally can filter based on deployment series
    /// > name.
    /// > Experimental. This API might significantly change or be removed in a future release.
    /// > Deprecated. Replaced with `ListWorkerDeployments`.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listDeployments<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListDeploymentsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListDeploymentsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListDeploymentsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listDeployments(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDeploymentReachability" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Returns the reachability level of a worker deployment to help users decide when it is time
    /// > to decommission a deployment. Reachability level is calculated based on the deployment's
    /// > `status` and existing workflows that depend on the given deployment for their execution.
    /// > Calculating reachability is relatively expensive. Therefore, server might return a recently
    /// > cached value. In such a case, the `last_update_time` will inform you about the actual
    /// > reachability calculation time.
    /// > Experimental. This API might significantly change or be removed in a future release.
    /// > Deprecated. Replaced with `DrainageInfo` returned by `DescribeWorkerDeploymentVersion`.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getDeploymentReachability<Result>(
        _ message: Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetDeploymentReachabilityRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getDeploymentReachability(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCurrentDeployment" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Returns the current deployment (and its info) for a given deployment series.
    /// > Experimental. This API might significantly change or be removed in a future release.
    /// > Deprecated. Replaced by `current_version` returned by `DescribeWorkerDeployment`.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getCurrentDeployment<Result>(
        _ message: Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_GetCurrentDeploymentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getCurrentDeployment(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetCurrentDeployment" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Sets a deployment as the current deployment for its deployment series. Can optionally update
    /// > the metadata of the deployment as well.
    /// > Experimental. This API might significantly change or be removed in a future release.
    /// > Deprecated. Replaced by `SetWorkerDeploymentCurrentVersion`.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func setCurrentDeployment<Result>(
        _ message: Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SetCurrentDeploymentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setCurrentDeployment(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetWorkerDeploymentCurrentVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Set/unset the Current Version of a Worker Deployment. Automatically unsets the Ramping
    /// > Version if it is the Version being set as Current.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func setWorkerDeploymentCurrentVersion<Result>(
        _ message: Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentCurrentVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setWorkerDeploymentCurrentVersion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeWorkerDeployment" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Describes a Worker Deployment.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeWorkerDeployment<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkerDeploymentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.describeWorkerDeployment(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteWorkerDeployment" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes records of (an old) Deployment. A deployment can only be deleted if
    /// > it has no Version in it.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteWorkerDeployment<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteWorkerDeployment(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteWorkerDeploymentVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Used for manual deletion of Versions. User can delete a Version only when all the
    /// > following conditions are met:
    /// >  - It is not the Current or Ramping Version of its Deployment.
    /// >  - It has no active pollers (none of the task queues in the Version have pollers)
    /// >  - It is not draining (see WorkerDeploymentVersionInfo.drainage_info). This condition
    /// >    can be skipped by passing `skip-drainage=true`.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteWorkerDeploymentVersion<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkerDeploymentVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteWorkerDeploymentVersion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetWorkerDeploymentRampingVersion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Set/unset the Ramping Version of a Worker Deployment and its ramp percentage. Can be used for
    /// > gradual ramp to unversioned workers too.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func setWorkerDeploymentRampingVersion<Result>(
        _ message: Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_SetWorkerDeploymentRampingVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setWorkerDeploymentRampingVersion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListWorkerDeployments" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all Worker Deployments that are tracked in the Namespace.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listWorkerDeployments<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkerDeploymentsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listWorkerDeployments(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateWorkerDeploymentVersionMetadata" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates the user-given metadata attached to a Worker Deployment Version.
    /// > Experimental. This API might significantly change or be removed in a future release.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateWorkerDeploymentVersionMetadata<Result>(
        _ message: Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerDeploymentVersionMetadataRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateWorkerDeploymentVersionMetadata(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateWorkflowExecution" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Invokes the specified Update function on user Workflow code.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateWorkflowExecution<Result>(
        _ message: Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateWorkflowExecution(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PollWorkflowExecutionUpdate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Polls a Workflow Execution for the outcome of a Workflow Update
    /// > previously issued through the UpdateWorkflowExecution RPC. The effective
    /// > timeout on this call will be shorter of the the caller-supplied gRPC
    /// > timeout and the server's configured long-poll timeout.
    /// > 
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We don't expose update polling API to HTTP in favor of a potential future non-blocking form. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func pollWorkflowExecutionUpdate<Result>(
        _ message: Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollWorkflowExecutionUpdateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.pollWorkflowExecutionUpdate(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StartBatchOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > StartBatchOperation starts a new batch operation
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func startBatchOperation<Result>(
        _ message: Temporal_Api_Workflowservice_V1_StartBatchOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_StartBatchOperationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_StartBatchOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.startBatchOperation(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "StopBatchOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > StopBatchOperation stops a batch operation
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func stopBatchOperation<Result>(
        _ message: Temporal_Api_Workflowservice_V1_StopBatchOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_StopBatchOperationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_StopBatchOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.stopBatchOperation(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeBatchOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DescribeBatchOperation returns the information about a batch operation
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeBatchOperation<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeBatchOperationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeBatchOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.describeBatchOperation(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListBatchOperations" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListBatchOperations returns a list of batch operations
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listBatchOperations<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListBatchOperationsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListBatchOperationsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listBatchOperations(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PollNexusTaskQueue" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PollNexusTaskQueue is a long poll call used by workers to receive Nexus tasks.
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func pollNexusTaskQueue<Result>(
        _ message: Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PollNexusTaskQueueRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.pollNexusTaskQueue(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondNexusTaskCompleted" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondNexusTaskCompleted is called by workers to respond to Nexus tasks received via PollNexusTaskQueue.
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondNexusTaskCompleted<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondNexusTaskCompletedRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.respondNexusTaskCompleted(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RespondNexusTaskFailed" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RespondNexusTaskFailed is called by workers to fail Nexus tasks received via PollNexusTaskQueue.
    /// > (-- api-linter: core::0127::http-annotation=disabled
    /// >     aip.dev/not-precedent: We do not expose worker API to HTTP. --)
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func respondNexusTaskFailed<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RespondNexusTaskFailedRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.respondNexusTaskFailed(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateActivityOptions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateActivityOptions is called by the client to update the options of an activity by its ID or type.
    /// > If there are multiple pending activities of the provided type - all of them will be updated.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateActivityOptions<Result>(
        _ message: Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateActivityOptionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateActivityOptions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateWorkflowExecutionOptions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateWorkflowExecutionOptions partially updates the WorkflowExecutionOptions of an existing workflow execution.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateWorkflowExecutionOptions<Result>(
        _ message: Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkflowExecutionOptionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateWorkflowExecutionOptions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PauseActivity" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > PauseActivity pauses the execution of an activity specified by its ID or type.
    /// > If there are multiple pending activities of the provided type - all of them will be paused
    /// > 
    /// > Pausing an activity means:
    /// > - If the activity is currently waiting for a retry or is running and subsequently fails,
    /// >   it will not be rescheduled until it is unpaused.
    /// > - If the activity is already paused, calling this method will have no effect.
    /// > - If the activity is running and finishes successfully, the activity will be completed.
    /// > - If the activity is running and finishes with failure:
    /// >   * if there is no retry left - the activity will be completed.
    /// >   * if there are more retries left - the activity will be paused.
    /// > For long-running activities:
    /// > - activities in paused state will send a cancellation with "activity_paused" set to 'true' in response to 'RecordActivityTaskHeartbeat'.
    /// > - The activity should respond to the cancellation accordingly.
    /// > 
    /// > Returns a `NotFound` error if there is no pending activity with the provided ID or type
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func pauseActivity<Result>(
        _ message: Temporal_Api_Workflowservice_V1_PauseActivityRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_PauseActivityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_PauseActivityRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.pauseActivity(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UnpauseActivity" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UnpauseActivity unpauses the execution of an activity specified by its ID or type.
    /// > If there are multiple pending activities of the provided type - all of them will be unpaused.
    /// > 
    /// > If activity is not paused, this call will have no effect.
    /// > If the activity was paused while waiting for retry, it will be scheduled immediately (* see 'jitter' flag).
    /// > Once the activity is unpaused, all timeout timers will be regenerated.
    /// > 
    /// > Flags:
    /// > 'jitter': the activity will be scheduled at a random time within the jitter duration.
    /// > 'reset_attempts': the number of attempts will be reset.
    /// > 'reset_heartbeat': the activity heartbeat timer and heartbeats will be reset.
    /// > 
    /// > Returns a `NotFound` error if there is no pending activity with the provided ID or type
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func unpauseActivity<Result>(
        _ message: Temporal_Api_Workflowservice_V1_UnpauseActivityRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UnpauseActivityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UnpauseActivityRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.unpauseActivity(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResetActivity" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ResetActivity resets the execution of an activity specified by its ID or type.
    /// > If there are multiple pending activities of the provided type - all of them will be reset.
    /// > 
    /// > Resetting an activity means:
    /// > * number of attempts will be reset to 0.
    /// > * activity timeouts will be reset.
    /// > * if the activity is waiting for retry, and it is not paused or 'keep_paused' is not provided:
    /// >    it will be scheduled immediately (* see 'jitter' flag),
    /// > 
    /// > Flags:
    /// > 
    /// > 'jitter': the activity will be scheduled at a random time within the jitter duration.
    /// > If the activity currently paused it will be unpaused, unless 'keep_paused' flag is provided.
    /// > 'reset_heartbeats': the activity heartbeat timer and heartbeats will be reset.
    /// > 'keep_paused': if the activity is paused, it will remain paused.
    /// > 
    /// > Returns a `NotFound` error if there is no pending activity with the provided ID or type.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func resetActivity<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ResetActivityRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ResetActivityResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ResetActivityRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.resetActivity(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateWorkflowRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a new workflow rule. The rules are used to control the workflow execution.
    /// > The rule will be applied to all running and new workflows in the namespace.
    /// > If the rule with such ID already exist this call will fail
    /// > Note: the rules are part of namespace configuration and will be stored in the namespace config.
    /// > Namespace config is eventually consistent.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createWorkflowRule<Result>(
        _ message: Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_CreateWorkflowRuleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createWorkflowRule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DescribeWorkflowRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DescribeWorkflowRule return the rule specification for existing rule id.
    /// > If there is no rule with such id - NOT FOUND error will be returned.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func describeWorkflowRule<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DescribeWorkflowRuleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.describeWorkflowRule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteWorkflowRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete rule by rule id
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteWorkflowRule<Result>(
        _ message: Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_DeleteWorkflowRuleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteWorkflowRule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListWorkflowRules" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Return all namespace workflow rules
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listWorkflowRules<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkflowRulesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkflowRulesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listWorkflowRules(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "TriggerWorkflowRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TriggerWorkflowRule allows to:
    /// >  * trigger existing rule for a specific workflow execution;
    /// >  * trigger rule for a specific workflow execution without creating a rule;
    /// > This is useful for one-off operations.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func triggerWorkflowRule<Result>(
        _ message: Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_TriggerWorkflowRuleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.triggerWorkflowRule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RecordWorkerHeartbeat" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > WorkerHeartbeat receive heartbeat request from the worker.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func recordWorkerHeartbeat<Result>(
        _ message: Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_RecordWorkerHeartbeatRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.recordWorkerHeartbeat(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListWorkers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListWorkers is a visibility API to list worker status information in a specific namespace.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listWorkers<Result>(
        _ message: Temporal_Api_Workflowservice_V1_ListWorkersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_ListWorkersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_ListWorkersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listWorkers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateTaskQueueConfig" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates task queue configuration.
    /// > For the overall queue rate limit: the rate limit set by this api overrides the worker-set rate limit,
    /// > which uncouples the rate limit from the worker lifecycle.
    /// > If the overall queue rate limit is unset, the worker-set rate limit takes effect.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateTaskQueueConfig<Result>(
        _ message: Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateTaskQueueConfigRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateTaskQueueConfig(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FetchWorkerConfig" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > FetchWorkerConfig returns the worker configuration for a specific worker.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func fetchWorkerConfig<Result>(
        _ message: Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_FetchWorkerConfigResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_FetchWorkerConfigRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.fetchWorkerConfig(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateWorkerConfig" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > UpdateWorkerConfig updates the worker configuration of one or more workers.
    /// > Can be used to partially update the worker configuration.
    /// > Can be used to update the configuration of multiple workers.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateWorkerConfig<Result>(
        _ message: Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Workflowservice_V1_UpdateWorkerConfigRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateWorkerConfig(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}