// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/cloud/sink/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package struct Temporal_Api_Cloud_Sink_V1_S3Spec: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The IAM role that Temporal Cloud assumes for writing records to the customer's S3 bucket.
  package var roleName: String = String()

  /// The name of the destination S3 bucket where Temporal will send data.
  package var bucketName: String = String()

  /// The region where the S3 bucket is located.
  package var region: String = String()

  /// The AWS Key Management Service (KMS) ARN used for encryption.
  package var kmsArn: String = String()

  /// The AWS account ID associated with the S3 bucket and the assumed role.
  package var awsAccountID: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct Temporal_Api_Cloud_Sink_V1_GCSSpec: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The customer service account ID that Temporal Cloud impersonates for writing records to the customer's GCS bucket.
  package var saID: String = String()

  /// The name of the destination GCS bucket where Temporal will send data.
  package var bucketName: String = String()

  /// The GCP project ID associated with the GCS bucket and service account.
  package var gcpProjectID: String = String()

  /// The region of the gcs bucket
  package var region: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.cloud.sink.v1"

extension Temporal_Api_Cloud_Sink_V1_S3Spec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".S3Spec"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}role_name\0\u{3}bucket_name\0\u{1}region\0\u{3}kms_arn\0\u{3}aws_account_id\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.roleName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bucketName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.region) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.kmsArn) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.awsAccountID) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.roleName.isEmpty {
      try visitor.visitSingularStringField(value: self.roleName, fieldNumber: 1)
    }
    if !self.bucketName.isEmpty {
      try visitor.visitSingularStringField(value: self.bucketName, fieldNumber: 2)
    }
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 3)
    }
    if !self.kmsArn.isEmpty {
      try visitor.visitSingularStringField(value: self.kmsArn, fieldNumber: 4)
    }
    if !self.awsAccountID.isEmpty {
      try visitor.visitSingularStringField(value: self.awsAccountID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Sink_V1_S3Spec, rhs: Temporal_Api_Cloud_Sink_V1_S3Spec) -> Bool {
    if lhs.roleName != rhs.roleName {return false}
    if lhs.bucketName != rhs.bucketName {return false}
    if lhs.region != rhs.region {return false}
    if lhs.kmsArn != rhs.kmsArn {return false}
    if lhs.awsAccountID != rhs.awsAccountID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Cloud_Sink_V1_GCSSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".GCSSpec"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sa_id\0\u{3}bucket_name\0\u{3}gcp_project_id\0\u{1}region\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.saID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bucketName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.gcpProjectID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.region) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.saID.isEmpty {
      try visitor.visitSingularStringField(value: self.saID, fieldNumber: 1)
    }
    if !self.bucketName.isEmpty {
      try visitor.visitSingularStringField(value: self.bucketName, fieldNumber: 2)
    }
    if !self.gcpProjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.gcpProjectID, fieldNumber: 3)
    }
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Sink_V1_GCSSpec, rhs: Temporal_Api_Cloud_Sink_V1_GCSSpec) -> Bool {
    if lhs.saID != rhs.saID {return false}
    if lhs.bucketName != rhs.bucketName {return false}
    if lhs.gcpProjectID != rhs.gcpProjectID {return false}
    if lhs.region != rhs.region {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
