// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/sdk/v1/worker_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package struct Temporal_Api_Sdk_V1_WorkerConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var workflowCacheSize: Int32 = 0

  package var pollerBehavior: Temporal_Api_Sdk_V1_WorkerConfig.OneOf_PollerBehavior? = nil

  package var simplePollerBehavior: Temporal_Api_Sdk_V1_WorkerConfig.SimplePollerBehavior {
    get {
      if case .simplePollerBehavior(let v)? = pollerBehavior {return v}
      return Temporal_Api_Sdk_V1_WorkerConfig.SimplePollerBehavior()
    }
    set {pollerBehavior = .simplePollerBehavior(newValue)}
  }

  package var autoscalingPollerBehavior: Temporal_Api_Sdk_V1_WorkerConfig.AutoscalingPollerBehavior {
    get {
      if case .autoscalingPollerBehavior(let v)? = pollerBehavior {return v}
      return Temporal_Api_Sdk_V1_WorkerConfig.AutoscalingPollerBehavior()
    }
    set {pollerBehavior = .autoscalingPollerBehavior(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum OneOf_PollerBehavior: Equatable, Sendable {
    case simplePollerBehavior(Temporal_Api_Sdk_V1_WorkerConfig.SimplePollerBehavior)
    case autoscalingPollerBehavior(Temporal_Api_Sdk_V1_WorkerConfig.AutoscalingPollerBehavior)

  }

  package struct SimplePollerBehavior: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    package var maxPollers: Int32 = 0

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}
  }

  package struct AutoscalingPollerBehavior: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// At least this many poll calls will always be attempted (assuming slots are available).
    /// Cannot be zero.
    package var minPollers: Int32 = 0

    /// At most this many poll calls will ever be open at once. Must be >= `minimum`.
    package var maxPollers: Int32 = 0

    /// This many polls will be attempted initially before scaling kicks in. Must be between
    ///  `minimum` and `maximum`.
    package var initialPollers: Int32 = 0

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}
  }

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.sdk.v1"

extension Temporal_Api_Sdk_V1_WorkerConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WorkerConfig"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}workflow_cache_size\0\u{3}simple_poller_behavior\0\u{3}autoscaling_poller_behavior\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.workflowCacheSize) }()
      case 2: try {
        var v: Temporal_Api_Sdk_V1_WorkerConfig.SimplePollerBehavior?
        var hadOneofValue = false
        if let current = self.pollerBehavior {
          hadOneofValue = true
          if case .simplePollerBehavior(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.pollerBehavior = .simplePollerBehavior(v)
        }
      }()
      case 3: try {
        var v: Temporal_Api_Sdk_V1_WorkerConfig.AutoscalingPollerBehavior?
        var hadOneofValue = false
        if let current = self.pollerBehavior {
          hadOneofValue = true
          if case .autoscalingPollerBehavior(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.pollerBehavior = .autoscalingPollerBehavior(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.workflowCacheSize != 0 {
      try visitor.visitSingularInt32Field(value: self.workflowCacheSize, fieldNumber: 1)
    }
    switch self.pollerBehavior {
    case .simplePollerBehavior?: try {
      guard case .simplePollerBehavior(let v)? = self.pollerBehavior else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .autoscalingPollerBehavior?: try {
      guard case .autoscalingPollerBehavior(let v)? = self.pollerBehavior else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Sdk_V1_WorkerConfig, rhs: Temporal_Api_Sdk_V1_WorkerConfig) -> Bool {
    if lhs.workflowCacheSize != rhs.workflowCacheSize {return false}
    if lhs.pollerBehavior != rhs.pollerBehavior {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Sdk_V1_WorkerConfig.SimplePollerBehavior: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Temporal_Api_Sdk_V1_WorkerConfig.protoMessageName + ".SimplePollerBehavior"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}max_pollers\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.maxPollers) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxPollers != 0 {
      try visitor.visitSingularInt32Field(value: self.maxPollers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Sdk_V1_WorkerConfig.SimplePollerBehavior, rhs: Temporal_Api_Sdk_V1_WorkerConfig.SimplePollerBehavior) -> Bool {
    if lhs.maxPollers != rhs.maxPollers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Sdk_V1_WorkerConfig.AutoscalingPollerBehavior: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Temporal_Api_Sdk_V1_WorkerConfig.protoMessageName + ".AutoscalingPollerBehavior"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}min_pollers\0\u{3}max_pollers\0\u{3}initial_pollers\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.minPollers) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.maxPollers) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.initialPollers) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.minPollers != 0 {
      try visitor.visitSingularInt32Field(value: self.minPollers, fieldNumber: 1)
    }
    if self.maxPollers != 0 {
      try visitor.visitSingularInt32Field(value: self.maxPollers, fieldNumber: 2)
    }
    if self.initialPollers != 0 {
      try visitor.visitSingularInt32Field(value: self.initialPollers, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Sdk_V1_WorkerConfig.AutoscalingPollerBehavior, rhs: Temporal_Api_Sdk_V1_WorkerConfig.AutoscalingPollerBehavior) -> Bool {
    if lhs.minPollers != rhs.minPollers {return false}
    if lhs.maxPollers != rhs.maxPollers {return false}
    if lhs.initialPollers != rhs.initialPollers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
