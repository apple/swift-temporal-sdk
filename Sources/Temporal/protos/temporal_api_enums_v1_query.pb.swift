// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/enums/v1/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package enum Temporal_Api_Enums_V1_QueryResultType: SwiftProtobuf.Enum, Swift.CaseIterable {
  package typealias RawValue = Int
  case unspecified // = 0
  case answered // = 1
  case failed // = 2
  case UNRECOGNIZED(Int)

  package init() {
    self = .unspecified
  }

  package init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .answered
    case 2: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  package var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .answered: return 1
    case .failed: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  package static let allCases: [Temporal_Api_Enums_V1_QueryResultType] = [
    .unspecified,
    .answered,
    .failed,
  ]

}

package enum Temporal_Api_Enums_V1_QueryRejectCondition: SwiftProtobuf.Enum, Swift.CaseIterable {
  package typealias RawValue = Int
  case unspecified // = 0

  /// None indicates that query should not be rejected.
  case none // = 1

  /// NotOpen indicates that query should be rejected if workflow is not open.
  case notOpen // = 2

  /// NotCompletedCleanly indicates that query should be rejected if workflow did not complete cleanly.
  case notCompletedCleanly // = 3
  case UNRECOGNIZED(Int)

  package init() {
    self = .unspecified
  }

  package init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .none
    case 2: self = .notOpen
    case 3: self = .notCompletedCleanly
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  package var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .none: return 1
    case .notOpen: return 2
    case .notCompletedCleanly: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  package static let allCases: [Temporal_Api_Enums_V1_QueryRejectCondition] = [
    .unspecified,
    .none,
    .notOpen,
    .notCompletedCleanly,
  ]

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Temporal_Api_Enums_V1_QueryResultType: SwiftProtobuf._ProtoNameProviding {
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0QUERY_RESULT_TYPE_UNSPECIFIED\0\u{1}QUERY_RESULT_TYPE_ANSWERED\0\u{1}QUERY_RESULT_TYPE_FAILED\0")
}

extension Temporal_Api_Enums_V1_QueryRejectCondition: SwiftProtobuf._ProtoNameProviding {
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0QUERY_REJECT_CONDITION_UNSPECIFIED\0\u{1}QUERY_REJECT_CONDITION_NONE\0\u{1}QUERY_REJECT_CONDITION_NOT_OPEN\0\u{1}QUERY_REJECT_CONDITION_NOT_COMPLETED_CLEANLY\0")
}
