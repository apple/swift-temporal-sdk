// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/cloud/nexus/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package struct Temporal_Api_Cloud_Nexus_V1_EndpointSpec: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the endpoint. Must be unique within an account.
  /// The name must match `^[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9]$`.
  /// This field is mutable.
  package var name: String = String()

  /// Indicates where the endpoint should forward received nexus requests to. 
  package var targetSpec: Temporal_Api_Cloud_Nexus_V1_EndpointTargetSpec {
    get {return _targetSpec ?? Temporal_Api_Cloud_Nexus_V1_EndpointTargetSpec()}
    set {_targetSpec = newValue}
  }
  /// Returns true if `targetSpec` has been explicitly set.
  package var hasTargetSpec: Bool {return self._targetSpec != nil}
  /// Clears the value of `targetSpec`. Subsequent reads from it will return its default value.
  package mutating func clearTargetSpec() {self._targetSpec = nil}

  /// The set of policies (e.g. authorization) for the endpoint. Each request's caller
  /// must match with at least one of the specs to be accepted by the endpoint.
  /// This field is mutable.
  package var policySpecs: [Temporal_Api_Cloud_Nexus_V1_EndpointPolicySpec] = []

  /// Deprecated: Not supported after v0.4.0 api version. Use description instead.
  /// temporal:versioning:max_version=v0.4.0
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  package var descriptionDeprecated: String = String()

  /// The markdown description of the endpoint - optional.
  /// temporal:versioning:min_version=v0.4.0
  package var description_p: Temporal_Api_Common_V1_Payload {
    get {return _description_p ?? Temporal_Api_Common_V1_Payload()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  package var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  package mutating func clearDescription_p() {self._description_p = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _targetSpec: Temporal_Api_Cloud_Nexus_V1_EndpointTargetSpec? = nil
  fileprivate var _description_p: Temporal_Api_Common_V1_Payload? = nil
}

package struct Temporal_Api_Cloud_Nexus_V1_EndpointTargetSpec: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var variant: Temporal_Api_Cloud_Nexus_V1_EndpointTargetSpec.OneOf_Variant? = nil

  /// A target spec for routing nexus requests to a specific cloud namespace worker.
  package var workerTargetSpec: Temporal_Api_Cloud_Nexus_V1_WorkerTargetSpec {
    get {
      if case .workerTargetSpec(let v)? = variant {return v}
      return Temporal_Api_Cloud_Nexus_V1_WorkerTargetSpec()
    }
    set {variant = .workerTargetSpec(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum OneOf_Variant: Equatable, Sendable {
    /// A target spec for routing nexus requests to a specific cloud namespace worker.
    case workerTargetSpec(Temporal_Api_Cloud_Nexus_V1_WorkerTargetSpec)

  }

  package init() {}
}

package struct Temporal_Api_Cloud_Nexus_V1_WorkerTargetSpec: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The target cloud namespace to route requests to. Namespace must be in same account as the endpoint. This field is mutable.
  package var namespaceID: String = String()

  /// The task queue on the cloud namespace to route requests to. This field is mutable.
  package var taskQueue: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct Temporal_Api_Cloud_Nexus_V1_EndpointPolicySpec: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var variant: Temporal_Api_Cloud_Nexus_V1_EndpointPolicySpec.OneOf_Variant? = nil

  /// A policy spec that allows one caller namespace to access the endpoint.
  package var allowedCloudNamespacePolicySpec: Temporal_Api_Cloud_Nexus_V1_AllowedCloudNamespacePolicySpec {
    get {
      if case .allowedCloudNamespacePolicySpec(let v)? = variant {return v}
      return Temporal_Api_Cloud_Nexus_V1_AllowedCloudNamespacePolicySpec()
    }
    set {variant = .allowedCloudNamespacePolicySpec(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum OneOf_Variant: Equatable, Sendable {
    /// A policy spec that allows one caller namespace to access the endpoint.
    case allowedCloudNamespacePolicySpec(Temporal_Api_Cloud_Nexus_V1_AllowedCloudNamespacePolicySpec)

  }

  package init() {}
}

package struct Temporal_Api_Cloud_Nexus_V1_AllowedCloudNamespacePolicySpec: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The namespace that is allowed to call into this endpoint. Calling namespace must be in same account as the endpoint.
  package var namespaceID: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// An endpoint that receives and then routes Nexus requests
package struct Temporal_Api_Cloud_Nexus_V1_Endpoint: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The id of the endpoint. This is generated by the server and is immutable.
  package var id: String = String()

  /// The current version of the endpoint specification.
  /// The next update operation must include this version.
  package var resourceVersion: String = String()

  /// The endpoint specification.
  package var spec: Temporal_Api_Cloud_Nexus_V1_EndpointSpec {
    get {return _spec ?? Temporal_Api_Cloud_Nexus_V1_EndpointSpec()}
    set {_spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  package var hasSpec: Bool {return self._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  package mutating func clearSpec() {self._spec = nil}

  /// The current state of the endpoint.
  /// For any failed state, reach out to Temporal Cloud support for remediation.
  package var state: Temporal_Api_Cloud_Resource_V1_ResourceState = .unspecified

  /// The id of any ongoing async operation that is creating, updating, or deleting the endpoint, if any.
  package var asyncOperationID: String = String()

  /// The date and time when the endpoint was created.
  package var createdTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdTime = newValue}
  }
  /// Returns true if `createdTime` has been explicitly set.
  package var hasCreatedTime: Bool {return self._createdTime != nil}
  /// Clears the value of `createdTime`. Subsequent reads from it will return its default value.
  package mutating func clearCreatedTime() {self._createdTime = nil}

  /// The date and time when the endpoint was last modified.
  package var lastModifiedTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastModifiedTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastModifiedTime = newValue}
  }
  /// Returns true if `lastModifiedTime` has been explicitly set.
  package var hasLastModifiedTime: Bool {return self._lastModifiedTime != nil}
  /// Clears the value of `lastModifiedTime`. Subsequent reads from it will return its default value.
  package mutating func clearLastModifiedTime() {self._lastModifiedTime = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _spec: Temporal_Api_Cloud_Nexus_V1_EndpointSpec? = nil
  fileprivate var _createdTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastModifiedTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.cloud.nexus.v1"

extension Temporal_Api_Cloud_Nexus_V1_EndpointSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".EndpointSpec"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{3}target_spec\0\u{3}policy_specs\0\u{3}description_deprecated\0\u{1}description\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._targetSpec) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.policySpecs) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.descriptionDeprecated) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._targetSpec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.policySpecs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.policySpecs, fieldNumber: 3)
    }
    if !self.descriptionDeprecated.isEmpty {
      try visitor.visitSingularStringField(value: self.descriptionDeprecated, fieldNumber: 4)
    }
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Nexus_V1_EndpointSpec, rhs: Temporal_Api_Cloud_Nexus_V1_EndpointSpec) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._targetSpec != rhs._targetSpec {return false}
    if lhs.policySpecs != rhs.policySpecs {return false}
    if lhs.descriptionDeprecated != rhs.descriptionDeprecated {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Cloud_Nexus_V1_EndpointTargetSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".EndpointTargetSpec"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}worker_target_spec\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Temporal_Api_Cloud_Nexus_V1_WorkerTargetSpec?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .workerTargetSpec(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .workerTargetSpec(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .workerTargetSpec(let v)? = self.variant {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Nexus_V1_EndpointTargetSpec, rhs: Temporal_Api_Cloud_Nexus_V1_EndpointTargetSpec) -> Bool {
    if lhs.variant != rhs.variant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Cloud_Nexus_V1_WorkerTargetSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WorkerTargetSpec"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}namespace_id\0\u{3}task_queue\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.namespaceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.taskQueue) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.namespaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.namespaceID, fieldNumber: 1)
    }
    if !self.taskQueue.isEmpty {
      try visitor.visitSingularStringField(value: self.taskQueue, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Nexus_V1_WorkerTargetSpec, rhs: Temporal_Api_Cloud_Nexus_V1_WorkerTargetSpec) -> Bool {
    if lhs.namespaceID != rhs.namespaceID {return false}
    if lhs.taskQueue != rhs.taskQueue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Cloud_Nexus_V1_EndpointPolicySpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".EndpointPolicySpec"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}allowed_cloud_namespace_policy_spec\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Temporal_Api_Cloud_Nexus_V1_AllowedCloudNamespacePolicySpec?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .allowedCloudNamespacePolicySpec(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .allowedCloudNamespacePolicySpec(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .allowedCloudNamespacePolicySpec(let v)? = self.variant {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Nexus_V1_EndpointPolicySpec, rhs: Temporal_Api_Cloud_Nexus_V1_EndpointPolicySpec) -> Bool {
    if lhs.variant != rhs.variant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Cloud_Nexus_V1_AllowedCloudNamespacePolicySpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".AllowedCloudNamespacePolicySpec"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}namespace_id\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.namespaceID) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.namespaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.namespaceID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Nexus_V1_AllowedCloudNamespacePolicySpec, rhs: Temporal_Api_Cloud_Nexus_V1_AllowedCloudNamespacePolicySpec) -> Bool {
    if lhs.namespaceID != rhs.namespaceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Cloud_Nexus_V1_Endpoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Endpoint"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{3}resource_version\0\u{1}spec\0\u{1}state\0\u{3}async_operation_id\0\u{3}created_time\0\u{3}last_modified_time\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resourceVersion) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.asyncOperationID) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._createdTime) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._lastModifiedTime) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.resourceVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.resourceVersion, fieldNumber: 2)
    }
    try { if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 4)
    }
    if !self.asyncOperationID.isEmpty {
      try visitor.visitSingularStringField(value: self.asyncOperationID, fieldNumber: 5)
    }
    try { if let v = self._createdTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._lastModifiedTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Cloud_Nexus_V1_Endpoint, rhs: Temporal_Api_Cloud_Nexus_V1_Endpoint) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.resourceVersion != rhs.resourceVersion {return false}
    if lhs._spec != rhs._spec {return false}
    if lhs.state != rhs.state {return false}
    if lhs.asyncOperationID != rhs.asyncOperationID {return false}
    if lhs._createdTime != rhs._createdTime {return false}
    if lhs._lastModifiedTime != rhs._lastModifiedTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
