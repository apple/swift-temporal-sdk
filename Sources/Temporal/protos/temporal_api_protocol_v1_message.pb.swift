// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/protocol/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// (-- api-linter: core::0146::any=disabled
///     aip.dev/not-precedent: We want runtime extensibility for the body field --)
package struct Temporal_Api_Protocol_V1_Message: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// An ID for this specific message.
  package var id: String = String()

  /// Identifies the specific instance of a protocol to which this message
  /// belongs.
  package var protocolInstanceID: String = String()

  /// The event ID or command ID after which this message can be delivered. The
  /// effects of history up to and including this event ID should be visible to
  /// the code that handles this message. Omit to opt out of sequencing.
  package var sequencingID: Temporal_Api_Protocol_V1_Message.OneOf_SequencingID? = nil

  package var eventID: Int64 {
    get {
      if case .eventID(let v)? = sequencingID {return v}
      return 0
    }
    set {sequencingID = .eventID(newValue)}
  }

  package var commandIndex: Int64 {
    get {
      if case .commandIndex(let v)? = sequencingID {return v}
      return 0
    }
    set {sequencingID = .commandIndex(newValue)}
  }

  /// The opaque data carried by this message. The protocol type can be
  /// extracted from the package name of the message carried inside the Any.
  package var body: SwiftProtobuf.Google_Protobuf_Any {
    get {return _body ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_body = newValue}
  }
  /// Returns true if `body` has been explicitly set.
  package var hasBody: Bool {return self._body != nil}
  /// Clears the value of `body`. Subsequent reads from it will return its default value.
  package mutating func clearBody() {self._body = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The event ID or command ID after which this message can be delivered. The
  /// effects of history up to and including this event ID should be visible to
  /// the code that handles this message. Omit to opt out of sequencing.
  package enum OneOf_SequencingID: Equatable, Sendable {
    case eventID(Int64)
    case commandIndex(Int64)

  }

  package init() {}

  fileprivate var _body: SwiftProtobuf.Google_Protobuf_Any? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.protocol.v1"

extension Temporal_Api_Protocol_V1_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Message"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{3}protocol_instance_id\0\u{3}event_id\0\u{3}command_index\0\u{1}body\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.protocolInstanceID) }()
      case 3: try {
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {
          if self.sequencingID != nil {try decoder.handleConflictingOneOf()}
          self.sequencingID = .eventID(v)
        }
      }()
      case 4: try {
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {
          if self.sequencingID != nil {try decoder.handleConflictingOneOf()}
          self.sequencingID = .commandIndex(v)
        }
      }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._body) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.protocolInstanceID.isEmpty {
      try visitor.visitSingularStringField(value: self.protocolInstanceID, fieldNumber: 2)
    }
    switch self.sequencingID {
    case .eventID?: try {
      guard case .eventID(let v)? = self.sequencingID else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
    }()
    case .commandIndex?: try {
      guard case .commandIndex(let v)? = self.sequencingID else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try { if let v = self._body {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Protocol_V1_Message, rhs: Temporal_Api_Protocol_V1_Message) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.protocolInstanceID != rhs.protocolInstanceID {return false}
    if lhs.sequencingID != rhs.sequencingID {return false}
    if lhs._body != rhs._body {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
