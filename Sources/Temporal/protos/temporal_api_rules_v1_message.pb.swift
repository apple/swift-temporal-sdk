// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/rules/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package struct Temporal_Api_Rules_V1_WorkflowRuleAction: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Supported actions.
  package var variant: Temporal_Api_Rules_V1_WorkflowRuleAction.OneOf_Variant? = nil

  package var activityPause: Temporal_Api_Rules_V1_WorkflowRuleAction.ActionActivityPause {
    get {
      if case .activityPause(let v)? = variant {return v}
      return Temporal_Api_Rules_V1_WorkflowRuleAction.ActionActivityPause()
    }
    set {variant = .activityPause(newValue)}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Supported actions.
  package enum OneOf_Variant: Equatable, Sendable {
    case activityPause(Temporal_Api_Rules_V1_WorkflowRuleAction.ActionActivityPause)

  }

  package struct ActionActivityPause: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}
  }

  package init() {}
}

package struct Temporal_Api_Rules_V1_WorkflowRuleSpec: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The id of the new workflow rule. Must be unique within the namespace.
  /// Can be set by the user, and can have business meaning.
  package var id: String = String()

  /// Specifies how the rule should be triggered and evaluated.
  /// Currently, only "activity start" type is supported.
  package var trigger: Temporal_Api_Rules_V1_WorkflowRuleSpec.OneOf_Trigger? = nil

  package var activityStart: Temporal_Api_Rules_V1_WorkflowRuleSpec.ActivityStartingTrigger {
    get {
      if case .activityStart(let v)? = trigger {return v}
      return Temporal_Api_Rules_V1_WorkflowRuleSpec.ActivityStartingTrigger()
    }
    set {trigger = .activityStart(newValue)}
  }

  /// Restricted Visibility query.
  /// This query is used to filter workflows in this namespace to which this rule should apply.
  /// It is applied to any running workflow each time a triggering event occurs, before the trigger predicate is evaluated.
  /// The following workflow attributes are supported:
  /// - WorkflowType
  /// - WorkflowId
  /// - StartTime
  /// - ExecutionStatus
  package var visibilityQuery: String = String()

  /// WorkflowRuleAction to be taken when the rule is triggered and predicate is matched.
  package var actions: [Temporal_Api_Rules_V1_WorkflowRuleAction] = []

  /// Expiration time of the rule. After this time, the rule will be deleted.
  /// Can be empty if the rule should never expire.
  package var expirationTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expirationTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  package var hasExpirationTime: Bool {return self._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  package mutating func clearExpirationTime() {self._expirationTime = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies how the rule should be triggered and evaluated.
  /// Currently, only "activity start" type is supported.
  package enum OneOf_Trigger: Equatable, Sendable {
    case activityStart(Temporal_Api_Rules_V1_WorkflowRuleSpec.ActivityStartingTrigger)

  }

  /// Activity trigger will be triggered when an activity is about to start.
  package struct ActivityStartingTrigger: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Activity predicate is a SQL-like string filter parameter.
    /// It is used to match against workflow data.
    /// The following activity attributes are supported as part of the predicate:
    /// - ActivityType: An Activity Type is the mapping of a name to an Activity Definition..
    /// - ActivityId: The ID of the activity.
    /// - ActivityAttempt: The number attempts of the activity.
    /// - BackoffInterval: The current amount of time between scheduled attempts of the activity.
    /// - ActivityStatus: The status of the activity. Can be one of "Scheduled", "Started", "Paused".
    /// - TaskQueue: The name of the task queue the workflow specified that the activity should run on.
    /// Activity predicate support the following operators:
    ///  * =, !=, >, >=, <, <=
    ///  * AND, OR, ()
    ///  * BETWEEN ... AND
    ///    STARTS_WITH
    package var predicate: String = String()

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}
  }

  package init() {}

  fileprivate var _expirationTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// WorkflowRule describes a rule that can be applied to any workflow in this namespace.
package struct Temporal_Api_Rules_V1_WorkflowRule: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Rule creation time.
  package var createTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createTime = newValue}
  }
  /// Returns true if `createTime` has been explicitly set.
  package var hasCreateTime: Bool {return self._createTime != nil}
  /// Clears the value of `createTime`. Subsequent reads from it will return its default value.
  package mutating func clearCreateTime() {self._createTime = nil}

  /// Rule specification
  package var spec: Temporal_Api_Rules_V1_WorkflowRuleSpec {
    get {return _spec ?? Temporal_Api_Rules_V1_WorkflowRuleSpec()}
    set {_spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  package var hasSpec: Bool {return self._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  package mutating func clearSpec() {self._spec = nil}

  /// Identity of the actor that created the rule
  /// (-- api-linter: core::0140::prepositions=disabled
  ///     aip.dev/not-precedent: It is better reflect the intent this way, we will also have updated_by. --)
  /// (-- api-linter: core::0142::time-field-names=disabled
  ///     aip.dev/not-precedent: Same as above. All other options sounds clumsy --)
  package var createdByIdentity: String = String()

  /// Rule description.
  package var description_p: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _createTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _spec: Temporal_Api_Rules_V1_WorkflowRuleSpec? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.rules.v1"

extension Temporal_Api_Rules_V1_WorkflowRuleAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WorkflowRuleAction"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}activity_pause\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Temporal_Api_Rules_V1_WorkflowRuleAction.ActionActivityPause?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .activityPause(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .activityPause(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .activityPause(let v)? = self.variant {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Rules_V1_WorkflowRuleAction, rhs: Temporal_Api_Rules_V1_WorkflowRuleAction) -> Bool {
    if lhs.variant != rhs.variant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Rules_V1_WorkflowRuleAction.ActionActivityPause: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Temporal_Api_Rules_V1_WorkflowRuleAction.protoMessageName + ".ActionActivityPause"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Rules_V1_WorkflowRuleAction.ActionActivityPause, rhs: Temporal_Api_Rules_V1_WorkflowRuleAction.ActionActivityPause) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Rules_V1_WorkflowRuleSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WorkflowRuleSpec"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{3}activity_start\0\u{3}visibility_query\0\u{1}actions\0\u{3}expiration_time\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try {
        var v: Temporal_Api_Rules_V1_WorkflowRuleSpec.ActivityStartingTrigger?
        var hadOneofValue = false
        if let current = self.trigger {
          hadOneofValue = true
          if case .activityStart(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.trigger = .activityStart(v)
        }
      }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.visibilityQuery) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.actions) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._expirationTime) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if case .activityStart(let v)? = self.trigger {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.visibilityQuery.isEmpty {
      try visitor.visitSingularStringField(value: self.visibilityQuery, fieldNumber: 3)
    }
    if !self.actions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.actions, fieldNumber: 4)
    }
    try { if let v = self._expirationTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Rules_V1_WorkflowRuleSpec, rhs: Temporal_Api_Rules_V1_WorkflowRuleSpec) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.trigger != rhs.trigger {return false}
    if lhs.visibilityQuery != rhs.visibilityQuery {return false}
    if lhs.actions != rhs.actions {return false}
    if lhs._expirationTime != rhs._expirationTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Rules_V1_WorkflowRuleSpec.ActivityStartingTrigger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Temporal_Api_Rules_V1_WorkflowRuleSpec.protoMessageName + ".ActivityStartingTrigger"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}predicate\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.predicate) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.predicate.isEmpty {
      try visitor.visitSingularStringField(value: self.predicate, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Rules_V1_WorkflowRuleSpec.ActivityStartingTrigger, rhs: Temporal_Api_Rules_V1_WorkflowRuleSpec.ActivityStartingTrigger) -> Bool {
    if lhs.predicate != rhs.predicate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Rules_V1_WorkflowRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WorkflowRule"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}create_time\0\u{1}spec\0\u{3}created_by_identity\0\u{1}description\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._createTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.createdByIdentity) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._createTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.createdByIdentity.isEmpty {
      try visitor.visitSingularStringField(value: self.createdByIdentity, fieldNumber: 3)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Rules_V1_WorkflowRule, rhs: Temporal_Api_Rules_V1_WorkflowRule) -> Bool {
    if lhs._createTime != rhs._createTime {return false}
    if lhs._spec != rhs._spec {return false}
    if lhs.createdByIdentity != rhs.createdByIdentity {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
