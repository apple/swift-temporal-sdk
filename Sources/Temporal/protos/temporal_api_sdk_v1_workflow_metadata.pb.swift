// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/sdk/v1/workflow_metadata.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The name of the query to retrieve this information is `__temporal_workflow_metadata`.
package struct Temporal_Api_Sdk_V1_WorkflowMetadata: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Metadata provided at declaration or creation time.
  package var definition: Temporal_Api_Sdk_V1_WorkflowDefinition {
    get {return _definition ?? Temporal_Api_Sdk_V1_WorkflowDefinition()}
    set {_definition = newValue}
  }
  /// Returns true if `definition` has been explicitly set.
  package var hasDefinition: Bool {return self._definition != nil}
  /// Clears the value of `definition`. Subsequent reads from it will return its default value.
  package mutating func clearDefinition() {self._definition = nil}

  /// Current long-form details of the workflow's state. This is used by user interfaces to show
  /// long-form text. This text may be formatted by the user interface.
  package var currentDetails: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _definition: Temporal_Api_Sdk_V1_WorkflowDefinition? = nil
}

/// (-- api-linter: core::0203::optional=disabled --)
package struct Temporal_Api_Sdk_V1_WorkflowDefinition: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A name scoped by the task queue that maps to this workflow definition.
  /// If missing, this workflow is a dynamic workflow.
  package var type: String = String()

  /// Query definitions, sorted by name.
  package var queryDefinitions: [Temporal_Api_Sdk_V1_WorkflowInteractionDefinition] = []

  /// Signal definitions, sorted by name.
  package var signalDefinitions: [Temporal_Api_Sdk_V1_WorkflowInteractionDefinition] = []

  /// Update definitions, sorted by name.
  package var updateDefinitions: [Temporal_Api_Sdk_V1_WorkflowInteractionDefinition] = []

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// (-- api-linter: core::0123::resource-annotation=disabled
///     aip.dev/not-precedent: The `name` field is optional. --)
/// (-- api-linter: core::0203::optional=disabled --)
package struct Temporal_Api_Sdk_V1_WorkflowInteractionDefinition: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// An optional name for the handler. If missing, it represents
  /// a dynamic handler that processes any interactions not handled by others.
  /// There is at most one dynamic handler per workflow and interaction kind.
  package var name: String = String()

  /// An optional interaction description provided by the application.
  /// By convention, external tools may interpret its first part,
  /// i.e., ending with a line break, as a summary of the description.
  package var description_p: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.sdk.v1"

extension Temporal_Api_Sdk_V1_WorkflowMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WorkflowMetadata"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}definition\0\u{3}current_details\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._definition) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.currentDetails) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._definition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.currentDetails.isEmpty {
      try visitor.visitSingularStringField(value: self.currentDetails, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Sdk_V1_WorkflowMetadata, rhs: Temporal_Api_Sdk_V1_WorkflowMetadata) -> Bool {
    if lhs._definition != rhs._definition {return false}
    if lhs.currentDetails != rhs.currentDetails {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Sdk_V1_WorkflowDefinition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WorkflowDefinition"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}type\0\u{3}query_definitions\0\u{3}signal_definitions\0\u{3}update_definitions\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.queryDefinitions) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.signalDefinitions) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.updateDefinitions) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.queryDefinitions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.queryDefinitions, fieldNumber: 2)
    }
    if !self.signalDefinitions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.signalDefinitions, fieldNumber: 3)
    }
    if !self.updateDefinitions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.updateDefinitions, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Sdk_V1_WorkflowDefinition, rhs: Temporal_Api_Sdk_V1_WorkflowDefinition) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.queryDefinitions != rhs.queryDefinitions {return false}
    if lhs.signalDefinitions != rhs.signalDefinitions {return false}
    if lhs.updateDefinitions != rhs.updateDefinitions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Sdk_V1_WorkflowInteractionDefinition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WorkflowInteractionDefinition"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}description\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Sdk_V1_WorkflowInteractionDefinition, rhs: Temporal_Api_Sdk_V1_WorkflowInteractionDefinition) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
