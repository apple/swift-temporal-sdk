// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/query/v1/message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

package import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// See https://docs.temporal.io/docs/concepts/queries/
package struct Temporal_Api_Query_V1_WorkflowQuery: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The workflow-author-defined identifier of the query. Typically a function name.
  package var queryType: String = String()

  /// Serialized arguments that will be provided to the query handler.
  package var queryArgs: Temporal_Api_Common_V1_Payloads {
    get {return _queryArgs ?? Temporal_Api_Common_V1_Payloads()}
    set {_queryArgs = newValue}
  }
  /// Returns true if `queryArgs` has been explicitly set.
  package var hasQueryArgs: Bool {return self._queryArgs != nil}
  /// Clears the value of `queryArgs`. Subsequent reads from it will return its default value.
  package mutating func clearQueryArgs() {self._queryArgs = nil}

  /// Headers that were passed by the caller of the query and copied by temporal
  /// server into the workflow task.
  package var header: Temporal_Api_Common_V1_Header {
    get {return _header ?? Temporal_Api_Common_V1_Header()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  package var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  package mutating func clearHeader() {self._header = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _queryArgs: Temporal_Api_Common_V1_Payloads? = nil
  fileprivate var _header: Temporal_Api_Common_V1_Header? = nil
}

/// Answer to a `WorkflowQuery`
package struct Temporal_Api_Query_V1_WorkflowQueryResult: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Did the query succeed or fail?
  package var resultType: Temporal_Api_Enums_V1_QueryResultType = .unspecified

  /// Set when the query succeeds with the results.
  /// Mutually exclusive with `error_message` and `failure`.
  package var answer: Temporal_Api_Common_V1_Payloads {
    get {return _answer ?? Temporal_Api_Common_V1_Payloads()}
    set {_answer = newValue}
  }
  /// Returns true if `answer` has been explicitly set.
  package var hasAnswer: Bool {return self._answer != nil}
  /// Clears the value of `answer`. Subsequent reads from it will return its default value.
  package mutating func clearAnswer() {self._answer = nil}

  /// Mutually exclusive with `answer`. Set when the query fails.
  /// See also the newer `failure` field.
  package var errorMessage: String = String()

  /// The full reason for this query failure. This field is newer than `error_message` and can be encoded by the SDK's
  /// failure converter to support E2E encryption of messages and stack traces.
  /// Mutually exclusive with `answer`. Set when the query fails.
  package var failure: Temporal_Api_Failure_V1_Failure {
    get {return _failure ?? Temporal_Api_Failure_V1_Failure()}
    set {_failure = newValue}
  }
  /// Returns true if `failure` has been explicitly set.
  package var hasFailure: Bool {return self._failure != nil}
  /// Clears the value of `failure`. Subsequent reads from it will return its default value.
  package mutating func clearFailure() {self._failure = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _answer: Temporal_Api_Common_V1_Payloads? = nil
  fileprivate var _failure: Temporal_Api_Failure_V1_Failure? = nil
}

package struct Temporal_Api_Query_V1_QueryRejected: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var status: Temporal_Api_Enums_V1_WorkflowExecutionStatus = .unspecified

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal.api.query.v1"

extension Temporal_Api_Query_V1_WorkflowQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WorkflowQuery"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}query_type\0\u{3}query_args\0\u{1}header\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.queryType) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._queryArgs) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.queryType.isEmpty {
      try visitor.visitSingularStringField(value: self.queryType, fieldNumber: 1)
    }
    try { if let v = self._queryArgs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Query_V1_WorkflowQuery, rhs: Temporal_Api_Query_V1_WorkflowQuery) -> Bool {
    if lhs.queryType != rhs.queryType {return false}
    if lhs._queryArgs != rhs._queryArgs {return false}
    if lhs._header != rhs._header {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Query_V1_WorkflowQueryResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".WorkflowQueryResult"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}result_type\0\u{1}answer\0\u{3}error_message\0\u{1}failure\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.resultType) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._answer) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._failure) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.resultType != .unspecified {
      try visitor.visitSingularEnumField(value: self.resultType, fieldNumber: 1)
    }
    try { if let v = self._answer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 3)
    }
    try { if let v = self._failure {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Query_V1_WorkflowQueryResult, rhs: Temporal_Api_Query_V1_WorkflowQueryResult) -> Bool {
    if lhs.resultType != rhs.resultType {return false}
    if lhs._answer != rhs._answer {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs._failure != rhs._failure {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Temporal_Api_Query_V1_QueryRejected: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".QueryRejected"
  package static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}status\0")

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Temporal_Api_Query_V1_QueryRejected, rhs: Temporal_Api_Query_V1_QueryRejected) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
