// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: temporal/api/cloud/cloudservice/v1/service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

package import GRPCCore
internal import GRPCProtobuf

// MARK: - temporal.api.cloud.cloudservice.v1.CloudService

/// Namespace containing generated types for the "temporal.api.cloud.cloudservice.v1.CloudService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
package enum Temporal_Api_Cloud_Cloudservice_V1_CloudService {
    /// Service descriptor for the "temporal.api.cloud.cloudservice.v1.CloudService" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "GetUsers" metadata.
        package enum GetUsers {
            /// Request type for "GetUsers".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest
            /// Response type for "GetUsers".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetUsersResponse
            /// Descriptor for "GetUsers".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetUsers"
            )
        }
        /// Namespace for "GetUser" metadata.
        package enum GetUser {
            /// Request type for "GetUser".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest
            /// Response type for "GetUser".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetUserResponse
            /// Descriptor for "GetUser".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetUser"
            )
        }
        /// Namespace for "CreateUser" metadata.
        package enum CreateUser {
            /// Request type for "CreateUser".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest
            /// Response type for "CreateUser".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_CreateUserResponse
            /// Descriptor for "CreateUser".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "CreateUser"
            )
        }
        /// Namespace for "UpdateUser" metadata.
        package enum UpdateUser {
            /// Request type for "UpdateUser".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest
            /// Response type for "UpdateUser".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_UpdateUserResponse
            /// Descriptor for "UpdateUser".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "UpdateUser"
            )
        }
        /// Namespace for "DeleteUser" metadata.
        package enum DeleteUser {
            /// Request type for "DeleteUser".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest
            /// Response type for "DeleteUser".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_DeleteUserResponse
            /// Descriptor for "DeleteUser".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "DeleteUser"
            )
        }
        /// Namespace for "SetUserNamespaceAccess" metadata.
        package enum SetUserNamespaceAccess {
            /// Request type for "SetUserNamespaceAccess".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest
            /// Response type for "SetUserNamespaceAccess".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessResponse
            /// Descriptor for "SetUserNamespaceAccess".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "SetUserNamespaceAccess"
            )
        }
        /// Namespace for "GetAsyncOperation" metadata.
        package enum GetAsyncOperation {
            /// Request type for "GetAsyncOperation".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest
            /// Response type for "GetAsyncOperation".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationResponse
            /// Descriptor for "GetAsyncOperation".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetAsyncOperation"
            )
        }
        /// Namespace for "CreateNamespace" metadata.
        package enum CreateNamespace {
            /// Request type for "CreateNamespace".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest
            /// Response type for "CreateNamespace".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceResponse
            /// Descriptor for "CreateNamespace".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "CreateNamespace"
            )
        }
        /// Namespace for "GetNamespaces" metadata.
        package enum GetNamespaces {
            /// Request type for "GetNamespaces".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest
            /// Response type for "GetNamespaces".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesResponse
            /// Descriptor for "GetNamespaces".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetNamespaces"
            )
        }
        /// Namespace for "GetNamespace" metadata.
        package enum GetNamespace {
            /// Request type for "GetNamespace".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest
            /// Response type for "GetNamespace".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceResponse
            /// Descriptor for "GetNamespace".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetNamespace"
            )
        }
        /// Namespace for "UpdateNamespace" metadata.
        package enum UpdateNamespace {
            /// Request type for "UpdateNamespace".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest
            /// Response type for "UpdateNamespace".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceResponse
            /// Descriptor for "UpdateNamespace".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "UpdateNamespace"
            )
        }
        /// Namespace for "RenameCustomSearchAttribute" metadata.
        package enum RenameCustomSearchAttribute {
            /// Request type for "RenameCustomSearchAttribute".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest
            /// Response type for "RenameCustomSearchAttribute".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeResponse
            /// Descriptor for "RenameCustomSearchAttribute".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "RenameCustomSearchAttribute"
            )
        }
        /// Namespace for "DeleteNamespace" metadata.
        package enum DeleteNamespace {
            /// Request type for "DeleteNamespace".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest
            /// Response type for "DeleteNamespace".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceResponse
            /// Descriptor for "DeleteNamespace".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "DeleteNamespace"
            )
        }
        /// Namespace for "FailoverNamespaceRegion" metadata.
        package enum FailoverNamespaceRegion {
            /// Request type for "FailoverNamespaceRegion".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest
            /// Response type for "FailoverNamespaceRegion".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionResponse
            /// Descriptor for "FailoverNamespaceRegion".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "FailoverNamespaceRegion"
            )
        }
        /// Namespace for "AddNamespaceRegion" metadata.
        package enum AddNamespaceRegion {
            /// Request type for "AddNamespaceRegion".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest
            /// Response type for "AddNamespaceRegion".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionResponse
            /// Descriptor for "AddNamespaceRegion".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "AddNamespaceRegion"
            )
        }
        /// Namespace for "DeleteNamespaceRegion" metadata.
        package enum DeleteNamespaceRegion {
            /// Request type for "DeleteNamespaceRegion".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest
            /// Response type for "DeleteNamespaceRegion".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionResponse
            /// Descriptor for "DeleteNamespaceRegion".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "DeleteNamespaceRegion"
            )
        }
        /// Namespace for "GetRegions" metadata.
        package enum GetRegions {
            /// Request type for "GetRegions".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest
            /// Response type for "GetRegions".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetRegionsResponse
            /// Descriptor for "GetRegions".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetRegions"
            )
        }
        /// Namespace for "GetRegion" metadata.
        package enum GetRegion {
            /// Request type for "GetRegion".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest
            /// Response type for "GetRegion".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetRegionResponse
            /// Descriptor for "GetRegion".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetRegion"
            )
        }
        /// Namespace for "GetApiKeys" metadata.
        package enum GetApiKeys {
            /// Request type for "GetApiKeys".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest
            /// Response type for "GetApiKeys".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysResponse
            /// Descriptor for "GetApiKeys".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetApiKeys"
            )
        }
        /// Namespace for "GetApiKey" metadata.
        package enum GetApiKey {
            /// Request type for "GetApiKey".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest
            /// Response type for "GetApiKey".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyResponse
            /// Descriptor for "GetApiKey".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetApiKey"
            )
        }
        /// Namespace for "CreateApiKey" metadata.
        package enum CreateApiKey {
            /// Request type for "CreateApiKey".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest
            /// Response type for "CreateApiKey".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyResponse
            /// Descriptor for "CreateApiKey".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "CreateApiKey"
            )
        }
        /// Namespace for "UpdateApiKey" metadata.
        package enum UpdateApiKey {
            /// Request type for "UpdateApiKey".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest
            /// Response type for "UpdateApiKey".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyResponse
            /// Descriptor for "UpdateApiKey".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "UpdateApiKey"
            )
        }
        /// Namespace for "DeleteApiKey" metadata.
        package enum DeleteApiKey {
            /// Request type for "DeleteApiKey".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest
            /// Response type for "DeleteApiKey".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyResponse
            /// Descriptor for "DeleteApiKey".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "DeleteApiKey"
            )
        }
        /// Namespace for "GetNexusEndpoints" metadata.
        package enum GetNexusEndpoints {
            /// Request type for "GetNexusEndpoints".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest
            /// Response type for "GetNexusEndpoints".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsResponse
            /// Descriptor for "GetNexusEndpoints".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetNexusEndpoints"
            )
        }
        /// Namespace for "GetNexusEndpoint" metadata.
        package enum GetNexusEndpoint {
            /// Request type for "GetNexusEndpoint".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest
            /// Response type for "GetNexusEndpoint".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointResponse
            /// Descriptor for "GetNexusEndpoint".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetNexusEndpoint"
            )
        }
        /// Namespace for "CreateNexusEndpoint" metadata.
        package enum CreateNexusEndpoint {
            /// Request type for "CreateNexusEndpoint".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest
            /// Response type for "CreateNexusEndpoint".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointResponse
            /// Descriptor for "CreateNexusEndpoint".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "CreateNexusEndpoint"
            )
        }
        /// Namespace for "UpdateNexusEndpoint" metadata.
        package enum UpdateNexusEndpoint {
            /// Request type for "UpdateNexusEndpoint".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest
            /// Response type for "UpdateNexusEndpoint".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointResponse
            /// Descriptor for "UpdateNexusEndpoint".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "UpdateNexusEndpoint"
            )
        }
        /// Namespace for "DeleteNexusEndpoint" metadata.
        package enum DeleteNexusEndpoint {
            /// Request type for "DeleteNexusEndpoint".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest
            /// Response type for "DeleteNexusEndpoint".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointResponse
            /// Descriptor for "DeleteNexusEndpoint".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "DeleteNexusEndpoint"
            )
        }
        /// Namespace for "GetUserGroups" metadata.
        package enum GetUserGroups {
            /// Request type for "GetUserGroups".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest
            /// Response type for "GetUserGroups".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsResponse
            /// Descriptor for "GetUserGroups".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetUserGroups"
            )
        }
        /// Namespace for "GetUserGroup" metadata.
        package enum GetUserGroup {
            /// Request type for "GetUserGroup".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest
            /// Response type for "GetUserGroup".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupResponse
            /// Descriptor for "GetUserGroup".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetUserGroup"
            )
        }
        /// Namespace for "CreateUserGroup" metadata.
        package enum CreateUserGroup {
            /// Request type for "CreateUserGroup".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest
            /// Response type for "CreateUserGroup".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupResponse
            /// Descriptor for "CreateUserGroup".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "CreateUserGroup"
            )
        }
        /// Namespace for "UpdateUserGroup" metadata.
        package enum UpdateUserGroup {
            /// Request type for "UpdateUserGroup".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest
            /// Response type for "UpdateUserGroup".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupResponse
            /// Descriptor for "UpdateUserGroup".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "UpdateUserGroup"
            )
        }
        /// Namespace for "DeleteUserGroup" metadata.
        package enum DeleteUserGroup {
            /// Request type for "DeleteUserGroup".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest
            /// Response type for "DeleteUserGroup".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupResponse
            /// Descriptor for "DeleteUserGroup".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "DeleteUserGroup"
            )
        }
        /// Namespace for "SetUserGroupNamespaceAccess" metadata.
        package enum SetUserGroupNamespaceAccess {
            /// Request type for "SetUserGroupNamespaceAccess".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest
            /// Response type for "SetUserGroupNamespaceAccess".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessResponse
            /// Descriptor for "SetUserGroupNamespaceAccess".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "SetUserGroupNamespaceAccess"
            )
        }
        /// Namespace for "AddUserGroupMember" metadata.
        package enum AddUserGroupMember {
            /// Request type for "AddUserGroupMember".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest
            /// Response type for "AddUserGroupMember".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberResponse
            /// Descriptor for "AddUserGroupMember".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "AddUserGroupMember"
            )
        }
        /// Namespace for "RemoveUserGroupMember" metadata.
        package enum RemoveUserGroupMember {
            /// Request type for "RemoveUserGroupMember".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest
            /// Response type for "RemoveUserGroupMember".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberResponse
            /// Descriptor for "RemoveUserGroupMember".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "RemoveUserGroupMember"
            )
        }
        /// Namespace for "GetUserGroupMembers" metadata.
        package enum GetUserGroupMembers {
            /// Request type for "GetUserGroupMembers".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest
            /// Response type for "GetUserGroupMembers".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersResponse
            /// Descriptor for "GetUserGroupMembers".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetUserGroupMembers"
            )
        }
        /// Namespace for "CreateServiceAccount" metadata.
        package enum CreateServiceAccount {
            /// Request type for "CreateServiceAccount".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest
            /// Response type for "CreateServiceAccount".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountResponse
            /// Descriptor for "CreateServiceAccount".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "CreateServiceAccount"
            )
        }
        /// Namespace for "GetServiceAccount" metadata.
        package enum GetServiceAccount {
            /// Request type for "GetServiceAccount".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest
            /// Response type for "GetServiceAccount".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountResponse
            /// Descriptor for "GetServiceAccount".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetServiceAccount"
            )
        }
        /// Namespace for "GetServiceAccounts" metadata.
        package enum GetServiceAccounts {
            /// Request type for "GetServiceAccounts".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest
            /// Response type for "GetServiceAccounts".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsResponse
            /// Descriptor for "GetServiceAccounts".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetServiceAccounts"
            )
        }
        /// Namespace for "UpdateServiceAccount" metadata.
        package enum UpdateServiceAccount {
            /// Request type for "UpdateServiceAccount".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest
            /// Response type for "UpdateServiceAccount".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountResponse
            /// Descriptor for "UpdateServiceAccount".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "UpdateServiceAccount"
            )
        }
        /// Namespace for "DeleteServiceAccount" metadata.
        package enum DeleteServiceAccount {
            /// Request type for "DeleteServiceAccount".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest
            /// Response type for "DeleteServiceAccount".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountResponse
            /// Descriptor for "DeleteServiceAccount".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "DeleteServiceAccount"
            )
        }
        /// Namespace for "GetUsage" metadata.
        package enum GetUsage {
            /// Request type for "GetUsage".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest
            /// Response type for "GetUsage".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetUsageResponse
            /// Descriptor for "GetUsage".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetUsage"
            )
        }
        /// Namespace for "GetAccount" metadata.
        package enum GetAccount {
            /// Request type for "GetAccount".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest
            /// Response type for "GetAccount".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetAccountResponse
            /// Descriptor for "GetAccount".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetAccount"
            )
        }
        /// Namespace for "UpdateAccount" metadata.
        package enum UpdateAccount {
            /// Request type for "UpdateAccount".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest
            /// Response type for "UpdateAccount".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountResponse
            /// Descriptor for "UpdateAccount".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "UpdateAccount"
            )
        }
        /// Namespace for "CreateNamespaceExportSink" metadata.
        package enum CreateNamespaceExportSink {
            /// Request type for "CreateNamespaceExportSink".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest
            /// Response type for "CreateNamespaceExportSink".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkResponse
            /// Descriptor for "CreateNamespaceExportSink".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "CreateNamespaceExportSink"
            )
        }
        /// Namespace for "GetNamespaceExportSink" metadata.
        package enum GetNamespaceExportSink {
            /// Request type for "GetNamespaceExportSink".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest
            /// Response type for "GetNamespaceExportSink".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkResponse
            /// Descriptor for "GetNamespaceExportSink".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetNamespaceExportSink"
            )
        }
        /// Namespace for "GetNamespaceExportSinks" metadata.
        package enum GetNamespaceExportSinks {
            /// Request type for "GetNamespaceExportSinks".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest
            /// Response type for "GetNamespaceExportSinks".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksResponse
            /// Descriptor for "GetNamespaceExportSinks".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetNamespaceExportSinks"
            )
        }
        /// Namespace for "UpdateNamespaceExportSink" metadata.
        package enum UpdateNamespaceExportSink {
            /// Request type for "UpdateNamespaceExportSink".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest
            /// Response type for "UpdateNamespaceExportSink".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkResponse
            /// Descriptor for "UpdateNamespaceExportSink".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "UpdateNamespaceExportSink"
            )
        }
        /// Namespace for "DeleteNamespaceExportSink" metadata.
        package enum DeleteNamespaceExportSink {
            /// Request type for "DeleteNamespaceExportSink".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest
            /// Response type for "DeleteNamespaceExportSink".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkResponse
            /// Descriptor for "DeleteNamespaceExportSink".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "DeleteNamespaceExportSink"
            )
        }
        /// Namespace for "ValidateNamespaceExportSink" metadata.
        package enum ValidateNamespaceExportSink {
            /// Request type for "ValidateNamespaceExportSink".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest
            /// Response type for "ValidateNamespaceExportSink".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkResponse
            /// Descriptor for "ValidateNamespaceExportSink".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "ValidateNamespaceExportSink"
            )
        }
        /// Namespace for "UpdateNamespaceTags" metadata.
        package enum UpdateNamespaceTags {
            /// Request type for "UpdateNamespaceTags".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest
            /// Response type for "UpdateNamespaceTags".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsResponse
            /// Descriptor for "UpdateNamespaceTags".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "UpdateNamespaceTags"
            )
        }
        /// Namespace for "CreateConnectivityRule" metadata.
        package enum CreateConnectivityRule {
            /// Request type for "CreateConnectivityRule".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest
            /// Response type for "CreateConnectivityRule".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleResponse
            /// Descriptor for "CreateConnectivityRule".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "CreateConnectivityRule"
            )
        }
        /// Namespace for "GetConnectivityRule" metadata.
        package enum GetConnectivityRule {
            /// Request type for "GetConnectivityRule".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest
            /// Response type for "GetConnectivityRule".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleResponse
            /// Descriptor for "GetConnectivityRule".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetConnectivityRule"
            )
        }
        /// Namespace for "GetConnectivityRules" metadata.
        package enum GetConnectivityRules {
            /// Request type for "GetConnectivityRules".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest
            /// Response type for "GetConnectivityRules".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesResponse
            /// Descriptor for "GetConnectivityRules".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "GetConnectivityRules"
            )
        }
        /// Namespace for "DeleteConnectivityRule" metadata.
        package enum DeleteConnectivityRule {
            /// Request type for "DeleteConnectivityRule".
            package typealias Input = Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest
            /// Response type for "DeleteConnectivityRule".
            package typealias Output = Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleResponse
            /// Descriptor for "DeleteConnectivityRule".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService"),
                method: "DeleteConnectivityRule"
            )
        }
        /// Descriptors for all methods in the "temporal.api.cloud.cloudservice.v1.CloudService" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetUsers.descriptor,
            GetUser.descriptor,
            CreateUser.descriptor,
            UpdateUser.descriptor,
            DeleteUser.descriptor,
            SetUserNamespaceAccess.descriptor,
            GetAsyncOperation.descriptor,
            CreateNamespace.descriptor,
            GetNamespaces.descriptor,
            GetNamespace.descriptor,
            UpdateNamespace.descriptor,
            RenameCustomSearchAttribute.descriptor,
            DeleteNamespace.descriptor,
            FailoverNamespaceRegion.descriptor,
            AddNamespaceRegion.descriptor,
            DeleteNamespaceRegion.descriptor,
            GetRegions.descriptor,
            GetRegion.descriptor,
            GetApiKeys.descriptor,
            GetApiKey.descriptor,
            CreateApiKey.descriptor,
            UpdateApiKey.descriptor,
            DeleteApiKey.descriptor,
            GetNexusEndpoints.descriptor,
            GetNexusEndpoint.descriptor,
            CreateNexusEndpoint.descriptor,
            UpdateNexusEndpoint.descriptor,
            DeleteNexusEndpoint.descriptor,
            GetUserGroups.descriptor,
            GetUserGroup.descriptor,
            CreateUserGroup.descriptor,
            UpdateUserGroup.descriptor,
            DeleteUserGroup.descriptor,
            SetUserGroupNamespaceAccess.descriptor,
            AddUserGroupMember.descriptor,
            RemoveUserGroupMember.descriptor,
            GetUserGroupMembers.descriptor,
            CreateServiceAccount.descriptor,
            GetServiceAccount.descriptor,
            GetServiceAccounts.descriptor,
            UpdateServiceAccount.descriptor,
            DeleteServiceAccount.descriptor,
            GetUsage.descriptor,
            GetAccount.descriptor,
            UpdateAccount.descriptor,
            CreateNamespaceExportSink.descriptor,
            GetNamespaceExportSink.descriptor,
            GetNamespaceExportSinks.descriptor,
            UpdateNamespaceExportSink.descriptor,
            DeleteNamespaceExportSink.descriptor,
            ValidateNamespaceExportSink.descriptor,
            UpdateNamespaceTags.descriptor,
            CreateConnectivityRule.descriptor,
            GetConnectivityRule.descriptor,
            GetConnectivityRules.descriptor,
            DeleteConnectivityRule.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "temporal.api.cloud.cloudservice.v1.CloudService" service.
    package static let temporal_api_cloud_cloudservice_v1_CloudService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "temporal.api.cloud.cloudservice.v1.CloudService")
}

// MARK: temporal.api.cloud.cloudservice.v1.CloudService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Temporal_Api_Cloud_Cloudservice_V1_CloudService {
    /// Generated client protocol for the "temporal.api.cloud.cloudservice.v1.CloudService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > WARNING: This service is currently experimental and may change in
    /// > incompatible ways.
    package protocol ClientProtocol: Sendable {
        /// Call the "GetUsers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets all known users
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUsersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUsers<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUsersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUsersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUser" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUser<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateUser" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createUser<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateUserResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateUserResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateUser" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update a user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateUser<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteUser" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteUser<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetUserNamespaceAccess" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Set a user's access to a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setUserNamespaceAccess<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAsyncOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the latest information on an async operation
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAsyncOperation<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a new namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetNamespaces" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get all namespaces
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getNamespaces<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RenameCustomSearchAttribute" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Rename an existing customer search attribute
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func renameCustomSearchAttribute<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "FailoverNamespaceRegion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Failover a multi-region namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func failoverNamespaceRegion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AddNamespaceRegion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Add a new region to a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addNamespaceRegion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteNamespaceRegion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a region from a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteNamespaceRegion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetRegions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get all regions
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetRegionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getRegions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetRegion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a region
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetRegionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getRegion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetRegionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetRegionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetApiKeys" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get all known API keys
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getApiKeys<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetApiKey" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get an API key
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getApiKey<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateApiKey" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create an API key
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createApiKey<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateApiKey" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update an API key
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateApiKey<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteApiKey" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete an API key
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteApiKey<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetNexusEndpoints" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets nexus endpoints
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getNexusEndpoints<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a nexus endpoint
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a nexus endpoint
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update a nexus endpoint
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a nexus endpoint
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUserGroups" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get all user groups
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUserGroups<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUserGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a user group
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUserGroup<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateUserGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create new a user group
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createUserGroup<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateUserGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update a user group
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateUserGroup<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteUserGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a user group
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteUserGroup<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SetUserGroupNamespaceAccess" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Set a user group's access to a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func setUserGroupNamespaceAccess<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AddUserGroupMember" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Add a member to the group, can only be used with Cloud group types.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addUserGroupMember<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RemoveUserGroupMember" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Remove a member from the group, can only be used with Cloud group types.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func removeUserGroupMember<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUserGroupMembers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUserGroupMembers<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateServiceAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a service account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createServiceAccount<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetServiceAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a service account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getServiceAccount<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetServiceAccounts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get service accounts.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getServiceAccounts<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateServiceAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update a service account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateServiceAccount<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteServiceAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a service account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteServiceAccount<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUsage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > WARNING: Pre-Release Feature
        /// > Get usage data across namespaces
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUsageResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUsage<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUsageResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUsageResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get account information.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetAccountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAccount<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetAccountResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetAccountResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update account information.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateAccount<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateNamespaceExportSink" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create an export sink
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createNamespaceExportSink<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetNamespaceExportSink" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get an export sink 
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getNamespaceExportSink<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetNamespaceExportSinks" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get export sinks
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getNamespaceExportSinks<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateNamespaceExportSink" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update an export sink
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateNamespaceExportSink<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteNamespaceExportSink" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete an export sink
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteNamespaceExportSink<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ValidateNamespaceExportSink" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Validates an export sink configuration by delivering an empty test file to the specified sink.
        /// > This operation verifies that the sink is correctly configured, accessible, and ready for data export.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func validateNamespaceExportSink<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateNamespaceTags" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update the tags for a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateNamespaceTags<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateConnectivityRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a connectivity rule
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createConnectivityRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetConnectivityRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a connectivity rule by id
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getConnectivityRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetConnectivityRules" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists connectivity rules by account
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getConnectivityRules<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteConnectivityRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a connectivity rule by id
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteConnectivityRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "temporal.api.cloud.cloudservice.v1.CloudService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > WARNING: This service is currently experimental and may change in
    /// > incompatible ways.
    package struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "GetUsers" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets all known users
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUsersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getUsers<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUsersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUsersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetUsers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUser" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getUser<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateUser" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createUser<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateUserResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateUserResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.CreateUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateUser" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update a user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateUser<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.UpdateUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteUser" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a user
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteUser<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.DeleteUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetUserNamespaceAccess" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Set a user's access to a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func setUserNamespaceAccess<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.SetUserNamespaceAccess.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAsyncOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the latest information on an async operation
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getAsyncOperation<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetAsyncOperation.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a new namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.CreateNamespace.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetNamespaces" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get all namespaces
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getNamespaces<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetNamespaces.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetNamespace.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.UpdateNamespace.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RenameCustomSearchAttribute" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Rename an existing customer search attribute
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func renameCustomSearchAttribute<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.RenameCustomSearchAttribute.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteNamespace" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteNamespace<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.DeleteNamespace.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "FailoverNamespaceRegion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Failover a multi-region namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func failoverNamespaceRegion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.FailoverNamespaceRegion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AddNamespaceRegion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Add a new region to a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func addNamespaceRegion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.AddNamespaceRegion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteNamespaceRegion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a region from a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteNamespaceRegion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.DeleteNamespaceRegion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetRegions" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get all regions
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetRegionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getRegions<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetRegions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetRegion" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a region
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetRegionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getRegion<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetRegionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetRegionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetRegion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetApiKeys" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get all known API keys
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getApiKeys<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetApiKeys.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetApiKey" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get an API key
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getApiKey<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetApiKey.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateApiKey" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create an API key
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createApiKey<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.CreateApiKey.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateApiKey" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update an API key
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateApiKey<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.UpdateApiKey.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteApiKey" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete an API key
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteApiKey<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.DeleteApiKey.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetNexusEndpoints" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets nexus endpoints
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getNexusEndpoints<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetNexusEndpoints.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a nexus endpoint
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetNexusEndpoint.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a nexus endpoint
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.CreateNexusEndpoint.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update a nexus endpoint
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.UpdateNexusEndpoint.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteNexusEndpoint" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a nexus endpoint
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteNexusEndpoint<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.DeleteNexusEndpoint.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUserGroups" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get all user groups
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getUserGroups<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetUserGroups.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUserGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a user group
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getUserGroup<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetUserGroup.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateUserGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create new a user group
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createUserGroup<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.CreateUserGroup.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateUserGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update a user group
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateUserGroup<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.UpdateUserGroup.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteUserGroup" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a user group
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteUserGroup<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.DeleteUserGroup.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SetUserGroupNamespaceAccess" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Set a user group's access to a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func setUserGroupNamespaceAccess<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.SetUserGroupNamespaceAccess.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AddUserGroupMember" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Add a member to the group, can only be used with Cloud group types.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func addUserGroupMember<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.AddUserGroupMember.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RemoveUserGroupMember" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Remove a member from the group, can only be used with Cloud group types.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func removeUserGroupMember<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.RemoveUserGroupMember.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUserGroupMembers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getUserGroupMembers<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetUserGroupMembers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateServiceAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a service account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createServiceAccount<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.CreateServiceAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetServiceAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a service account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getServiceAccount<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetServiceAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetServiceAccounts" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get service accounts.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getServiceAccounts<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetServiceAccounts.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateServiceAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update a service account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateServiceAccount<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.UpdateServiceAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteServiceAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a service account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteServiceAccount<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.DeleteServiceAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUsage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > WARNING: Pre-Release Feature
        /// > Get usage data across namespaces
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetUsageResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getUsage<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUsageResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUsageResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetUsage.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get account information.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetAccountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getAccount<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetAccountResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetAccountResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateAccount" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update account information.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateAccount<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.UpdateAccount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateNamespaceExportSink" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create an export sink
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createNamespaceExportSink<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.CreateNamespaceExportSink.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetNamespaceExportSink" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get an export sink 
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getNamespaceExportSink<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetNamespaceExportSink.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetNamespaceExportSinks" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get export sinks
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getNamespaceExportSinks<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetNamespaceExportSinks.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateNamespaceExportSink" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update an export sink
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateNamespaceExportSink<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.UpdateNamespaceExportSink.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteNamespaceExportSink" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete an export sink
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteNamespaceExportSink<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.DeleteNamespaceExportSink.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ValidateNamespaceExportSink" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Validates an export sink configuration by delivering an empty test file to the specified sink.
        /// > This operation verifies that the sink is correctly configured, accessible, and ready for data export.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func validateNamespaceExportSink<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.ValidateNamespaceExportSink.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateNamespaceTags" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update the tags for a namespace
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateNamespaceTags<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.UpdateNamespaceTags.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateConnectivityRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a connectivity rule
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createConnectivityRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.CreateConnectivityRule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetConnectivityRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a connectivity rule by id
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getConnectivityRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetConnectivityRule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetConnectivityRules" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists connectivity rules by account
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getConnectivityRules<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.GetConnectivityRules.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteConnectivityRule" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a connectivity rule by id
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest` message.
        ///   - serializer: A serializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest` messages.
        ///   - deserializer: A deserializer for `Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteConnectivityRule<Result>(
            request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest>,
            serializer: some GRPCCore.MessageSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Temporal_Api_Cloud_Cloudservice_V1_CloudService.Method.DeleteConnectivityRule.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Temporal_Api_Cloud_Cloudservice_V1_CloudService.ClientProtocol {
    /// Call the "GetUsers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets all known users
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getUsers<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUsersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUsers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUsersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUser" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a user
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getUser<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateUser" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a user
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createUser<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateUserResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateUser" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update a user
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateUser<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteUser" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a user
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteUser<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetUserNamespaceAccess" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Set a user's access to a namespace
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func setUserNamespaceAccess<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setUserNamespaceAccess(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAsyncOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get the latest information on an async operation
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getAsyncOperation<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAsyncOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a new namespace
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createNamespace<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createNamespace(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNamespaces" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get all namespaces
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNamespaces<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getNamespaces(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a namespace
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNamespace<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getNamespace(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update a namespace
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateNamespace<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateNamespace(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RenameCustomSearchAttribute" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Rename an existing customer search attribute
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func renameCustomSearchAttribute<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.renameCustomSearchAttribute(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a namespace
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteNamespace<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteNamespace(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FailoverNamespaceRegion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Failover a multi-region namespace
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func failoverNamespaceRegion<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.failoverNamespaceRegion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddNamespaceRegion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Add a new region to a namespace
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func addNamespaceRegion<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addNamespaceRegion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNamespaceRegion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a region from a namespace
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteNamespaceRegion<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteNamespaceRegion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetRegions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get all regions
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getRegions<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getRegions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetRegion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a region
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getRegion<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetRegionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getRegion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetRegionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetApiKeys" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get all known API keys
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getApiKeys<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getApiKeys(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetApiKey" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get an API key
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getApiKey<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getApiKey(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateApiKey" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create an API key
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createApiKey<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createApiKey(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateApiKey" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update an API key
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateApiKey<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateApiKey(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteApiKey" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete an API key
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteApiKey<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteApiKey(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNexusEndpoints" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets nexus endpoints
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNexusEndpoints<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getNexusEndpoints(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a nexus endpoint
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNexusEndpoint<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getNexusEndpoint(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a nexus endpoint
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createNexusEndpoint<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createNexusEndpoint(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update a nexus endpoint
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateNexusEndpoint<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateNexusEndpoint(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a nexus endpoint
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteNexusEndpoint<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteNexusEndpoint(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUserGroups" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get all user groups
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getUserGroups<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUserGroups(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUserGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a user group
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getUserGroup<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUserGroup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateUserGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create new a user group
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createUserGroup<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createUserGroup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateUserGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update a user group
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateUserGroup<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateUserGroup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteUserGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a user group
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteUserGroup<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteUserGroup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetUserGroupNamespaceAccess" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Set a user group's access to a namespace
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func setUserGroupNamespaceAccess<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.setUserGroupNamespaceAccess(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddUserGroupMember" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Add a member to the group, can only be used with Cloud group types.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func addUserGroupMember<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addUserGroupMember(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveUserGroupMember" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Remove a member from the group, can only be used with Cloud group types.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func removeUserGroupMember<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.removeUserGroupMember(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUserGroupMembers" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getUserGroupMembers<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUserGroupMembers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateServiceAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a service account.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createServiceAccount<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createServiceAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetServiceAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a service account.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getServiceAccount<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getServiceAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetServiceAccounts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get service accounts.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getServiceAccounts<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getServiceAccounts(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateServiceAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update a service account.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateServiceAccount<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateServiceAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteServiceAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a service account.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteServiceAccount<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteServiceAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUsage" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > WARNING: Pre-Release Feature
    /// > Get usage data across namespaces
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getUsage<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUsageResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUsage(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetUsageResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get account information.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getAccount<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetAccountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetAccountResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update account information.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateAccount<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateAccount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateNamespaceExportSink" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create an export sink
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createNamespaceExportSink<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createNamespaceExportSink(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNamespaceExportSink" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get an export sink 
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNamespaceExportSink<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getNamespaceExportSink(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNamespaceExportSinks" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get export sinks
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNamespaceExportSinks<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getNamespaceExportSinks(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNamespaceExportSink" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update an export sink
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateNamespaceExportSink<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateNamespaceExportSink(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNamespaceExportSink" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete an export sink
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteNamespaceExportSink<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteNamespaceExportSink(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ValidateNamespaceExportSink" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Validates an export sink configuration by delivering an empty test file to the specified sink.
    /// > This operation verifies that the sink is correctly configured, accessible, and ready for data export.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func validateNamespaceExportSink<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.validateNamespaceExportSink(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNamespaceTags" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update the tags for a namespace
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateNamespaceTags<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateNamespaceTags(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateConnectivityRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a connectivity rule
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createConnectivityRule<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createConnectivityRule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetConnectivityRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a connectivity rule by id
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getConnectivityRule<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getConnectivityRule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetConnectivityRules" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists connectivity rules by account
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getConnectivityRules<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getConnectivityRules(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteConnectivityRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a connectivity rule by id
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteConnectivityRule<Result>(
        request: GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteConnectivityRule(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Temporal_Api_Cloud_Cloudservice_V1_CloudService.ClientProtocol {
    /// Call the "GetUsers" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets all known users
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getUsers<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUsersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUsersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUsers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUser" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a user
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getUser<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateUser" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a user
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createUser<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateUser" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update a user
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateUser<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteUser" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a user
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteUser<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetUserNamespaceAccess" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Set a user's access to a namespace
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func setUserNamespaceAccess<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_SetUserNamespaceAccessRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setUserNamespaceAccess(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAsyncOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get the latest information on an async operation
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getAsyncOperation<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetAsyncOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAsyncOperation(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a new namespace
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createNamespace<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createNamespace(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNamespaces" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get all namespaces
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNamespaces<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespacesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getNamespaces(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a namespace
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNamespace<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getNamespace(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update a namespace
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateNamespace<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateNamespace(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RenameCustomSearchAttribute" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Rename an existing customer search attribute
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func renameCustomSearchAttribute<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_RenameCustomSearchAttributeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.renameCustomSearchAttribute(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNamespace" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a namespace
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteNamespace<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteNamespace(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FailoverNamespaceRegion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Failover a multi-region namespace
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func failoverNamespaceRegion<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_FailoverNamespaceRegionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.failoverNamespaceRegion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddNamespaceRegion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Add a new region to a namespace
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func addNamespaceRegion<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_AddNamespaceRegionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addNamespaceRegion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNamespaceRegion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a region from a namespace
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteNamespaceRegion<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceRegionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteNamespaceRegion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetRegions" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get all regions
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getRegions<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetRegionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getRegions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetRegion" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a region
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getRegion<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetRegionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetRegionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getRegion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetApiKeys" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get all known API keys
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getApiKeys<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeysRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getApiKeys(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetApiKey" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get an API key
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getApiKey<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetApiKeyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getApiKey(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateApiKey" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create an API key
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createApiKey<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateApiKeyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createApiKey(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateApiKey" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update an API key
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateApiKey<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateApiKeyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateApiKey(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteApiKey" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete an API key
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteApiKey<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteApiKeyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteApiKey(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNexusEndpoints" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets nexus endpoints
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNexusEndpoints<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getNexusEndpoints(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a nexus endpoint
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNexusEndpoint<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNexusEndpointRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getNexusEndpoint(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a nexus endpoint
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createNexusEndpoint<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateNexusEndpointRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createNexusEndpoint(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update a nexus endpoint
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateNexusEndpoint<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNexusEndpointRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateNexusEndpoint(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNexusEndpoint" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a nexus endpoint
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteNexusEndpoint<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNexusEndpointRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteNexusEndpoint(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUserGroups" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get all user groups
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getUserGroups<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUserGroups(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUserGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a user group
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getUserGroup<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUserGroup(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateUserGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create new a user group
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createUserGroup<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateUserGroupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createUserGroup(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateUserGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update a user group
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateUserGroup<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateUserGroupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateUserGroup(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteUserGroup" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a user group
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteUserGroup<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteUserGroupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteUserGroup(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SetUserGroupNamespaceAccess" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Set a user group's access to a namespace
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func setUserGroupNamespaceAccess<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_SetUserGroupNamespaceAccessRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.setUserGroupNamespaceAccess(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddUserGroupMember" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Add a member to the group, can only be used with Cloud group types.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func addUserGroupMember<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_AddUserGroupMemberRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addUserGroupMember(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveUserGroupMember" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Remove a member from the group, can only be used with Cloud group types.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func removeUserGroupMember<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_RemoveUserGroupMemberRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.removeUserGroupMember(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUserGroupMembers" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getUserGroupMembers<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUserGroupMembersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUserGroupMembers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateServiceAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a service account.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createServiceAccount<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateServiceAccountRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createServiceAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetServiceAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a service account.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getServiceAccount<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getServiceAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetServiceAccounts" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get service accounts.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getServiceAccounts<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetServiceAccountsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getServiceAccounts(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateServiceAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update a service account.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateServiceAccount<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateServiceAccountRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateServiceAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteServiceAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a service account.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteServiceAccount<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteServiceAccountRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteServiceAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUsage" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > WARNING: Pre-Release Feature
    /// > Get usage data across namespaces
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getUsage<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetUsageResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetUsageRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUsage(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get account information.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getAccount<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetAccountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetAccountRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateAccount" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update account information.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateAccount<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateAccountRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateAccount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateNamespaceExportSink" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create an export sink
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createNamespaceExportSink<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateNamespaceExportSinkRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createNamespaceExportSink(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNamespaceExportSink" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get an export sink 
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNamespaceExportSink<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinkRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getNamespaceExportSink(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNamespaceExportSinks" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get export sinks
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getNamespaceExportSinks<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetNamespaceExportSinksRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getNamespaceExportSinks(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNamespaceExportSink" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update an export sink
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateNamespaceExportSink<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceExportSinkRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateNamespaceExportSink(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNamespaceExportSink" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete an export sink
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteNamespaceExportSink<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteNamespaceExportSinkRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteNamespaceExportSink(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ValidateNamespaceExportSink" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Validates an export sink configuration by delivering an empty test file to the specified sink.
    /// > This operation verifies that the sink is correctly configured, accessible, and ready for data export.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func validateNamespaceExportSink<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_ValidateNamespaceExportSinkRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.validateNamespaceExportSink(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateNamespaceTags" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update the tags for a namespace
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateNamespaceTags<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_UpdateNamespaceTagsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateNamespaceTags(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateConnectivityRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a connectivity rule
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createConnectivityRule<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_CreateConnectivityRuleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createConnectivityRule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetConnectivityRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a connectivity rule by id
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getConnectivityRule<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRuleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getConnectivityRule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetConnectivityRules" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists connectivity rules by account
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getConnectivityRules<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_GetConnectivityRulesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getConnectivityRules(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteConnectivityRule" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a connectivity rule by id
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteConnectivityRule<Result>(
        _ message: Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Temporal_Api_Cloud_Cloudservice_V1_DeleteConnectivityRuleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteConnectivityRule(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}