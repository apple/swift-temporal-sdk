//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Temporal SDK open source project
//
// Copyright (c) 2025 Apple Inc. and the Swift Temporal SDK project authors
// Licensed under MIT License
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Swift Temporal SDK project authors
//
// SPDX-License-Identifier: MIT
//
//===----------------------------------------------------------------------===//

public import Configuration

extension TemporalWorker.Configuration {
    /// Instrumentation configuration settings for the Temporal worker controlling tracing, metrics, and
    /// logging behavior.
    ///
    /// The instrumentation configuration determines how the worker reports telemetry data to monitoring
    /// systems. This includes distributed tracing spans, performance metrics, and structured logging output.
    ///
    /// ## Usage
    ///
    /// Create instrumentation configuration with the server hostname:
    ///
    /// ```swift
    /// let instrumentation = TemporalWorker.Configuration.Instrumentation(
    ///     serverHostname: "temporal.production.com"
    /// )
    /// ```
    ///
    /// The server hostname appears in telemetry data to identify the Temporal server instance that the
    /// worker connects to, enabling proper correlation of metrics and traces across your infrastructure.
    public struct Instrumentation: Hashable, Sendable {
        /// The hostname of the Temporal server used for telemetry and instrumentation purposes.
        ///
        /// This hostname populates the `server.address` attribute on distributed tracing spans
        /// generated by the worker client. It helps identify which Temporal server instance the worker
        /// communicates with in monitoring dashboards and trace analysis tools.
        public var serverHostname: String

        /// Creates an instrumentation configuration with the specified server hostname.
        ///
        /// - Parameters:
        ///   - serverHostname: The Temporal server hostname used in telemetry data for
        ///   identifying the server instance.
        public init(serverHostname: String) {
            self.serverHostname = serverHostname
        }

        /// Creates an instrumentation configuration from external configuration data.
        ///
        /// This initializer reads the server hostname from a `ConfigReader`, typically loaded from
        /// environment variables or configuration files.
        ///
        /// ## Required configuration keys
        ///
        /// - `worker.client.instrumentation.serverhostname`: The Temporal server
        /// hostname for telemetry identification
        ///
        /// - Parameters:
        ///   - configReader: The configuration reader containing the required hostname value.
        /// - Throws: Configuration errors if the required hostname key is missing or invalid.
        public init(configReader: ConfigReader) throws {
            let serverHostname = try configReader.withSnapshot { snapshotContainer in
                try snapshotContainer.requiredString(forKey: .workerClientServerHostname)
            }

            self.init(serverHostname: serverHostname)
        }
    }
}
